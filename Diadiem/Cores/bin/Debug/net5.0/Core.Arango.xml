<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core.Arango</name>
    </assembly>
    <members>
        <member name="T:Core.Arango.ArangoConfiguration">
            <summary>
                Driver configuration.
            </summary>
        </member>
        <member name="M:Core.Arango.ArangoConfiguration.#ctor">
            <summary>
            Arango Configuration
            </summary>
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.ConnectionString">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.Realm">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.Server">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.User">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.Password">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.BatchSize">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.Serializer">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.Transport">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.QueryProfile">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.HttpClient">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.AllowDirtyRead">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.Endpoints">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.ResolveProperty">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.ResolveCollection">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoConfiguration.ResolveGroupBy">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.ArangoContext">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.ArangoContext.#ctor(Core.Arango.IArangoConfiguration)">
            <summary>
            </summary>
            <param name="config">configuration</param>
        </member>
        <member name="M:Core.Arango.ArangoContext.#ctor(System.String,Core.Arango.IArangoConfiguration)">
            <summary>
            </summary>
            <param name="cs">connection string</param>
            <param name="settings">settings</param>
        </member>
        <member name="P:Core.Arango.ArangoContext.User">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoContext.Database">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoContext.Collection">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoContext.View">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoContext.Graph">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoContext.Transaction">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoContext.Document">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoContext.Query">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoContext.Index">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoContext.Analyzer">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoContext.Function">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoContext.Configuration">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoContext.Foxx">
            <inheritdoc />
        </member>
        <member name="P:Core.Arango.ArangoContext.Backup">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.ArangoContext.GetVersionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.ArangoContext.GetEndpointsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.ArangoDependencyInjectionExtension">
            <summary>
                Arango dependency injection for ASP.NET Core
            </summary>
        </member>
        <member name="M:Core.Arango.ArangoDependencyInjectionExtension.AddArango(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,System.String})">
            <summary>
                Add Arango service (singleton)
            </summary>
        </member>
        <member name="M:Core.Arango.ArangoDependencyInjectionExtension.AddArango(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Core.Arango.IArangoConfiguration})">
            <summary>
                Add Arango service (singleton)
            </summary>
        </member>
        <member name="M:Core.Arango.ArangoDependencyInjectionExtension.AddArango(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Core.Arango.IArangoConfiguration)">
            <summary>
                Add Arango service (singleton)
            </summary>
        </member>
        <member name="T:Core.Arango.ArangoErrorCode">
            <summary>
                Arango error codes in exception
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorNoError">
            <summary>No error has occurred.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorFailed">
            <summary>Will be raised when a general error occurred.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorSysError">
            <summary>Will be raised when operating system error occurred.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorOutOfMemory">
            <summary>Will be raised when there is a memory shortage.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorInternal">
            <summary>Will be raised when an internal error occurred.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorIllegalNumber">
            <summary>Will be raised when an illegal representation of a number was given.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorNumericOverflow">
            <summary>Will be raised when a numeric overflow occurred.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorIllegalOption">
            <summary>Will be raised when an unknown option was supplied by the user.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorDeadPid">
            <summary>Will be raised when a PID without a living process was found.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorNotImplemented">
            <summary>Will be raised when hitting an unimplemented feature.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorBadParameter">
            <summary>Will be raised when the parameter does not fulfill the requirements.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorForbidden">
            <summary>Will be raised when you are missing permission for the operation.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorOutOfMemoryMmap">
            <summary>Will be raised when there is a memory shortage.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorCorruptedCsv">
            <summary>Will be raised when encountering a corrupt csv line.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorFileNotFound">
            <summary>Will be raised when a file is not found.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorCannotWriteFile">
            <summary>Will be raised when a file cannot be written.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorCannotOverwriteFile">
            <summary>Will be raised when an attempt is made to overwrite an existing file.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorTypeError">
            <summary>Will be raised when a type error is encountered.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLockTimeout">
            <summary>Will be raised when there’s a timeout waiting for a lock.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorCannotCreateDirectory">
            <summary>Will be raised when an attempt to create a directory fails.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorCannotCreateTempFile">
            <summary>Will be raised when an attempt to create a temporary file fails.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorRequestCanceled">
            <summary>Will be raised when a request is canceled by the user.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorDebug">
            <summary>Will be raised intentionally during debugging.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorIpAddressInvalid">
            <summary>Will be raised when the structure of an IP address is invalid.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorFileExists">
            <summary>Will be raised when a file already exists.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLocked">
            <summary>Will be raised when a resource or an operation is locked.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorDeadlock">
            <summary>Will be raised when a deadlock is detected when accessing collections.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorShuttingDown">
            <summary>Will be raised when a call cannot succeed because a server shutdown is already in progress.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorOnlyEnterprise">
            <summary>Will be raised when an Enterprise Edition feature is requested from the Community Edition.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorResourceLimit">
            <summary>Will be raised when the resources used by an operation exceed the configured maximum value.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoIcuError">
            <summary>will be raised if icu operations failed</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorCannotReadFile">
            <summary>Will be raised when a file cannot be read.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorIncompatibleVersion">
            <summary>Will be raised when a server is running an incompatible version of ArangoDB.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorDisabled">
            <summary>Will be raised when a requested resource is not enabled.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHttpBadParameter">
            <summary>Will be raised when the HTTP request does not fulfill the requirements.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHttpUnauthorized">
            <summary>Will be raised when authorization is required but the user is not authorized.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHttpForbidden">
            <summary>Will be raised when the operation is forbidden.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHttpNotFound">
            <summary>Will be raised when an URI is unknown.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHttpMethodNotAllowed">
            <summary>Will be raised when an unsupported HTTP method is used for an operation.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHttpNotAcceptable">
            <summary>Will be raised when an unsupported HTTP content type is used for an operation</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHttpPreconditionFailed">
            <summary>Will be raised when a precondition for an HTTP request is not met.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHttpServerError">
            <summary>Will be raised when an internal server is encountered.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHttpServiceUnavailable">
            <summary>Will be raised when a service is temporarily unavailable.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHttpGatewayTimeout">
            <summary>Will be raised when a service contacted by ArangoDB does not respond in a timely manner.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHttpCorruptedJson">
            <summary>Will be raised when a string representation of a JSON object is corrupt.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHttpSuperfluousSuffices">
            <summary>Will be raised when the URL contains superfluous suffices.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoIllegalState">
            <summary>Internal error that will be raised when the datafile is not in the required state.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDatafileSealed">
            <summary>Internal error that will be raised when trying to write to a datafile.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoReadOnly">
            <summary>Internal error that will be raised when trying to write to a read-only datafile or collection.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDuplicateIdentifier">
            <summary>Internal error that will be raised when a identifier duplicate is detected.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDatafileUnreadable">
            <summary>Internal error that will be raised when a datafile is unreadable.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDatafileEmpty">
            <summary>Internal error that will be raised when a datafile is empty.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoRecovery">
            <summary>Will be raised when an error occurred during WAL log file recovery.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDatafileStatisticsNotFound">
            <summary>Will be raised when a required datafile statistics object was not found.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoCorruptedDatafile">
            <summary>Will be raised when a corruption is detected in a datafile.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoIllegalParameterFile">
            <summary>Will be raised if a parameter file is corrupted or cannot be read.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoCorruptedCollection">
            <summary>Will be raised when a collection contains one or more corrupted data files.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoMmapFailed">
            <summary>Will be raised when the system call mmap failed.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoFilesystemFull">
            <summary>Will be raised when the filesystem is full.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoNoJournal">
            <summary>Will be raised when a journal cannot be created.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDatafileAlreadyExists">
            <summary>Will be raised when the datafile cannot be created or renamed because a file of the same name already exists.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDatadirLocked">
            <summary>Will be raised when the database directory is locked by a different process.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoCollectionDirectoryAlreadyExists">
            <summary>Will be raised when the collection cannot be created because a directory of the same name already exists.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoMsyncFailed">
            <summary>Will be raised when the system call msync failed.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDatadirUnlockable">
            <summary>Will be raised when the server cannot lock the database directory on startup.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoSyncTimeout">
            <summary>Will be raised when the server waited too long for a datafile to be synced to disk.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoConflict">
            <summary>Will be raised when updating or deleting a document and a conflict has been detected.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDatadirInvalid">
            <summary>Will be raised when a non-existing database directory was specified when starting the database.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDocumentNotFound">
            <summary>Will be raised when a document with a given identifier is unknown.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDataSourceNotFound">
            <summary>Will be raised when a collection or View with the given identifier or name is unknown.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoCollectionParameterMissing">
            <summary>Will be raised when the collection parameter is missing.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDocumentHandleBad">
            <summary>Will be raised when a document identifier is corrupt.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoMaximalSizeTooSmall">
            <summary>Will be raised when the maximal size of the journal is too small.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDuplicateName">
            <summary>Will be raised when a name duplicate is detected.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoIllegalName">
            <summary>Will be raised when an illegal name is detected.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoNoIndex">
            <summary>Will be raised when no suitable index for the query is known.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoUniqueConstraintViolated">
            <summary>Will be raised when there is a unique constraint violation.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoIndexNotFound">
            <summary>Will be raised when an index with a given identifier is unknown.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoCrossCollectionRequest">
            <summary>Will be raised when a cross-collection is requested.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoIndexHandleBad">
            <summary>Will be raised when a index identifier is corrupt.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDocumentTooLarge">
            <summary>Will be raised when the document cannot fit into any datafile because of it is too large.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoCollectionNotUnloaded">
            <summary>Will be raised when a collection should be unloaded</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoCollectionTypeInvalid">
            <summary>Will be raised when an invalid collection type is used in a request.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoAttributeParserFailed">
            <summary>Will be raised when parsing an attribute name definition failed.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDocumentKeyBad">
            <summary>Will be raised when a document key is corrupt.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDocumentKeyUnexpected">
            <summary>Will be raised when a user-defined document key is supplied for collections with auto key generation.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDatadirNotWritable">
            <summary>Will be raised when the server’s database directory is not writable for the current user.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoOutOfKeys">
            <summary>Will be raised when a key generator runs out of keys.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDocumentKeyMissing">
            <summary>Will be raised when a document key is missing.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDocumentTypeInvalid">
            <summary>Will be raised when there is an attempt to create a document with an invalid type.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDatabaseNotFound">
            <summary>Will be raised when a non-existing database is accessed.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDatabaseNameInvalid">
            <summary>Will be raised when an invalid database name is used.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoUseSystemDatabase">
            <summary>Will be raised when an operation is requested in a database other than the system database.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoInvalidKeyGenerator">
            <summary>Will be raised when an invalid key generator description is used.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoInvalidEdgeAttribute">
            <summary>will be raised when the from or to values of an edge are undefined or contain an invalid value.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoIndexCreationFailed">
            <summary>Will be raised when an attempt to create an index has failed.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoWriteThrottleTimeout">
            <summary>
                Will be raised when the server is write-throttled and a write operation has waited too long for the server to
                process queued operations.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoCollectionTypeMismatch">
            <summary>Will be raised when a collection has a different type from what has been expected.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoCollectionNotLoaded">
            <summary>Will be raised when a collection is accessed that is not yet loaded.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDocumentRevBad">
            <summary>Will be raised when a document revision is corrupt or is missing where needed.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoIncompleteRead">
            <summary>Will be raised by the storage engine when a read cannot be completed.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoDatafileFull">
            <summary>Will be raised when the datafile reaches its limit.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoEmptyDatadir">
            <summary>Will be raised when encountering an empty server database directory.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoTryAgain">
            <summary>Will be raised when an operation should be retried.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoBusy">
            <summary>Will be raised when storage engine is busy.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoMergeInProgress">
            <summary>Will be raised when storage engine has a datafile merge in progress and cannot complete the operation.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorArangoIoError">
            <summary>Will be raised when storage engine encounters an I/O error.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationNoResponse">
            <summary>Will be raised when the replication applier does not receive any or an incomplete response from the master.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationInvalidResponse">
            <summary>Will be raised when the replication applier receives an invalid response from the master.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationMasterError">
            <summary>Will be raised when the replication applier receives a server error from the master.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationMasterIncompatible">
            <summary>Will be raised when the replication applier connects to a master that has an incompatible version.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationMasterChange">
            <summary>Will be raised when the replication applier connects to a different master than before.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationLoop">
            <summary>Will be raised when the replication applier is asked to connect to itself for replication.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationUnexpectedMarker">
            <summary>Will be raised when an unexpected marker is found in the replication log stream.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationInvalidApplierState">
            <summary>Will be raised when an invalid replication applier state file is found.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationUnexpectedTransaction">
            <summary>Will be raised when an unexpected transaction id is found.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationInvalidApplierConfiguration">
            <summary>Will be raised when the configuration for the replication applier is invalid.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationRunning">
            <summary>Will be raised when there is an attempt to perform an operation while the replication applier is running.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationApplierStopped">
            <summary>Special error code used to indicate the replication applier was stopped by a user.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationNoStartTick">
            <summary>Will be raised when the replication applier is started without a known start tick value.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationStartTickNotPresent">
            <summary>Will be raised when the replication applier fetches data using a start tick</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationWrongChecksum">
            <summary>Will be raised when a new born follower submits a wrong checksum</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorReplicationShardNonempty">
            <summary>Will be raised when a shard is not empty and the follower tries a shortcut</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCreateCollectionPreconditionFailed">
            <summary>Will be raised when updating the plan on collection creatio failed.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterServerUnknown">
            <summary>Will be raised on some occasions when one server gets a request from another</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterTooManyShards">
            <summary>Will be raised when the number of shards for a collection is higher than allowed.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCollectionIdExists">
            <summary>
                Will be raised when a Coordinator in a cluster tries to create a collection and the collection ID already
                exists.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotCreateCollectionInPlan">
            <summary>
                Will be raised when a Coordinator in a cluster cannot create an entry for a new collection in the Plan
                hierarchy in the Agency.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotCreateCollection">
            <summary>
                Will be raised when a Coordinator in a cluster notices that some DB-Servers report problems when creating
                shards for a new collection.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterTimeout">
            <summary>Will be raised when a Coordinator in a cluster runs into a timeout for some cluster wide operation.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotRemoveCollectionInPlan">
            <summary>
                Will be raised when a Coordinator in a cluster cannot remove an entry for a collection in the Plan hierarchy
                in the Agency.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotRemoveCollectionInCurrent">
            <summary>
                Will be raised when a Coordinator in a cluster cannot remove an entry for a collection in the Current
                hierarchy in the Agency.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotCreateDatabaseInPlan">
            <summary>
                Will be raised when a Coordinator in a cluster cannot create an entry for a new database in the Plan hierarchy
                in the Agency.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotCreateDatabase">
            <summary>
                Will be raised when a Coordinator in a cluster notices that some DB-Servers report problems when creating
                databases for a new cluster wide database.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotRemoveDatabaseInPlan">
            <summary>
                Will be raised when a Coordinator in a cluster cannot remove an entry for a database in the Plan hierarchy in
                the Agency.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotRemoveDatabaseInCurrent">
            <summary>
                Will be raised when a Coordinator in a cluster cannot remove an entry for a database in the Current hierarchy
                in the Agency.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterShardGone">
            <summary>
                Will be raised when a Coordinator in a cluster cannot determine the shard that is responsible for a given
                document.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterConnectionLost">
            <summary>
                Will be raised when a Coordinator in a cluster loses an HTTP connection to a DB-Server in the cluster whilst
                transferring data.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterMustNotSpecifyKey">
            <summary>
                Will be raised when a Coordinator in a cluster finds that the key attribute was specified in a sharded
                collection the uses not only key as sharding attribute.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterGotContradictingAnswers">
            <summary>Will be raised if a Coordinator in a cluster gets conflicting results from different shards</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterNotAllShardingAttributesGiven">
            <summary>Will be raised if a Coordinator tries to find out which shard is responsible for a partial document</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterMustNotChangeShardingAttributes">
            <summary>Will be raised if there is an attempt to update the value of a shard attribute.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterUnsupported">
            <summary>
                Will be raised when there is an attempt to carry out an operation that is not supported in the context of a
                sharded collection.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterOnlyOnCoordinator">
            <summary>Will be raised if there is an attempt to run a Coordinator-only operation on a different type of node.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterReadingPlanAgency">
            <summary>Will be raised if a Coordinator or DB-Server cannot read the Plan in the Agency.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotTruncateCollection">
            <summary>Will be raised if a Coordinator cannot truncate all shards of a cluster collection.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterAqlCommunication">
            <summary>Will be raised if the internal communication of the cluster for AQL produces an error.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterOnlyOnDbserver">
            <summary>Will be raised if there is an attempt to run a DB-Server-only operation on a different type of node.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterBackendUnavailable">
            <summary>Will be raised if a required DB-Server can’t be reached.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterAqlCollectionOutOfSync">
            <summary>
                Will be raised if a collection needed during query execution is out of sync. This currently can only happen
                when using SatelliteCollections
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotCreateIndexInPlan">
            <summary>
                Will be raised when a Coordinator in a cluster cannot create an entry for a new index in the Plan hierarchy in
                the Agency.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotDropIndexInPlan">
            <summary>Will be raised when a Coordinator in a cluster cannot remove an index from the Plan hierarchy in the Agency.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterChainOfDistributeshardslike">
            <summary>
                Will be raised if one tries to create a collection with a distributeShardsLike attribute which points to
                another collection that also has one.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterMustNotDropCollOtherDistributeshardslike">
            <summary>
                Will be raised if one tries to drop a collection to which another collection points with its
                distributeShardsLike attribute.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterUnknownDistributeshardslike">
            <summary>
                Will be raised if one tries to create a collection which points to an unknown collection in its
                distributeShardsLike attribute.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterInsufficientDbservers">
            <summary>
                Will be raised if one tries to create a collection with a replicationFactor greater than the available number
                of DB-Servers.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotDropFollower">
            <summary>Will be raised if a follower that ought to be dropped could not be dropped in the Agency (under Current).</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterShardLeaderRefusesReplication">
            <summary>Will be raised if a replication operation is refused by a shard leader.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterShardFollowerRefusesOperation">
            <summary>Will be raised if a non-replication operation is refused by a shard follower.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterShardLeaderResigned">
            <summary>because it has resigned in the meantime</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterAgencyCommunicationFailed">
            <summary>Will be raised if after various retries an Agency operation could not be performed successfully.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterLeadershipChallengeOngoing">
            <summary>Will be raised when servers are currently competing for leadership</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterNotLeader">
            <summary>Will be raised when an operation is sent to a non-leading server.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotCreateViewInPlan">
            <summary>
                Will be raised when a Coordinator in a cluster cannot create an entry for a new View in the Plan hierarchy in
                the Agency.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterViewIdExists">
            <summary>Will be raised when a Coordinator in a cluster tries to create a View and the View ID already exists.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotDropCollection">
            <summary>
                Will be raised when a Coordinator in a cluster cannot drop a collection entry in the Plan hierarchy in the
                Agency.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryKilled">
            <summary>Will be raised when a running query is killed by an explicit admin command.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryParse">
            <summary>Will be raised when query is parsed and is found to be syntactically invalid.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryEmpty">
            <summary>Will be raised when an empty query is specified.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryScript">
            <summary>Will be raised when a runtime error is caused by the query.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryNumberOutOfRange">
            <summary>Will be raised when a number is outside the expected range.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryInvalidGeoValue">
            <summary>Will be raised when a geo index coordinate is invalid or out of range.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryVariableNameInvalid">
            <summary>Will be raised when an invalid variable name is used.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryVariableRedeclared">
            <summary>Will be raised when a variable gets re-assigned in a query.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryVariableNameUnknown">
            <summary>Will be raised when an unknown variable is used or the variable is undefined the context it is used.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryCollectionLockFailed">
            <summary>Will be raised when a read lock on the collection cannot be acquired.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryTooManyCollections">
            <summary>Will be raised when the number of collections or shards in a query is beyond the allowed value.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryDocumentAttributeRedeclared">
            <summary>Will be raised when a document attribute is re-assigned.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryFunctionNameUnknown">
            <summary>Will be raised when an undefined function is called.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryFunctionArgumentNumberMismatch">
            <summary>expected number of arguments: minimum: %d</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryFunctionArgumentTypeMismatch">
            <summary>Will be raised when the type of an argument used in a function call does not match the expected argument type.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryInvalidRegex">
            <summary>Will be raised when an invalid regex argument value is used in a call to a function that expects a regex.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryBindParametersInvalid">
            <summary>Will be raised when the structure of bind parameters passed has an unexpected format.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryBindParameterMissing">
            <summary>
                Will be raised when a bind parameter was declared in the query but the query is being executed with no value
                for that parameter.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryBindParameterUndeclared">
            <summary>Will be raised when a value gets specified for an undeclared bind parameter.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryBindParameterType">
            <summary>Will be raised when a bind parameter has an invalid value or type.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryInvalidLogicalValue">
            <summary>Will be raised when a non-boolean value is used in a logical operation.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryInvalidArithmeticValue">
            <summary>Will be raised when a non-numeric value is used in an arithmetic operation.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryDivisionByZero">
            <summary>Will be raised when there is an attempt to divide by zero.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryArrayExpected">
            <summary>Will be raised when a non-array operand is used for an operation that expects an array argument operand.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryFailCalled">
            <summary>Will be raised when the function FAIL() is called from inside a query.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryGeoIndexMissing">
            <summary>Will be raised when a geo restriction was specified but no suitable geo index is found to resolve it.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryFulltextIndexMissing">
            <summary>Will be raised when a fulltext query is performed on a collection without a suitable fulltext index.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryInvalidDateValue">
            <summary>Will be raised when a value cannot be converted to a date.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryMultiModify">
            <summary>Will be raised when an AQL query contains more than one data-modifying operation.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryInvalidAggregateExpression">
            <summary>Will be raised when an AQL query contains an invalid aggregate expression.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryCompileTimeOptions">
            <summary>
                Will be raised when an AQL data-modification query contains options that cannot be figured out at query
                compile time.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryExceptionOptions">
            <summary>Will be raised when an AQL data-modification query contains an invalid options specification.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryForcedIndexHintUnusable">
            <summary>Will be raised when forceIndexHint is specified</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryDisallowedDynamicCall">
            <summary>Will be raised when a dynamic function call is made to a function that cannot be called dynamically.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryAccessAfterModification">
            <summary>Will be raised when collection data are accessed after a data-modification operation.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryFunctionInvalidName">
            <summary>Will be raised when a user function with an invalid name is registered.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryFunctionInvalidCode">
            <summary>Will be raised when a user function is registered with invalid code.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryFunctionNotFound">
            <summary>Will be raised when a user function is accessed but not found.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryFunctionRuntimeError">
            <summary>Will be raised when a user function throws a runtime exception.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryBadJsonPlan">
            <summary>Will be raised when an HTTP API for a query got an invalid JSON object.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryNotFound">
            <summary>Will be raised when an Id of a query is not found by the HTTP API.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryUserAssert">
            <summary>Will be raised if and user provided expression fails to evaluate to true</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueryUserWarn">
            <summary>Will be raised if and user provided expression fails to evaluate to true</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorCursorNotFound">
            <summary>Will be raised when a cursor is requested via its id but a cursor with that id cannot be found.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorCursorBusy">
            <summary>Will be raised when a cursor is requested via its id but a concurrent request is still using the cursor.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorValidationFailed">
            <summary>Will be raised when a document does not pass schema validation.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorValidationBadParameter">
            <summary>Will be raised when the schema description is invalid.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorTransactionInternal">
            <summary>
                Will be raised when a wrong usage of transactions is detected. this is an internal error and indicates a bug
                in ArangoDB.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorTransactionNested">
            <summary>Will be raised when transactions are nested.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorTransactionUnregisteredCollection">
            <summary>
                Will be raised when a collection is used in the middle of a transaction but was not registered at transaction
                start.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorTransactionDisallowedOperation">
            <summary>Will be raised when a disallowed operation is carried out in a transaction.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorTransactionAborted">
            <summary>Will be raised when a transaction was aborted.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorTransactionNotFound">
            <summary>Will be raised when a transaction was not found.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorUserInvalidName">
            <summary>Will be raised when an invalid user name is used.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorUserDuplicate">
            <summary>Will be raised when a user name already exists.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorUserNotFound">
            <summary>Will be raised when a user name is updated that does not exist.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorUserExternal">
            <summary>Will be raised when the user is authenticated by an external server.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorServiceDownloadFailed">
            <summary>Will be raised when a service download from the central repository failed.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorServiceUploadFailed">
            <summary>Will be raised when a service upload from the client to the ArangoDB server failed.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLdapCannotInit">
            <summary>can not init a LDAP connection</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLdapCannotSetOption">
            <summary>can not set a LDAP option</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLdapCannotBind">
            <summary>can not bind to a LDAP server</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLdapCannotUnbind">
            <summary>can not unbind from a LDAP server</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLdapCannotSearch">
            <summary>can not search the LDAP server</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLdapCannotStartTls">
            <summary>can not star a TLS LDAP session</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLdapFoundNoObjects">
            <summary>LDAP didn’t found any objects with the specified search query</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLdapNotOneUserFound">
            <summary>LDAP found zero ore more than one user</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLdapUserNotIdentified">
            <summary>but its not the desired one</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLdapOperationsError">
            <summary>LDAP returned an operations error</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLdapInvalidMode">
            <summary>cant distinguish a valid mode for provided LDAP configuration</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorTaskInvalidId">
            <summary>Will be raised when a task is created with an invalid id.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorTaskDuplicateId">
            <summary>Will be raised when a task id is created with a duplicate id.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorTaskNotFound">
            <summary>Will be raised when a task with the specified id could not be found.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphInvalidGraph">
            <summary>Will be raised when an invalid name is passed to the server.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphCouldNotCreateGraph">
            <summary>Will be raised when an invalid name</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphInvalidVertex">
            <summary>Will be raised when an invalid vertex id is passed to the server.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphCouldNotCreateVertex">
            <summary>Will be raised when the vertex could not be created.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphCouldNotChangeVertex">
            <summary>Will be raised when the vertex could not be changed.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphInvalidEdge">
            <summary>Will be raised when an invalid edge id is passed to the server.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphCouldNotCreateEdge">
            <summary>Will be raised when the edge could not be created.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphCouldNotChangeEdge">
            <summary>Will be raised when the edge could not be changed.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphTooManyIterations">
            <summary>Will be raised when too many iterations are done in a graph traversal.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphInvalidFilterResult">
            <summary>Will be raised when an invalid filter result is returned in a graph traversal.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphCollectionMultiUse">
            <summary>an edge collection may only be used once in one edge definition of a graph.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphCollectionUseInMultiGraphs">
            <summary>is already used by another graph in a different edge definition.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphCreateMissingName">
            <summary>a graph name is required to create or drop a graph.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphCreateMalformedEdgeDefinition">
            <summary>the edge definition is malformed. It has to be an array of objects.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphNotFound">
            <summary>a graph with this name could not be found.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphDuplicate">
            <summary>a graph with this name already exists.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphVertexColDoesNotExist">
            <summary>the specified vertex collection does not exist or is not part of the graph.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphWrongCollectionTypeVertex">
            <summary>the collection is not a vertex collection.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphNotInOrphanCollection">
            <summary>Vertex collection not in list of orphan collections of the graph.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphCollectionUsedInEdgeDef">
            <summary>The collection is already used in an edge definition of the graph.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphEdgeCollectionNotUsed">
            <summary>The edge collection is not used in any edge definition of the graph.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphNoGraphCollection">
            <summary>collection graphs does not exist.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphInvalidExampleArrayObjectString">
            <summary>Array or Object</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphInvalidExampleArrayObject">
            <summary>Invalid example type. Has to be Array or Object.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphInvalidNumberOfArguments">
            <summary>Invalid number of arguments. Expected:</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphInvalidParameter">
            <summary>Invalid parameter type.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphInvalidId">
            <summary>Invalid id</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphCollectionUsedInOrphans">
            <summary>The collection is already used in the orphans of the graph.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphEdgeColDoesNotExist">
            <summary>the specified edge collection does not exist or is not part of the graph.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphEmpty">
            <summary>The requested graph has no edge collections.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphInternalDataCorrupt">
            <summary>The graphs collection contains invalid data.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphInternalEdgeCollectionAlreadySet">
            <summary>Tried to add an edge collection which is already defined.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphCreateMalformedOrphanList">
            <summary>the orphan list argument is malformed. It has to be an array of strings.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphEdgeDefinitionIsDocument">
            <summary>the collection used as a relation is existing</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphCollectionIsInitial">
            <summary>the collection is used as the initial collection of this graph and is not allowed to be removed manually.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorGraphNoInitialCollection">
            <summary>
                during the graph creation process no collection could be selected as the needed initial collection. Happens if
                a distributeShardsLike or replicationFactor mismatch was found.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorSessionUnknown">
            <summary>Will be raised when an invalid/unknown session id is passed to the server.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorSessionExpired">
            <summary>Will be raised when a session is expired.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorSimpleClientUnknownError">
            <summary>This error should not happen.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorSimpleClientCouldNotConnect">
            <summary>Will be raised when the client could not connect to the server.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorSimpleClientCouldNotWrite">
            <summary>Will be raised when the client could not write data.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorSimpleClientCouldNotRead">
            <summary>Will be raised when the client could not read data.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorWasErlaube">
            <summary>Will be raised if was erlaube?!</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorInternalAql">
            <summary>Internal error during AQL execution</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorWroteTooFewOutputRegisters">
            <summary>An AQL block wrote too few output registers</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorWroteTooManyOutputRegisters">
            <summary>An AQL block wrote too many output registers</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorWroteOutputRegisterTwice">
            <summary>An AQL block wrote an output register twice</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorWroteInWrongRegister">
            <summary>An AQL block wrote in a register that is not its output</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorInputRegistersNotCopied">
            <summary>An AQL block did not copy its input registers</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorMalformedManifestFile">
            <summary>The service manifest file is not well-formed JSON.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorInvalidServiceManifest">
            <summary>The service manifest contains invalid values.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorServiceFilesMissing">
            <summary>The service folder or bundle does not exist on this server.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorServiceFilesOutdated">
            <summary>The local service bundle does not match the checksum in the database.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorInvalidFoxxOptions">
            <summary>The service options contain invalid values.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorInvalidMountpoint">
            <summary>The service mountpath contains invalid characters.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorServiceNotFound">
            <summary>No service found at the given mountpath.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorServiceNeedsConfiguration">
            <summary>The service is missing configuration or dependencies.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorServiceMountpointConflict">
            <summary>A service already exists at the given mountpath.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorServiceManifestNotFound">
            <summary>The service directory does not contain a manifest file.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorServiceOptionsMalformed">
            <summary>The service options are not well-formed JSON.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorServiceSourceNotFound">
            <summary>The source path does not match a file or directory.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorServiceSourceError">
            <summary>The source path could not be resolved.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorServiceUnknownScript">
            <summary>The service does not have a script with this name.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorServiceApiDisabled">
            <summary>The API for managing Foxx services has been disabled on this server.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorModuleNotFound">
            <summary>The module path could not be resolved.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorModuleSyntaxError">
            <summary>The module could not be parsed because of a syntax error.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorModuleFailure">
            <summary>Failed to invoke the module in its context.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorNoSmartCollection">
            <summary>The requested collection needs to be smart</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorNoSmartGraphAttribute">
            <summary>The given document does not have the SmartGraph attribute set.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorCannotDropSmartCollection">
            <summary>This smart collection cannot be dropped</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorKeyMustBePrefixedWithSmartGraphAttribute">
            <summary>In a smart vertex collection key must be prefixed with the value of the SmartGraph attribute.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorIllegalSmartGraphAttribute">
            <summary>
                The given smartGraph attribute is illegal and cannot be used for sharding. All system attributes are
                forbidden.
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorSmartGraphAttributeMismatch">
            <summary>The SmartGraph attribute of the given collection does not match the SmartGraph attribute of the graph.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorInvalidSmartJoinAttribute">
            <summary>Will be raised when the smartJoinAttribute declaration is invalid.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorKeyMustBePrefixedWithSmartJoinAttribute">
            <summary>when using smartJoinAttribute for a collection</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorNoSmartJoinAttribute">
            <summary>The given document does not have the required SmartJoin attribute set or it has an invalid value.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterMustNotChangeSmartJoinAttribute">
            <summary>Will be raised if there is an attempt to update the value of the smartJoinAttribute.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorInvalidDisjointSmartEdge">
            <summary>Will be raised if there is an attempt to create an edge between separated graph components.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterRepairsFailed">
            <summary>General error during cluster repairs</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterRepairsNotEnoughHealthy">
            <summary>Will be raised when</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterRepairsReplicationFactorViolated">
            <summary>Will be raised on various inconsistencies regarding the replication factor</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterRepairsNoDbservers">
            <summary>Will be raised if a collection that is fixed has some shard without DB-Servers</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterRepairsMismatchingLeaders">
            <summary>
                Will be raised if a shard in collection and its prototype in the corresponding distributeShardsLike collection
                have mismatching leaders (when they should already have been fixed)
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterRepairsMismatchingFollowers">
            <summary>
                Will be raised if a shard in collection and its prototype in the corresponding distributeShardsLike collection
                don’t have the same followers (when they should already have been adjusted)
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterRepairsInconsistentAttributes">
            <summary>Will be raised if a collection that is fixed does (not) have distributeShardsLike when it is expected</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterRepairsMismatchingShards">
            <summary>
                Will be raised if in a collection and its distributeShardsLike prototype collection some shard and its
                prototype have an unequal number of DB-Servers
            </summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterRepairsJobFailed">
            <summary>Will be raised if a move shard job in the Agency failed during cluster repairs</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterRepairsJobDisappeared">
            <summary>Will be raised if a move shard job in the Agency cannot be found anymore before it finished</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterRepairsOperationFailed">
            <summary>Will be raised if an agency transaction failed during either sending or executing it.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorAgencyInformMustBeObject">
            <summary>The inform message in the Agency must be an object.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorAgencyInformMustContainTerm">
            <summary>The inform message in the Agency must contain a uint parameter ‘term’.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorAgencyInformMustContainId">
            <summary>The inform message in the Agency must contain a string parameter ‘id’.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorAgencyInformMustContainActive">
            <summary>The inform message in the Agency must contain an array ‘active’.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorAgencyInformMustContainPool">
            <summary>The inform message in the Agency must contain an object ‘pool’.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorAgencyInformMustContainMinPing">
            <summary>The inform message in the Agency must contain an object ‘min ping’.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorAgencyInformMustContainMaxPing">
            <summary>The inform message in the Agency must contain an object ‘max ping’.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorAgencyInformMustContainTimeoutMult">
            <summary>The inform message in the Agency must contain an object ‘timeoutMult’.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorAgencyCannotRebuildDbs">
            <summary>Will be raised if the readDB or the spearHead cannot be rebuilt from the replicated log.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorSupervisionGeneralFailure">
            <summary>General supervision failure.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorQueueFull">
            <summary>Will be returned if a queue with this name is full.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorActionOperationUnabortable">
            <summary>This maintenance action cannot be stopped once it is started</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorActionUnfinished">
            <summary>This maintenance action is still processing</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorNoSuchAction">
            <summary>No such maintenance action exists</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHotBackupInternal">
            <summary>Failed to create hot backup set</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHotRestoreInternal">
            <summary>Failed to restore to hot backup set</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorBackupTopology">
            <summary>The hot backup set cannot be restored on non matching cluster topology</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorNoSpaceLeftOnDevice">
            <summary>No space left on device</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorFailedToUploadBackup">
            <summary>Failed to upload hot backup set to remote target</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorFailedToDownloadBackup">
            <summary>Failed to download hot backup set from remote source</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorNoSuchHotBackup">
            <summary>Cannot find a hot backup set with this Id</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorRemoteRepositoryConfigBad">
            <summary>The configuration given for upload or download operation to/from remote hot backup repositories is wrong.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLocalLockFailed">
            <summary>Some of the DB-Servers cannot be reached for transaction locks.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorLocalLockRetry">
            <summary>Some of the DB-Servers cannot be reached for transaction locks.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHotBackupConflict">
            <summary>Conflict of multiple hot backup processes.</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorHotBackupDbserversAwol">
            <summary>One or more DB-Servers could not be reached for hot backup inquiry</summary>
        </member>
        <member name="F:Core.Arango.ArangoErrorCode.ErrorClusterCouldNotModifyAnalyzersInPlan">
            <summary>Plan could not be modified while creating or deleting Analyzers revision</summary>
        </member>
        <member name="T:Core.Arango.ArangoException">
            <summary>
                Generic Arango exception
            </summary>
        </member>
        <member name="M:Core.Arango.ArangoException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Core.Arango.ArangoException.#ctor(System.String,System.String,System.Net.HttpStatusCode,Core.Arango.ArangoErrorCode)">
            <summary>
            </summary>
        </member>
        <member name="M:Core.Arango.ArangoException.#ctor(System.String,System.Collections.Generic.IEnumerable{Core.Arango.Protocol.ArangoError})">
            <summary>
            </summary>
        </member>
        <member name="P:Core.Arango.ArangoException.ErrorMessage">
            <summary>
                Error message
            </summary>
        </member>
        <member name="P:Core.Arango.ArangoException.Code">
            <summary>
                HTTP status code
            </summary>
        </member>
        <member name="P:Core.Arango.ArangoException.ErrorNumber">
            <summary>
                Arango error code
            </summary>
        </member>
        <member name="P:Core.Arango.ArangoException.Errors">
            <summary>
                Error descriptions
            </summary>
        </member>
        <member name="T:Core.Arango.ArangoHandle">
            <summary>
                Arango database / transaction handle
            </summary>
        </member>
        <member name="M:Core.Arango.ArangoHandle.#ctor(System.String)">
            <summary>
                Construct handle from database name
            </summary>
            <param name="name">database name</param>
        </member>
        <member name="M:Core.Arango.ArangoHandle.#ctor(System.Guid)">
            <summary>
                Construct handle from database guid (requires realm)
            </summary>
            <param name="name">database name</param>
        </member>
        <member name="M:Core.Arango.ArangoHandle.#ctor(Core.Arango.ArangoHandle,System.String)">
            <summary>
                Constructs wrapping handle with transaction
            </summary>
        </member>
        <member name="M:Core.Arango.ArangoHandle.op_Implicit(System.String)~Core.Arango.ArangoHandle">
            <summary>
                Convert from string
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Core.Arango.ArangoHandle.op_Implicit(System.Guid)~Core.Arango.ArangoHandle">
            <summary>
                Convert from Guid
            </summary>
        </member>
        <member name="M:Core.Arango.ArangoHandle.op_Implicit(Core.Arango.ArangoHandle)~System.String">
            <summary>
                Convert to string
            </summary>
        </member>
        <member name="M:Core.Arango.ArangoHandle.ToString">
            <summary>
                ToString
            </summary>
        </member>
        <member name="T:Core.Arango.ArangoIgnoreAttribute">
            <summary>
                Json.NET Only - Mark properties to be ignored from being written to ArangoDB
            </summary>
        </member>
        <member name="T:Core.Arango.ArangoList`1">
            <summary>
                Generic List with fullcount extension
            </summary>
        </member>
        <member name="P:Core.Arango.ArangoList`1.FullCount">
            <summary>
                Actual result count of query ignoring LIMIT clause
            </summary>
        </member>
        <member name="T:Core.Arango.IArangoConfiguration">
            <summary>
                Driver configuration
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.ConnectionString">
            <summary>
                Arango connection string
            </summary>
            <example>
                Server=http://localhost:8529;Realm=prod;User=root;Password=;
            </example>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.Realm">
            <summary>
                Prefixes database names
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.Server">
            <summary>
                Arango server url
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.User">
            <summary>
                Arango user
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.Password">
            <summary>
                Arango user password
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.BatchSize">
            <summary>
                Default batch size
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.Serializer">
            <summary>
                Serializer override
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.Transport">
            <summary>
                Transport override
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.QueryProfile">
            <summary>
                Callback for each query execute with stats
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.HttpClient">
            <summary>
                Override HttpClient
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.AllowDirtyRead">
            <summary>
                Enables read queries from followers
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.Endpoints">
            <summary>
                Multiple servers
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.ResolveProperty">
            <summary>
             LINQ: resolve property name
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.ResolveCollection">
            <summary>
             LINQ: resolve type to collection name
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoConfiguration.ResolveGroupBy">
            <summary>
             LINQ: resolve group names
            </summary>
        </member>
        <member name="T:Core.Arango.IArangoContext">
            <summary>
                Arango connection to server or cluster
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoContext.Configuration">
            <summary>
                Configuration
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoContext.User">
            <summary>
                User management module
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoContext.Collection">
            <summary>
                Collection management module
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoContext.Graph">
            <summary>
                Graph management and vertex/edge manipulation module
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoContext.Transaction">
            <summary>
                Stream and JavaScript transaction module
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoContext.Document">
            <summary>
                Document module
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoContext.Query">
            <summary>
                Query (cursor) module
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoContext.Database">
            <summary>
                Database management module
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoContext.View">
            <summary>
                View (ArangoSearch) management module
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoContext.Index">
            <summary>
                Index management module
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoContext.Analyzer">
            <summary>
                Analyzer (ArangoSearch) management module
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoContext.Function">
            <summary>
                Custom functions management module
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoContext.Foxx">
            <summary>
                Foxx services module
            </summary>
        </member>
        <member name="P:Core.Arango.IArangoContext.Backup">
            <summary>
                HotBackup module (enterprise only)
            </summary>
        </member>
        <member name="M:Core.Arango.IArangoContext.GetVersionAsync(System.Threading.CancellationToken)">
            <summary>
                Get Arango server version and license
            </summary>
        </member>
        <member name="M:Core.Arango.IArangoContext.GetEndpointsAsync(System.Threading.CancellationToken)">
            <summary>
                Get Arango cluster endpoints
            </summary>
        </member>
        <member name="T:Core.Arango.Linq.Aql">
            <summary>
            Built-on AQL functions
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Append``1(``0[],``0[])">
            <summary>
                Add all elements of an array to another array. All values are added at the end of the array (right side).
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Append``1(``0[],``0[],System.Boolean)">
            <summary>
                Add all elements of an array to another array. All values are added at the end of the array (right side).
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.CountDistinct``1(``0[])">
            <summary>
                Get the number of distinct elements in an array.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.CountUnique``1(``0[])">
            <summary>
                This is an alias for COUNT_DISTINCT().
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.First``1(``0[])">
            <summary>
                Get the first element of an array. It is the same as anyArray[0].
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Flatten``1(System.Object)">
            <summary>
                Turn an array of arrays into a flat array.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Flatten``1(System.Object,System.Int32)">
            <summary>
                Turn an array of arrays into a flat array.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Interleave``1(``0[])">
            <summary>
                Accepts an arbitrary number of arrays and produces a new array with the elements interleaved.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Intersection``1(``0[])">
            <summary>
                Return the intersection of all arrays specified.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.As``1(System.Object)">
            <summary>
             SPECIAL: Force return type
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateNow">
            <summary>
                Get the current unix time as numeric timestamp.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateIso8601(System.Int64)">
            <summary>
                Return an ISO 8601 date time string from date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateTimestamp(System.DateTime)">
            <summary>
                Create a timestamp value from date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateDayOfWeek(System.DateTime)">
            <summary>
                Return the weekday number of date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateYear(System.DateTime)">
            <summary>
                Return the year of date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateMonth(System.DateTime)">
            <summary>
                Return the month of date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateDay(System.DateTime)">
            <summary>
                Return the day of date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateHour(System.DateTime)">
            <summary>
                Return the hour of date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateMinute(System.DateTime)">
            <summary>
                Return the minute of date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateSecond(System.DateTime)">
            <summary>
                Return the second of date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateMillisecond(System.DateTime)">
            <summary>
                Return the millisecond of date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DATE_DAYOFYEAR(System.DateTime)">
            <summary>
                Return the day of year of date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateIsoWeek(System.DateTime)">
            <summary>
                Return the week date of date according to ISO 8601.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateLeapYear(System.DateTime)">
            <summary>
                Return whether date is in a leap year.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateQuarter(System.DateTime)">
            <summary>
                Return which quarter date belongs to.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateDaysInMonth(System.DateTime)">
            <summary>
                Return the number of days in the month of date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateTrunc(System.DateTime,System.String)">
            <summary>
                Truncates the given date after unit and returns the modified date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateRound(System.DateTime,System.Int32,System.String)">
            <summary>
                Bin a date/time into a set of equal-distance buckets, to be used for grouping.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateFormat(System.DateTime,System.String)">
            <summary>
                Format a date according to the given format string.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateAdd(System.DateTime,System.Int32,System.String)">
            <summary>
                Add amount given in unit to date and return the calculated date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateAdd(System.DateTime,System.String)">
            <summary>
                Add amount given in unit to date and return the calculated date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateSubtract(System.DateTime,System.Int32,System.String)">
            <summary>
                Subtract amount given in unit from date and return the calculated date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateSubtract(System.DateTime,System.String)">
            <summary>
                Subtract amount given in unit from date and return the calculated date.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateDiff(System.DateTime,System.DateTime)">
            <summary>
                Calculate the difference between two dates in given time unit, optionally with decimal places.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateDiff(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
                Calculate the difference between two dates in given time unit, optionally with decimal places.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateCompare(System.DateTime,System.DateTime,System.String)">
            <summary>
                Check if two partial dates match.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateCompare(System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
                Check if two partial dates match.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateUtcToLocal(System.DateTime,System.String)">
            <summary>
                Converts date assumed in Zulu time (UTC) to local timezone.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateLocalToUtc(System.DateTime,System.String)">
            <summary>
                Converts date assumed in local timezone to Zulu time (UTC).
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateTimeZone">
            <summary>
                Returns system timezone ArangoDB is running on.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DateTimeZones">
            <summary>
                Returns all valid timezone names.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Calculate the distance between two arbitrary coordinates in meters (as birds would fly). The value is computed
                using the haversine formula, which is based on a spherical Earth model. It’s fast to compute and is accurate to
                around 0.3%, which is sufficient for most use cases such as location-aware services.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoContains(System.Object,System.Object)">
            <summary>
                Checks whether the GeoJSON object geoJsonA fully contains geoJsonB (Every point in B is also in A). The object
                geoJsonA has to be of type Polygon or MultiPolygon, other types are not supported because containment is ill
                defined. This function can be optimized by a S2 based geospatial index.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoDistance(System.Object,System.Object)">
            <summary>
                Return the distance between two GeoJSON objects, measured from the centroid of each shape.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoDistance(System.Object,System.Object,System.String)">
            <summary>
                Return the distance between two GeoJSON objects, measured from the centroid of each shape.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoArea(System.Object)">
            <summary>
                Return the area for a polygon or multi-polygon on a sphere with the average Earth radius, or an ellipsoid.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoArea(System.Object,System.String)">
            <summary>
                Return the area for a polygon or multi-polygon on a sphere with the average Earth radius, or an ellipsoid.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoEquals(System.Object,System.Object)">
            <summary>
                Checks whether two GeoJSON objects are equal or not.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoIntersects(System.Object,System.Object)">
            <summary>
                Checks whether the GeoJSON object geoJsonA intersects with geoJsonB (i.e. at least one point in B is also A or
                vice-versa). This function can be optimized by a S2 based geospatial index.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoInRange(System.Object,System.Object,System.Double,System.Double)">
            <summary>
                Checks whether the distance between two GeoJSON objects lies within a given interval. The distance is measured from
                the centroid of each shape.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoInRange(System.Object,System.Object,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
                Checks whether the distance between two GeoJSON objects lies within a given interval. The distance is measured from
                the centroid of each shape.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoLineString(System.Object[])">
            <summary>
                Construct a GeoJSON LineString. Needs at least two longitude/latitude pairs.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoMultiLineString(System.Object[])">
            <summary>
                Construct a GeoJSON MultiLineString. Needs at least two elements consisting valid LineStrings coordinate arrays.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoMultiPoint(System.Object[])">
            <summary>
                Construct a GeoJSON LineString. Needs at least two longitude/latitude pairs.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoPoint(System.Double,System.Double)">
            <summary>
                Construct a valid GeoJSON Point.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoPolygon(System.Object[])">
            <summary>
                Construct a GeoJSON Polygon. Needs at least one array representing a loop. Each loop consists of an array with at
                least three longitude/latitude pairs. The first loop must be the outermost, while any subsequent loops will be
                interpreted as holes.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.GeoMultiPolygon(System.Object[])">
            <summary>
                Construct a GeoJSON MultiPolygon. Needs at least two Polygons inside.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.NotNull``1(System.Object[])">
            <summary>
                Return the first element that is not null, and null if all alternatives are null themselves. It is also known as
                COALESCE() in SQL.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.FirstList``1(System.Object[])">
            <summary>
                Return the first alternative that is an array, and null if none of the alternatives is an array.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.FirstDocument``1(System.Object[])">
            <summary>
                Return the first alternative that is a document, and null if none of the alternatives is a document.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Collections``1">
            <summary>
                Return an array of collections.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.CurrentUser">
            <summary>
                Return the name of the current user.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.DecodeRev(System.String)">
            <summary>
                Decompose the specified revision string into its components.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Document``1(System.String,System.Object)">
            <summary>
                Return the document which is uniquely identified by its id.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Document``1(System.String)">
            <summary>
                Return the document which is uniquely identified by its id.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Document``1(System.String,System.Object[])">
            <summary>
                Return the document which is uniquely identified by its id.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Document``1(System.String[])">
            <summary>
                Return the document which is uniquely identified by its id.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Length(System.Object)">
            <summary>
                Determine the amount of documents in a collection. LENGTH() can also determine the number of elements in an array,
                the number of attribute keys of an object / document and the character length of a string.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Hash(System.Object)">
            <summary>
                Calculate a hash value for value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Apply``1(System.String,System.Object[])">
            <summary>
                Dynamically call the function funcName with the arguments specified. Arguments are given as array and are passed as
                separate parameters to the called function.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Call``1(System.String,System.Object[])">
            <summary>
                Dynamically call the function funcName with the arguments specified. Arguments are given as multiple parameters and
                passed as separate parameters to the called function.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Assert(System.Boolean,System.String)">
            <summary>
                if the expression evaluates to false ASSERT will throw an error.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Warn(System.Boolean,System.String)">
            <summary>
                If the expression evaluates to false WARN will issue a warning.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.InRange``1(``0,``0,``0,System.Boolean,System.Boolean)">
            <summary>
                Returns true if value is greater than (or equal to) low and less than (or equal to) high. The values can be of
                different types. They are compared as described in Type and value order and is thus identical to the comparison
                operators &lt;, &lt;=, &gt; and &gt;= in behavior.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.PregelResult``1(System.String,System.Boolean)">
            <summary>
                Allows to access results of a Pregel job that are only held in memory.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Abs(System.Double)">
            <summary>
                Return the absolute part of value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Acos(System.Double)">
            <summary>
                Return the arccosine of value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Asin(System.Double)">
            <summary>
                Return the arcsine of value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Atan(System.Double)">
            <summary>
                Return the arctangent of value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Atan2(System.Double,System.Double)">
            <summary>
                Return the arctangent of the quotient of y and x.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Average(System.Double[])">
            <summary>
                Return the average (arithmetic mean) of the values in array.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Avg(System.Double[])">
            <summary>
                This is an alias for AVERAGE().
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Ceil(System.Double)">
            <summary>
                Return the integer closest but not less than value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Cos(System.Double)">
            <summary>
                Return the cosine of value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Degrees(System.Double)">
            <summary>
                Return the angle converted from radians to degrees.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Exp(System.Double)">
            <summary>
                Return Euler’s constant raised to the power of value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Exp2(System.Double)">
            <summary>
                Return 2 raised to the power of value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Floor(System.Double)">
            <summary>
                Return the integer closest but not greater than value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Log(System.Double)">
            <summary>
                Return the natural logarithm of value
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Log2(System.Double)">
            <summary>
                Return the base 2 logarithm of value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Log10(System.Double)">
            <summary>
                Return the base 10 logarithm of value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Max``1(``0[])">
            <summary>
                Return the greatest element of anyArray. The array is not limited to numbers. Also see type and value order.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Median(System.Double[])">
            <summary>
                Return the median value of the values in array.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Min``1(``0[])">
            <summary>
                Return the smallest element of anyArray. The array is not limited to numbers.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Percentile(System.Double[],System.Double,System.String)">
            <summary>
                Return the nth percentile of the values in numArray.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Pi">
            <summary>
                Return pi.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Round(System.Double,System.Double)">
            <summary>
                Return the base to the exponent exp.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Product(System.Double[])">
            <summary>
                Return the product of the values in array.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Radians(System.Double[])">
            <summary>
                Return the angle converted from degrees to radians.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Rand">
            <summary>
                Return a pseudo-random number between 0 and 1.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Range(System.Double,System.Double,System.Double)">
            <summary>
                Return an array of numbers in the specified range, optionally with increments other than 1. The start and stop
                arguments are truncated to integers unless a step argument is provided.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Range(System.Int64,System.Int64)">
            <summary>
                Return an array of numbers in the specified range, optionally with increments other than 1. The start and stop
                arguments are truncated to integers unless a step argument is provided.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Round(System.Double)">
            <summary>
                Return the integer closest to value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Sin(System.Double)">
            <summary>
                Return the sine of value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Sqrt(System.Double)">
            <summary>
                Return the square root of value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.StdDevPopulation(System.Double[])">
            <summary>
                Return the population standard deviation of the values in array.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.StdDevSample(System.Double[])">
            <summary>
                Return the sample standard deviation of the values in array.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.StdDev(System.Double[])">
            <summary>
                This is an alias for STDDEV_POPULATION().
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Sum(System.Double[])">
            <summary>
                Return the sum of the values in array.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Tan(System.Double)">
            <summary>
                Return the tangent of value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.VariancePopulation(System.Double[])">
            <summary>
                Return the population variance of the values in array.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.VarianceSample(System.Double[])">
            <summary>
                Return the sample variance of the values in array.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Variance(System.Double[])">
            <summary>
                This is an alias for VARIANCE_POPULATION().
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.ToBool(System.Object)">
            <summary>
                Take an input value of any type and convert it into the appropriate boolean value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.ToNumber(System.Object)">
            <summary>
                Take an input value of any type and convert it into a numeric value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.ToString(System.Object)">
            <summary>
                Take an input value of any type and convert it into a string value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.ToArray``1(``0)">
            <summary>
                Take an input value of any type and convert it into an array value.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.ToList``1(``0)">
            <summary>
                This is an alias for TO_ARRAY().
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.IsNull(System.Object)">
            <summary>
                Check whether value is null.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.IsBool(System.Object)">
            <summary>
                Check whether value is a boolean value
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.IsNumber(System.Object)">
            <summary>
                Check whether value is a number
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.IsString(System.Object)">
            <summary>
                Check whether value is a string
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.IsArray(System.Object)">
            <summary>
                Check whether value is an array / list
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.IsList(System.Object)">
            <summary>
                This is an alias for IS_ARRAY()
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.IsObject(System.Object)">
            <summary>
                Check whether value is an object / document
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.IsDocument(System.Object)">
            <summary>
                This is an alias for IS_OBJECT()
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.IsDateString(System.Object)">
            <summary>
                Check whether value is a string that can be used in a date function. This includes partial dates such as “2015” or
                “2015-10” and strings containing properly formatted but invalid dates such as “2015-02-31”.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.IsKey(System.Object)">
            <summary>
                Check whether value is a string that can be used as a document key.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.IsIpV4(System.Object)">
            <summary>
                Check if an arbitrary string is suitable for interpretation as an IPv4 address.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Aql.Typename(System.Object)">
            <summary>
                Return the data type name of value.
            </summary>
        </member>
        <member name="T:Core.Arango.Linq.ArangoContextExtension">
            <summary>
            LINQ Extensions
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.ArangoContextExtension.Query``1(Core.Arango.IArangoContext)">
            <summary>
             LINQ in sub-expression
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.ArangoContextExtension.Query``1(Core.Arango.IArangoContext,Core.Arango.ArangoHandle)">
            <summary>
             LINQ on database
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.ArangoContextExtension.Query(Core.Arango.IArangoContext)">
            <summary>
             LINQ in sub-expression
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.ArangoContextExtension.Query(Core.Arango.IArangoContext,Core.Arango.ArangoHandle)">
            <summary>
             LINQ on database
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Query.ArangoQueryProvider.#ctor(System.Type,Core.Arango.Relinq.Parsing.Structure.IQueryParser,Core.Arango.Relinq.IQueryExecutor,Core.Arango.Linq.Interface.IArangoLinq)">
            <summary>
                Initializes a new instance of <see cref="T:Core.Arango.Linq.Query.ArangoQueryProvider" /> using a custom <see cref="T:Core.Arango.Relinq.Parsing.Structure.IQueryParser" />.
            </summary>
        </member>
        <member name="P:Core.Arango.Linq.Query.ArangoQueryProvider.QueryableType">
            <summary>
                Gets the type of queryable created by this provider. This is the generic type definition of an implementation of
                <see cref="T:System.Linq.IQueryable`1" />
                (usually a subclass of <see cref="T:Core.Arango.Relinq.QueryableBase`1" />) with exactly one type argument.
            </summary>
        </member>
        <member name="M:Core.Arango.Linq.Query.ArangoQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
                Creates a new <see cref="T:System.Linq.IQueryable" /> (of type <see cref="P:Core.Arango.Linq.Query.ArangoQueryProvider.QueryableType" /> with <typeparamref name="T" /> as its
                generic argument) that
                represents the query defined by <paramref name="expression" /> and is able to enumerate its results.
            </summary>
            <typeparam name="T">The type of the data items returned by the query.</typeparam>
            <param name="expression">
                An expression representing the query for which a <see cref="T:System.Linq.IQueryable`1" /> should be
                created.
            </param>
            <returns>An <see cref="T:System.Linq.IQueryable`1" /> that represents the query defined by <paramref name="expression" />.</returns>
        </member>
        <member name="T:Core.Arango.Modules.IArangoAnalyzerModule">
            <summary>
                ArangoSearch analyzer
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoAnalyzerModule.CreateAsync(Core.Arango.ArangoHandle,Core.Arango.Protocol.ArangoAnalyzer,System.Threading.CancellationToken)">
            <summary>
                creates a new Analyzer based on the provided definition
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoAnalyzerModule.DeleteAsync(Core.Arango.ArangoHandle,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                removes an Analyzer configuration
            </summary>
            <param name="database"></param>
            <param name="analyzer">The name of the Analyzer to remove.</param>
            <param name="force">The Analyzer configuration should be removed even if it is in-use. The default value is false.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Core.Arango.Modules.IArangoAnalyzerModule.ListAsync(Core.Arango.ArangoHandle,System.Threading.CancellationToken)">
            <summary>
                returns a listing of available Analyzer definitions
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoAnalyzerModule.GetDefinitionAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
             returns an Analyzer definition
            </summary>
        </member>
        <member name="T:Core.Arango.Modules.IArangoBackupModule">
            <summary>
                HotBackup (enterprise only)
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoBackupModule.CreateAsync(Core.Arango.Protocol.ArangoBackupRequest,System.Threading.CancellationToken)">
            <summary>
                Creates a local backup.
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoBackupModule.RestoreAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Restores from a local backup.
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoBackupModule.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Delete a specific local backup.
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoBackupModule.ListAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                List all local backups.
            </summary>
        </member>
        <member name="T:Core.Arango.Modules.IArangoCollectionModule">
            <summary>
                Collection management
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoCollectionModule.CreateAsync(Core.Arango.ArangoHandle,Core.Arango.Protocol.ArangoCollection,System.Threading.CancellationToken)">
            <summary>
                Creates a collection
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoCollectionModule.CreateAsync(Core.Arango.ArangoHandle,System.String,Core.Arango.Protocol.ArangoCollectionType,System.Threading.CancellationToken)">
            <summary>
                Creates a collection
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoCollectionModule.ListAsync(Core.Arango.ArangoHandle,System.Threading.CancellationToken)">
            <summary>
                Returns all collections
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoCollectionModule.RenameAsync(Core.Arango.ArangoHandle,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Renames a collection (not in cluster)
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoCollectionModule.TruncateAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Truncates a collection
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoCollectionModule.UpdateAsync(Core.Arango.ArangoHandle,System.String,Core.Arango.Protocol.ArangoCollectionUpdate,System.Threading.CancellationToken)">
            <summary>
                Changes a collection
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoCollectionModule.DropAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Drops a collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Arango.Modules.IArangoCollectionModule.GetAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Returns a collection
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoCollectionModule.ExistAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Checks of collection exists (calls ListAsync internally)
            </summary>
        </member>
        <member name="T:Core.Arango.Modules.IArangoDatabaseModule">
            <summary>
                Database management
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDatabaseModule.CreateAsync(Core.Arango.ArangoHandle,System.Threading.CancellationToken)">
            <summary>
                Creates a new database
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDatabaseModule.DropAsync(Core.Arango.ArangoHandle,System.Threading.CancellationToken)">
            <summary>
                Drop an existing database
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDatabaseModule.ExistAsync(Core.Arango.ArangoHandle,System.Threading.CancellationToken)">
            <summary>
                Checks if database exists (calls ListAsync internally)
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDatabaseModule.ListAsync(System.Threading.CancellationToken)">
            <summary>
                Retrieves a list of all existing databases
            </summary>
        </member>
        <member name="T:Core.Arango.Modules.IArangoDocumentModule">
            <summary>
                Document module
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.GetAsync``1(Core.Arango.ArangoHandle,System.String,System.String,System.Boolean,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Read a single document
            </summary>
            <param name="handle">database, transaction, batch handle</param>
            <param name="collection">collection</param>
            <param name="key">document key</param>
            <param name="throwOnError">when false does not throw an exception if document does not exist</param>
            <param name="ifMatch">
                The document is returned, if it has the same revision as the given Etag. Otherwise a HTTP 412 is
                returned.
            </param>
            <param name="ifNoneMatch">
                The document is returned, if it has a different revision than the given Etag. Otherwise an
                HTTP 304 is returned.
            </param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.GetManyAsync``1(Core.Arango.ArangoHandle,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Read multiple documents
            </summary>
            <param name="handle">database, transaction, batch handle</param>
            <param name="collection">collection</param>
            <param name="keys">list of keys with optional revision</param>
            <param name="ignoreRevs">
                If a search document contains a value for the _rev field, then the document is only returned
                if it has the same revision value
            </param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.CreateManyAsync``2(Core.Arango.ArangoHandle,System.String,System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Core.Arango.Protocol.ArangoOverwriteMode},System.Threading.CancellationToken)">
            <summary>
                Creates multiple documents
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.CreateManyAsync``1(Core.Arango.ArangoHandle,System.String,System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Core.Arango.Protocol.ArangoOverwriteMode},System.Threading.CancellationToken)">
            <summary>
                Creates multiple documents
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.CreateAsync``2(Core.Arango.ArangoHandle,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Core.Arango.Protocol.ArangoOverwriteMode},System.Threading.CancellationToken)">
            <summary>
                Create document
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.CreateAsync``1(Core.Arango.ArangoHandle,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Core.Arango.Protocol.ArangoOverwriteMode},System.Threading.CancellationToken)">
            <summary>
                Create document
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.DeleteManyAsync``2(Core.Arango.ArangoHandle,System.String,System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Removes multiple documents
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.DeleteAsync``1(Core.Arango.ArangoHandle,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)">
            <summary>
                Removes single document by key
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.ExportAsync``1(Core.Arango.ArangoHandle,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
               Export all documents in batches from a collection (Query.ExecuteStreamAsync)
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.ImportAsync``1(Core.Arango.ArangoHandle,System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Bulk import
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.ReplaceManyAsync``2(Core.Arango.ArangoHandle,System.String,System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Replaces multiple documents
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.ReplaceManyAsync``1(Core.Arango.ArangoHandle,System.String,System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Replaces multiple documents
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.ReplaceAsync``2(Core.Arango.ArangoHandle,System.String,``0,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Replace single document
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.ReplaceAsync``1(Core.Arango.ArangoHandle,System.String,``0,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Replace single document
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.UpdateManyAsync``1(Core.Arango.ArangoHandle,System.String,System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Updates multiple documents
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.UpdateManyAsync``2(Core.Arango.ArangoHandle,System.String,System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Updates multiple documents
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.UpdateAsync``1(Core.Arango.ArangoHandle,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Updates single document
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoDocumentModule.UpdateAsync``2(Core.Arango.ArangoHandle,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Updates single document
            </summary>
        </member>
        <member name="T:Core.Arango.Modules.IArangoFoxxModule">
            <summary>
                Foxx service management and execution
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.ListServicesAsync(Core.Arango.ArangoHandle,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                List installed services
            </summary>
            <param name="database"></param>
            <param name="excludeSystem">Whether or not system services should be excluded from the result.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.InstallServiceAsync(Core.Arango.ArangoHandle,System.String,Core.Arango.Protocol.ArangoFoxxSource,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Install new service
            </summary>
            <param name="database">Database the service should be installed at.</param>
            <param name="mount">Mount path the service should be installed at.</param>
            <param name="service"></param>
            <param name="development">Set to true to enable development mode.</param>
            <param name="setup">Set to false to not run the service’s setup script.</param>
            <param name="legacy">Set to true to install the service in 2.8 legacy compatibility mode.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.ReplaceServiceAsync(Core.Arango.ArangoHandle,System.String,Core.Arango.Protocol.ArangoFoxxSource,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Replace a service
            </summary>
            <param name="database">Database the service should be installed at.</param>
            <param name="mount">Mount path the service should be installed at.</param>
            <param name="service"></param>
            <param name="teardown">Set to true to run the old service’s teardown script.</param>
            <param name="setup">Set to false to not run the service’s setup script.</param>
            <param name="legacy">Set to true to install the service in 2.8 legacy compatibility mode.</param>
            <param name="force">Set to true to force service install even if no service is installed under given mount.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.UpgradeServiceAsync(Core.Arango.ArangoHandle,System.String,Core.Arango.Protocol.ArangoFoxxSource,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Upgrade a service
            </summary>
            <param name="database">Database the service should be installed at.</param>
            <param name="mount">Mount path the service should be installed at.</param>
            <param name="service"></param>
            <param name="teardown">Set to true to run the old service’s teardown script.</param>
            <param name="setup">Set to false to not run the service’s setup script.</param>
            <param name="legacy">Set to true to install the service in 2.8 legacy compatibility mode.</param>
            <param name="force">Set to true to force service install even if no service is installed under given mount.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.UninstallServiceAsync(Core.Arango.ArangoHandle,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Uninstall service
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.GetConfigurationAsync``1(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Get configuration options
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.UpdateConfigurationAsync(Core.Arango.ArangoHandle,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Update configuration options
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.ReplaceConfigurationAsync(Core.Arango.ArangoHandle,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Replace configuration options
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.GetDependenciesAsync``1(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Get dependency options
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.UpdateDependenciesAsync(Core.Arango.ArangoHandle,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Update dependency options
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.ReplaceDependenciesAsync(Core.Arango.ArangoHandle,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Replace dependency options
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.GetAsync``1(Core.Arango.ArangoHandle,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
                HTTP GET request to Foxx service
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.PostAsync``1(Core.Arango.ArangoHandle,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
                HTTP POST request to Foxx service
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.PutAsync``1(Core.Arango.ArangoHandle,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
                HTTP PUT request to Foxx service
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.PatchAsync``1(Core.Arango.ArangoHandle,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
                HTTP PATCH request to Foxx service
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.DeleteAsync``1(Core.Arango.ArangoHandle,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
                HTTP DELETE request to Foxx service
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.EnableDevelopmentModeAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Enable development mode
            </summary>
            <param name="database">Database the target service.</param>
            <param name="mount">Mount path of the installed service.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.DisableDevelopmentModeAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Disable development mode
            </summary>
            <param name="database">Database the target service.</param>
            <param name="mount">Mount path of the installed service.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.DownloadServiceAsync``1(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="database"></param>
            <param name="mount"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFoxxModule.RunServiceScriptAsync``1(Core.Arango.ArangoHandle,System.String,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="database"></param>
            <param name="mount"></param>
            <param name="name"></param>
            <param name="body"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Arango.Modules.IArangoFunctionModule">
            <summary>
                AQL user functions
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFunctionModule.CreateAsync(Core.Arango.ArangoHandle,Core.Arango.Protocol.ArangoFunctionDefinition,System.Threading.CancellationToken)">
            <summary>
                create a new AQL user function
            </summary>
            <returns>true if newly created</returns>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFunctionModule.RemoveAsync(Core.Arango.ArangoHandle,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                remove an existing AQL user function
            </summary>
            <param name="database"></param>
            <param name="name">the name of the AQL user function</param>
            <param name="group">
                The function name provided in name is treated as a namespace prefix, and all functions in the
                specified namespace will be deleted
            </param>
            <param name="cancellationToken"></param>
            <returns>number of deleted functions</returns>
        </member>
        <member name="M:Core.Arango.Modules.IArangoFunctionModule.ListAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                gets all registered AQL user functions
            </summary>
            <param name="database"></param>
            <param name="ns">filter user functions from namespace</param>
            <param name="cancellationToken"></param>
            <returns>list of function definitions</returns>
        </member>
        <member name="T:Core.Arango.Modules.IArangoGraphEdgeModule">
            <summary>
                Graph edge manipulation
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphEdgeModule.GetAsync``1(Core.Arango.ArangoHandle,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Fetch an edge
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphEdgeModule.CreateAsync``1(Core.Arango.ArangoHandle,System.String,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Creates an edge in an existing graph
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphEdgeModule.UpdateAsync``1(Core.Arango.ArangoHandle,System.String,System.String,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Modify an existing edge
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphEdgeModule.ReplaceAsync``1(Core.Arango.ArangoHandle,System.String,System.String,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Replace the content of an existing edge
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphEdgeModule.RemoveAsync``1(Core.Arango.ArangoHandle,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Removes an edge from graph
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphEdgeModule.CreateAsync``2(Core.Arango.ArangoHandle,System.String,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Creates an edge in an existing graph
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphEdgeModule.UpdateAsync``2(Core.Arango.ArangoHandle,System.String,System.String,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Modify an existing edge
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphEdgeModule.ReplaceAsync``2(Core.Arango.ArangoHandle,System.String,System.String,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Replace the content of an existing edge
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphEdgeModule.RemoveAsync``2(Core.Arango.ArangoHandle,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Removes an edge from graph
            </summary>
        </member>
        <member name="T:Core.Arango.Modules.IArangoGraphModule">
            <summary>
                Graph management
            </summary>
        </member>
        <member name="P:Core.Arango.Modules.IArangoGraphModule.Vertex">
            <summary>
                Vertex manipulation module.
            </summary>
        </member>
        <member name="P:Core.Arango.Modules.IArangoGraphModule.Edge">
            <summary>
                Edge manipulation module.
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphModule.CreateAsync(Core.Arango.ArangoHandle,Core.Arango.Protocol.ArangoGraph,System.Threading.CancellationToken)">
            <summary>
                Create a new graph in the graph module.
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphModule.DropAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Delete an existing graph.
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphModule.ListAsync(Core.Arango.ArangoHandle,System.Threading.CancellationToken)">
            <summary>
                Lists all graphs known to the graph module.
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphModule.GetAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Get a graph from the graph module.
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphModule.AddVertexCollectionAsync(Core.Arango.ArangoHandle,System.String,Core.Arango.Protocol.ArangoVertexCollection,System.Threading.CancellationToken)">
            <summary>
                Add an additional vertex collection to the graph.
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphModule.AddEdgeDefinitionAsync(Core.Arango.ArangoHandle,System.String,Core.Arango.Protocol.ArangoEdgeDefinition,System.Threading.CancellationToken)">
            <summary>
                Add a new edge definition to the graph
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphModule.RemoveVertexCollectionAsync(Core.Arango.ArangoHandle,System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Remove a vertex collection form the graph.
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphModule.ReplaceEdgeDefinitionAsync(Core.Arango.ArangoHandle,System.String,Core.Arango.Protocol.ArangoEdgeDefinition,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Replace an existing edge definition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphModule.RemoveEdgeDefinitionAsync(Core.Arango.ArangoHandle,System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Remove an edge definition form the graph
            </summary>
        </member>
        <member name="T:Core.Arango.Modules.IArangoGraphVertexModule">
            <summary>
                Graph vertex manipulation
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphVertexModule.GetAsync``1(Core.Arango.ArangoHandle,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                fetches an existing vertex
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphVertexModule.CreateAsync``1(Core.Arango.ArangoHandle,System.String,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Create a new vertex
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphVertexModule.CreateAsync``2(Core.Arango.ArangoHandle,System.String,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Create a new vertex
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphVertexModule.UpdateAsync``1(Core.Arango.ArangoHandle,System.String,System.String,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Update an existing vertex
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphVertexModule.UpdateAsync``2(Core.Arango.ArangoHandle,System.String,System.String,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Update an existing vertex
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphVertexModule.ReplaceAsync``1(Core.Arango.ArangoHandle,System.String,System.String,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Replaces an existing vertex
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphVertexModule.ReplaceAsync``2(Core.Arango.ArangoHandle,System.String,System.String,System.String,``0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Replaces an existing vertex
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphVertexModule.RemoveAsync(Core.Arango.ArangoHandle,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Removes a vertex from a graph
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoGraphVertexModule.RemoveAsync``1(Core.Arango.ArangoHandle,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Removes a vertex from a graph
            </summary>
        </member>
        <member name="T:Core.Arango.Modules.IArangoIndexModule">
            <summary>
                Index management
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoIndexModule.CreateAsync(Core.Arango.ArangoHandle,System.String,Core.Arango.Protocol.ArangoIndex,System.Threading.CancellationToken)">
            <summary>
                creates an index
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoIndexModule.DropAllAsync(Core.Arango.ArangoHandle,System.Threading.CancellationToken)">
            <summary>
                Drops all indices of a database
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoIndexModule.DropAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Drops an index
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoIndexModule.ListAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Returns all indexes of a collection
            </summary>
        </member>
        <member name="T:Core.Arango.Modules.IArangoQueryModule">
            <summary>
                Query documents
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoQueryModule.FindAsync``1(Core.Arango.ArangoHandle,System.String,System.FormattableString,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Finds documents
            </summary>
            <typeparam name="T">RETURN element type</typeparam>
            <param name="database"></param>
            <param name="collection"></param>
            <param name="filter">FILTER expression with "x."</param>
            <param name="projection">RETURN expression</param>
            <param name="limit"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Core.Arango.Modules.IArangoQueryModule.SingleOrDefaultAsync``1(Core.Arango.ArangoHandle,System.String,System.FormattableString,System.String,System.Threading.CancellationToken)">
            <summary>
                Finds single document (and throws exception of more than one are found)
            </summary>
            <typeparam name="T">RETURN element type</typeparam>
            <param name="database"></param>
            <param name="collection"></param>
            <param name="filter">FILTER expression with "x."</param>
            <param name="projection">RETURN expression</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Core.Arango.Modules.IArangoQueryModule.ExecuteAsync(System.Type,System.Boolean,Core.Arango.ArangoHandle,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Execute query (Linq provider)
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoQueryModule.ExecuteAsync``1(Core.Arango.ArangoHandle,System.FormattableString,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Execute query with string interpolated bind parameters
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoQueryModule.ExecuteAsync``1(Core.Arango.ArangoHandle,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
                Execute query with bind parameters in dictionary
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoQueryModule.ExecuteStreamAsync``1(Core.Arango.ArangoHandle,System.FormattableString,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Execute query with string interpolated bind parameters (IAsyncEnumerable)
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoQueryModule.ExecuteStreamAsync``1(Core.Arango.ArangoHandle,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Execute query with bind parameters in dictionary (IAsyncEnumerable)
            </summary>
        </member>
        <member name="T:Core.Arango.Modules.IArangoTransactionModule">
            <summary>
                Stream and JavaScript transactions
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoTransactionModule.BeginAsync(Core.Arango.ArangoHandle,Core.Arango.Protocol.ArangoTransaction,System.Threading.CancellationToken)">
            <summary>
                Begin a server-side transaction
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoTransactionModule.AbortAsync(Core.Arango.ArangoHandle,System.Threading.CancellationToken)">
            <summary>
                Abort a server-side transaction
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoTransactionModule.CommitAsync(Core.Arango.ArangoHandle,System.Threading.CancellationToken)">
            <summary>
                Commit a server-side transaction
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoTransactionModule.ExecuteAsync``1(Core.Arango.ArangoHandle,Core.Arango.Protocol.ArangoTransaction,System.Threading.CancellationToken)">
            <summary>
                execute a server-side (script) transaction
            </summary>
        </member>
        <member name="T:Core.Arango.Modules.IArangoUserModule">
            <summary>
                User management
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoUserModule.CreateAsync(Core.Arango.Protocol.ArangoUser,System.Threading.CancellationToken)">
            <summary>
                Create a new user.
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoUserModule.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Delete a user permanently.
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoUserModule.DeleteDatabaseAccessAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Clear the database access level, revert back to the default access level
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoUserModule.ListAsync(System.Threading.CancellationToken)">
            <summary>
                Lists all users
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoUserModule.PatchAsync(Core.Arango.Protocol.ArangoUser,System.Threading.CancellationToken)">
            <summary>
                Modify attributes of an existing user
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoUserModule.SetDatabaseAccessAsync(Core.Arango.ArangoHandle,System.String,Core.Arango.Protocol.ArangoAccess,System.Threading.CancellationToken)">
            <summary>
                Set the database access level.
            </summary>
        </member>
        <member name="T:Core.Arango.Modules.IArangoViewModule">
            <summary>
                Arango View (ArangoSearch) management
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoViewModule.CreateAsync(Core.Arango.ArangoHandle,Core.Arango.Protocol.ArangoView,System.Threading.CancellationToken)">
            <summary>
                creates an ArangoSearch View
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoViewModule.DropAllAsync(Core.Arango.ArangoHandle,System.Threading.CancellationToken)">
            <summary>
                Drops all Views in database
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoViewModule.DropAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Drops a View
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoViewModule.ListAsync(Core.Arango.ArangoHandle,System.Threading.CancellationToken)">
            <summary>
                Returns all Views
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.IArangoViewModule.GetPropertiesAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
             Get properties of view
            </summary>
            <param name="database"></param>
            <param name="view"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Arango.Modules.Internal.ArangoIndexModule.DropAllAsync(Core.Arango.ArangoHandle,System.Threading.CancellationToken)">
            <summary>
                Drops all user created indices over all collections in database
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.Internal.ArangoIndexModule.ListAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Ignores primary and edge indices
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.Internal.ArangoUserModule.CreateAsync(Core.Arango.Protocol.ArangoUser,System.Threading.CancellationToken)">
            <summary>
                Create a new user
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.Internal.ArangoUserModule.ListAsync(System.Threading.CancellationToken)">
            <summary>
                List available users
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.Internal.ArangoUserModule.SetDatabaseAccessAsync(Core.Arango.ArangoHandle,System.String,Core.Arango.Protocol.ArangoAccess,System.Threading.CancellationToken)">
            <summary>
                Set the database access level
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.Internal.ArangoUserModule.DeleteDatabaseAccessAsync(Core.Arango.ArangoHandle,System.String,System.Threading.CancellationToken)">
            <summary>
                Clear the database access level, revert back to the default access level
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.Internal.ArangoUserModule.PatchAsync(Core.Arango.Protocol.ArangoUser,System.Threading.CancellationToken)">
            <summary>
                Modify attributes of an existing user
            </summary>
        </member>
        <member name="M:Core.Arango.Modules.Internal.ArangoUserModule.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Delete a user permanently.
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoAccess">
            <summary>
                User access modes for database and collection
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAccess.None">
            <summary>
                No access
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAccess.ReadOnly">
            <summary>
                Read access only
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAccess.ReadWrite">
            <summary>
                Read and write access
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoAnalyzer">
            <summary>
                ArangoSearch Analyzer
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzer.Name">
            <summary>
                The Analyzer name.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzer.Type">
            <summary>
                The Analyzer type.
            </summary>
            <example>
            </example>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzer.Properties">
            <summary>
                The properties used to configure the specified Analyzer type.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzer.Features">
            <summary>
                The set of features to set on the Analyzer generated fields. The default value is an empty array.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzer.ExtensionData">
            <summary>
             Overflow properties
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoAnalyzerCase">
            <summary>
                AnalyzerType
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerCase.Lower">
            <summary>
                To convert to all lower-case characters (default)
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerCase.Upper">
            <summary>
                To convert to all upper-case characters
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerCase.None">
            <summary>
                To not change character case
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoAnalyzerGeoJsonType">
            <summary>
                ArangoGeoJsonType
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerGeoJsonType.Shape">
            <summary>
                index all GeoJSON geometry types (Point, Polygon etc.)
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerGeoJsonType.Centroid">
            <summary>
                compute and only index the centroid of the input geometry
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerGeoJsonType.Point">
            <summary>
                only index GeoJSON objects of type Point, ignore all other geometry types
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoAnalyzerProperties">
            <summary>
                ArangoSearch Analyzer Properties
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.Locale">
            <summary>
                (Stem | Norm | Text) A locale in the format language[_COUNTRY][.encoding][@variant]
            </summary>
            <example>
                "de.utf-8" or "en_US.utf-8"
            </example>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.Case">
            <summary>
                (Text | Norm) Character conversion
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.Stopwords">
            <summary>
                (Text | Stopwords)
                An array of strings with words to omit from result.
                Default: load words from stopwordsPath.
                To disable stop-word filtering provide an empty array [].
                If both stopwords and stopwordsPath are provided then both word sources are combined.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.StopwordsPath">
            <summary>
                (Text)
                Path with a language sub-directory containing files with words to omit.
                Each word has to be on a separate line.
                Everything after the first whitespace character on a line will be ignored and can be used for comments.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.Accent">
            <summary>
                (Text | Norm) To preserve accented characters or to convert accented characters to their base characters (default)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.Stemming">
            <summary>
                (Text) To apply stemming on returned words (default) or to leave the tokenized words as-is.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.EdgeNgram">
            <summary>
                (Text) If present, then edge n-grams are generated for each token (word)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.Delimiter">
            <summary>
                (Delimiter) The delimiting character(s)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.QueryString">
            <summary>
                (Aql) AQL query to be executed
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.CollapsePositions">
            <summary>
                (Aql)  true: set the position to 0 for all members of the query result array.  false (default): set the position
                corresponding to the index of the result array member
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.KeepNull">
            <summary>
                (Aql)  true (default): treat null like an empty string | false: discard nulls from View index. Can be used for
                index filtering (i.e. make your query return null for unwanted data). Note that empty results are always discarded.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.BatchSize">
            <summary>
                (Aql) number between 1 and 1000 (default = 1) that determines the batch size for reading data from the query. In
                general, a single token is expected to be returned. However, if the query is expected to return many results, then
                increasing batchSize trades memory for performance.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.MemoryLimit">
            <summary>
                (Aql) memory limit for query execution in bytes. (default is 1048576 = 1Mb) Maximum is 33554432U (32Mb)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.Pipeline">
            <summary>
                (Pipeline) an array of Analyzer definition-like objects with type and properties attributes
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.Latitude">
            <summary>
                (GeoPoint) array of strings that describes the attribute path of the latitude value relative to the field for which
                the Analyzer is defined in the View
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.Longitude">
            <summary>
                (GeoPoint) array of strings that describes the attribute path of the longitude value relative to the field for
                which the Analyzer is defined in the View
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.Type">
            <summary>
                (GeoJson)  (default): index all GeoJSON geometry types (Point, Polygon etc.)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoAnalyzerProperties.ExtensionData">
            <summary>
             Overflow properties
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoAnalyzerType">
            <summary>
                AnalyzerType
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerType.Identity">
            <summary>
                Treat value as atom (no transformation)
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerType.Delimiter">
            <summary>
                Split into tokens at user-defined character
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerType.Stem">
            <summary>
                Apply stemming to the value as a whole
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerType.Norm">
            <summary>
                Apply normalization to the value as a whole
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerType.Ngram">
            <summary>
                Create n-grams from value with user-defined lengths
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerType.Text">
            <summary>
                Tokenize into words, optionally with stemming, normalization, stop-word filtering and edge n-gram generation
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerType.Stopwords">
            <summary>
                An Analyzer capable of removing specified tokens from the input.
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerType.Pipeline">
            <summary>
                An Analyzer capable of chaining effects of multiple Analyzers into one.
                The pipeline is a list of Analyzers, where the output of an Analyzer is passed to the next for further processing.
                The final token value is determined by last Analyzer in the pipeline.
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerType.Aql">
            <summary>
                An Analyzer capable of running a restricted AQL query to perform data manipulation / filtering.
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerType.GeoJson">
            <summary>
                An Analyzer capable of breaking up a GeoJSON object into a set of indexable tokens for further usage with
                ArangoSearch Geo functions.
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoAnalyzerType.GeoPoint">
            <summary>
                An Analyzer capable of breaking up JSON object describing a coordinate into a set of indexable tokens for further
                usage with ArangoSearch Geo functions.
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoBackup">
            <summary>
                Arango HotBackup
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoBackup.Id">
            <summary>
                Unique identifier
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoBackup.Version">
            <summary>
                ArangoDB version
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoBackup.Keys">
            <summary>
                Keys
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoBackup.SizeInBytes">
            <summary>
                SizeInBytes
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoBackup.NrFiles">
            <summary>
                Number of files
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoBackup.NrDbServers">
            <summary>
                Number of database servers
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoBackup.Available">
            <summary>
                is available?
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoBackup.NrPiecesPresent">
            <summary>
                Number of pieces present
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoBackup.PotentiallyInconsistent">
            <summary>
                Is potentially inconsistent?
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoBackupRequest">
            <summary>
                Arango HotBackup request
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoBackupRequest.Label">
            <summary>
                The label for this backup.
                The label is used together with a timestamp string create a unique backup identifier, {timestamp}_{label}.
                If no label is specified, the empty string is assumed and a default UUID is created for this part of the ID.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoBackupRequest.Timeout">
            <summary>
                The time in seconds that the operation tries to get a consistent snapshot. The default is 120 seconds.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoBackupRequest.AllowInconsistent">
            <summary>
                If this flag is set to true and no global transaction lock can be acquired within the given timeout, a possibly
                inconsistent backup is taken.
                The default for this flag is false and in this case a timeout results in an HTTP 408 error.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoBackupRequest.Force">
            <summary>
                If this flag is set to true and no global transaction lock can be acquired within the given timeout, all running
                transactions are forcefully aborted to ensure that a consistent backup can be created.
                This does not include JavaScript transactions.
                It waits for the transactions to be aborted at most timeout seconds.
                Thus using force the request timeout is doubled. To abort transactions is almost certainly not what you want for
                your application.
                In the presence of intermediate commits it can even destroy the atomicity of your transactions.
                Use at your own risk, and only if you need a consistent backup at all costs.
                The default and recommended value is false.
                If both allowInconsistent and force are set to true, then the latter takes precedence and transactions are aborted.
                This is only available in the cluster.
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoCollection">
            <summary>
                Arango collection
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoCollection.Name">
            <summary>
                The name of the collection.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoCollection.Type">
            <summary>
                The type of the collection to create.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoCollection.IsSystem">
            <summary>
                If true, create a system collection.
                In this case collection-name should start with an underscore.
                End users should normally create non-system collections only. API implementors may be required to create system
                collections in very special occasions, but normally a regular collection will do. (The default is false)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoCollection.NumberOfShards">
            <summary>
                (The default is 1): in a cluster, this value determines the number of shards to create for the collection.
                In a single server setup, this option is meaningless.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoCollection.KeyOptions">
            <summary>
                Additional options for key generation.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoCollection.ShardKeys">
            <summary>
                (The default is [ “_key” ]): in a cluster, this attribute determines which document attributes are used to
                determine the target shard for documents.
                Documents are sent to shards based on the values of their shard key attributes.
                The values of all shard key attributes in a document are hashed, and the hash value is used to determine the target
                shard. Note: Values of shard key attributes cannot be changed once set.
                This option is meaningless in a single server setup.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoCollection.ReplicationFactor">
            <summary>
                (The default is 1): in a cluster, this attribute determines how many copies of each shard are kept on different
                DB-Servers.
                The value 1 means that only one copy (no synchronous replication) is kept.
                A value of k means that k-1 replicas are kept.
                It can also be the string "satellite" for a SatelliteCollection, where the replication factor is matched to the
                number of DB-Servers (Enterprise Edition only).
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoCollection.ShardingStrategy">
            <summary>
                This attribute specifies the name of the sharding strategy to use for the collection.
                Since ArangoDB 3.4 there are different sharding strategies to select from when creating a new collection. The
                selected shardingStrategy value will remain fixed for the collection and cannot be changed afterwards.
                This is important to make the collection keep its sharding settings and always find documents already distributed
                to shards using the same initial sharding algorithm.
                community-compat, enterprise-compat, enterprise-smart-edge-compat, hash, enterprise-hash-smart-edge
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoCollection.DistributeShardsLike">
            <summary>
                (The default is ”“): in an Enterprise Edition cluster, this attribute binds the specifics of sharding for the newly
                created collection to follow that of a specified existing collection.
                Note: Using this parameter has consequences for the prototype collection.
                It can no longer be dropped, before the sharding-imitating collections are dropped.
                Equally, backups and restores of imitating collections alone will generate warnings (which can be overridden) about
                missing sharding prototype.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoCollection.WriteConcern">
            <summary>
                Write concern for this collection (default: 1).
                It determines how many copies of each shard are required to be in sync on the different DB-Servers.
                If there are less then these many copies in the cluster a shard will refuse to write.
                Writes to shards with enough up-to-date copies will succeed at the same time however.
                The value of writeConcern can not be larger than replicationFactor. (cluster only)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoCollection.SmartJoinAttribute">
            <summary>
                In an Enterprise Edition cluster, this attribute determines an attribute of the collection that must contain the
                shard key value of the referred-to SmartJoin collection.
                Additionally, the shard key for a document in this collection must contain the value of this attribute, followed by
                a colon, followed by the actual primary key of the document.
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoCollectionType">
            <summary>
                Arango collection type
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoCollectionType.Document">
            <summary>
                document collection
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoCollectionType.Edge">
            <summary>
                edge collection
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoCollectionUpdate">
            <summary>
                Arango collections updatable properties
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoCollectionUpdate.WaitForSync">
            <summary>
                If true then the data is synchronized to disk before returning from a document create, update, replace or removal
                operation. (default: false)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoCollectionUpdate.Schema">
            <summary>
                Optional object that specifies the collection level schema for documents.
                When updating collection this needs to contain existing schema or schema will be removed
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoEdgeDefinition">
            <summary>
                Edge definition
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoEdgeDefinition.Collection">
            <summary>
                The name of the edge collection to be used.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoEdgeDefinition.From">
            <summary>
                One or many vertex collections that can contain source vertices.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoEdgeDefinition.To">
            <summary>
                One or many vertex collections that can contain target vertices.
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoEdgeNgram">
            <summary>
                N-grams for substring matching
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoEdgeNgram.Min">
            <summary>
                (Ngram) unsigned integer for the minimum n-gram length
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoEdgeNgram.Max">
            <summary>
                (Ngram) unsigned integer for the maximum n-gram length
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoEdgeNgram.PreserveOriginal">
            <summary>
                (Ngram) to include the original value as well (true) or to produce the n-grams based on min and max only (false)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoEdgeNgram.StartMarker">
            <summary>
                (Ngram) This value will be prepended to n-grams which include the beginning of the input.
                Can be used for matching prefixes.
                Choose a character or sequence as marker which does not occur in the input.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoEdgeNgram.EndMarker">
            <summary>
                (Ngram)  this value will be appended to n-grams which include the end of the input.
                Can be used for matching suffixes.
                Choose a character or sequence as marker which does not occur in the input.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoEdgeNgram.StreamType">
            <summary>
                (Ngram) type of the input stream
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoEdgeResponse`1">
            <summary>
                Arango Graph Edge Response
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoEdgeResponse`1.Edge">
            <summary>
                Edge
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoEdgeResponse`1.New">
            <summary>
                New version
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoEdgeResponse`1.Old">
            <summary>
                Old version
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoEdgeResponse`1.Removed">
            <summary>
                When Removed
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoError">
            <summary>
                Arango Error Description
            </summary>
        </member>
        <member name="M:Core.Arango.Protocol.ArangoError.#ctor(System.String,Core.Arango.ArangoErrorCode)">
            Arango Error Description
            <param name="errorMessage">message</param>
            <param name="errorNumber">code</param>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoError.ErrorMessage">
            <summary>
                Message
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoError.ErrorNumber">
            <summary>
                Code
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoFoxxService">
            <summary>
                Foxx Service Description
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoFoxxService.Mount">
            <summary>
                the mount path of the service
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoFoxxService.Development">
            <summary>
                true if the service is running in development mode
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoFoxxService.Legacy">
            <summary>
                true if the service is running in 2.8 legacy compatibility mode
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoFoxxService.Name">
            <summary>
                a string identifying the service type
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoFoxxService.Version">
            <summary>
                a semver-compatible version string
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoFoxxSource">
            <summary>
                Foxx service installation source
            </summary>
        </member>
        <member name="M:Core.Arango.Protocol.ArangoFoxxSource.FromZip(System.IO.Stream)">
            <summary>
                Foxx service from zip archive
            </summary>
        </member>
        <member name="M:Core.Arango.Protocol.ArangoFoxxSource.FromJavaScript(System.String)">
            <summary>
                Foxx service from single javascript file
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoFunctionDefinition">
            <summary>
                Arango User Functions
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoFunctionDefinition.Name">
            <summary>
                The fully qualified name of the user functions.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoFunctionDefinition.Code">
            <summary>
                A string representation of the function body.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoFunctionDefinition.IsDeterministic">
            <summary>
                An optional boolean value to indicate whether the function results are fully deterministic (function return value
                solely depends on the input value and return value is the same for repeated calls with same input).
                The isDeterministic attribute is currently not used but may be used later for optimizations.
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoGraph">
            <summary>
                Arango Graph Description
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoGraph.Name">
            <summary>
                Name of the graph.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoGraph.EdgeDefinitions">
            <summary>
                An array of definitions for the relations of the graph. Each has the following type:
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoGraph.OrphanCollections">
            <summary>
                An array of additional vertex collections. Documents within these collections do not have edges within this graph.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoGraph.IsSmart">
            <summary>
                Define if the created graph should be smart (Enterprise Edition only).
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoGraph.IsDisjoint">
            <summary>
                Whether to create a Disjoint SmartGraph instead of a regular SmartGraph (Enterprise Edition only).
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoGraph.Options">
            <summary>
                JSON object to define options for creating collections within this graph. It can contain the following attributes:
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoGraph.ExtensionData">
            <summary>
             Overflow properties
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoGraphOptions">
            <summary>
                Arango Graph Options
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoGraphOptions.SmartGraphAttribute">
            <summary>
                Only has effect in Enterprise Edition and it is required if isSmart is true. The attribute name that is used to
                smartly shard the vertices of a graph. Every vertex in this SmartGraph has to have this attribute. Cannot be
                modified later.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoGraphOptions.NumberOfShards">
            <summary>
                The number of shards that is used for every collection within this graph. Cannot be modified later.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoGraphOptions.ReplicationFactor">
            <summary>
                The replication factor used when initially creating collections for this graph. Can be set to "satellite" to create
                a SatelliteGraph, which will ignore numberOfShards, minReplicationFactor and writeConcern (Enterprise Edition
                only).
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoGraphOptions.WriteConcern">
            <summary>
                Write concern for new collections in the graph. It determines how many copies of each shard are required to be in
                sync on the different DB-Servers. If there are less then these many copies in the cluster a shard will refuse to
                write. Writes to shards with enough up-to-date copies will succeed at the same time however. The value of
                writeConcern can not be larger than replicationFactor. (cluster only)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoGraphOptions.ExtensionData">
            <summary>
             Overflow properties
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoIndex">
            <summary>
                Arango index
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoIndex.Id">
            <summary>
                The identifier of the index
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoIndex.Name">
            <summary>
                Name of the index or null for auto generation
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoIndex.Type">
            <summary>
                Type of the index
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoIndex.Fields">
            <summary>
                (Hash | Skiplist) An array of attribute paths.
                (TTL | Fulltext) An array with exactly one attribute path.
                (Geo) An array with one or two attribute paths.
                If it is an array with one attribute path location, then a geo-spatial index on all documents is created using
                location as path to the coordinates.
                The value of the attribute must be an array with at least two double values.
                The array must contain the latitude (first value) and the longitude (second value).
                All documents, which do not have the attribute path or with value that are not suitable, are ignored.
                If it is an array with two attribute paths latitude and longitude, then a geo-spatial index on all documents is
                created using latitude and longitude as paths the latitude and the longitude.
                The value of the attribute latitude and of the attribute longitude must a double.
                All documents, which do not have the attribute paths or which values are not suitable, are ignored.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoIndex.MinLength">
            <summary>
                (Fulltext)  Minimum character length of words to index.
                Will default to a server-defined value if unspecified.
                It is thus recommended to set this value explicitly when creating the index.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoIndex.GeoJson">
            <summary>
                (Geo) If a geo-spatial index on a location is constructed and geoJson is true, then the order within the array is
                longitude followed by latitude.
                This corresponds to the format described in http://geojson.org/geojson-spec.html#positions
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoIndex.Sparse">
            <summary>
                (Hash | SkipList)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoIndex.Unique">
            <summary>
                (Hash | SkipList) Note: Unique indexes on non-shard keys are not supported in a cluster.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoIndex.InBackground">
            <summary>
                Indexes can also be created in “background”, not using an exclusive lock during the entire index creation.
                Background index creation might be slower than the “foreground” index creation and require more RAM.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoIndex.Deduplicate">
            <summary>
                (Hash | SkipList) Controls whether inserting duplicate index values from the same document into a unique array
                index will lead to a unique constraint error or not.
                The default value is true, so only a single instance of each non-unique index value will be inserted into the index
                per document.
                Trying to insert a value into the index that already exists in the index will always fail, regardless of the value
                of this attribute.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoIndex.Estimate">
            <summary>
                (Hash | SkipList) Doc?
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoIndex.ExpireAfter">
            <summary>
                (TTL) The time (in seconds) after a document’s creation after which the documents count as “expired”.
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoIndexType">
            <summary>
                Arango Index Type
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoIndexType.Hash">
            <summary>
                Hash - for exact matches
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoIndexType.Skiplist">
            <summary>
                Skiplist index - for number/date/string range matches
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoIndexType.Ttl">
            <summary>
                Time to Live index
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoIndexType.Geo">
            <summary>
                Geo-spatial index
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoIndexType.Fulltext">
            <summary>
                Fulltext index - Better use ArangoSearch Views
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoIndexType.Edge">
            <summary>
                (System) Edge Index
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoIndexType.Primary">
            <summary>
                (System) Primary Index
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoKeyOptions">
            <summary>
                Arango collection key generating options
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoKeyOptions.Type">
            <summary>
                Specifies the type of the key generator.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoKeyOptions.AllowUserKeys">
            <summary>
                If set to true, then it is allowed to supply own key values in the _key attribute of a document.
                If set to false, then the key generator will solely be responsible for generating keys and supplying own key values
                in the _key attribute of documents is considered an error.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoKeyOptions.Increment">
            <summary>
                increment value for autoincrement key generator. Not used for other key generator types.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoKeyOptions.Offset">
            <summary>
                Initial offset value for autoincrement key generator. Not used for other key generator types.
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoKeyType">
            <summary>
                Arango key generation type
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoKeyType.Traditional">
            <summary>
                The traditional key generator generates numerical keys in ascending order.
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoKeyType.Autoincrement">
            <summary>
                The autoincrement key generator generates numerical keys in ascending order, the initial offset and the spacing can
                be configured
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoKeyType.Uuid">
            <summary>
                The uuid key generator generates universally unique 128 bit keys, which are stored in hexadecimal human-readable
                format.
                This key generator can be used in a single-server or cluster to generate “seemingly random” keys.
                The keys produced by this key generator are not lexicographically sorted.
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoKeyType.Padded">
            <summary>
                The padded key generator generates keys of a fixed length (16 bytes) in ascending lexicographical sort order.
                This is ideal for usage with the RocksDB engine, which will slightly benefit keys that are inserted in
                lexicographically ascending order.
                The key generator can be used in a single-server or cluster
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoLinkProperty">
            <summary>
                Arango View Link Property
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoLinkProperty.Analyzers">
            <summary>
                A list of Analyzers, by name as defined via the Analyzers, that should be applied to values of processed document
                attributes.
                default: [ "identity" ]
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoLinkProperty.IncludeAllFields">
            <summary>
                If set to true, then process all document attributes. Otherwise, only consider attributes mentioned in fields.
                Attributes not explicitly specified in fields will be processed with default link properties, i.e. {}.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoLinkProperty.TrackListPositions">
            <summary>
                If set to true, then for array values track the value position in arrays.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoLinkProperty.StoreValues">
            <summary>
                none: Do not store values with the view.
                id: Store information about value presence to allow use of the EXISTS() function
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoLinkProperty.Fields">
            <summary>
                An object of fields that should be processed at each level of the document.
                Each key specifies the document attribute to be processed.
                Note that the value of includeAllFields is also consulted when selecting fields to be processed.
                It is a recursive data structure.
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoNgramStreamType">
            <summary>
                N-gram stream type
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoNgramStreamType.Binary">
            <summary>
                One byte is considered as one character (default)
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoNgramStreamType.Utf8">
            <summary>
                one Unicode codepoint is treated as one character
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoOverwriteMode">
            <summary>
                Requires ArangoDB 3.7
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoOverwriteMode.Ignore">
            <summary>
                If a document with the specified _key value exists already, nothing will be done and no write operation will be
                carried out.
                The insert operation will return success in this case. This mode does not support returning the old document
                version using RETURN OLD.
                When using RETURN NEW, null will be returned in case the document already existed.
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoOverwriteMode.Replace">
            <summary>
                If a document with the specified _key value exists already, it will be overwritten with the specified document
                value.
                This mode will also be used when no overwrite mode is specified but the overwrite flag is set to true.
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoOverwriteMode.Update">
            <summary>
                If a document with the specified _key value exists already, it will be patched (partially updated) with the
                specified document value.
                The overwrite mode can be further controlled via the keepNull and mergeObjects parameters.
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoOverwriteMode.Conflict">
            <summary>
                If a document with the specified _key value exists already, return a unique constraint violation error so that the
                insert operation fails.
                This is also the default behavior in case the overwrite mode is not set, and the overwrite flag is false or not set
                either.
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoQueryStatistic">
            <summary>
                Arango Query Statistic
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoQueryStatistic.ScannedFull">
            <summary>
                Documents processed with a full collection scan
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoQueryStatistic.ScannedIndex">
            <summary>
                Documents processed with a index scan
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoQueryStatistic.WritesExecuted">
            <summary>
                Documents which have been written
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoQueryStatistic.PeakMemoryUsage">
            <summary>
                Memory usage in bytes
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoQueryStatistic.ExecutionTime">
            <summary>
                Execution time in ms
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoQueryStatistic.FullCount">
            <summary>
                Result size ignoring LIMIT clause
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoQueryStatistic.WritesIgnored">
            <summary>
                Document writes ignored
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoQueryStatistic.Filtered">
            <summary>
                Filtered documents
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoResponseBase">
            <summary>
                Base response model
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoResponseBase.Code">
            <summary>
                HTTP Status Code
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoResponseBase.Error">
            <summary>
                Has Error?
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoResponseBase.ErrorMessage">
            <summary>
                Error Message
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoResponseBase.ErrorNum">
            <summary>
                Error Code
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoSchema">
            <summary>
                Schema Validation
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoSchema.Rule">
            <summary>
                The rule attribute must contain the JSON Schema description.
            </summary>
            <example>
                {
                properties: { nums: { type: "array", items: { type: "number", maximum: 6 } } },
                additionalProperties: { type: "string" },
                required: ["nums"]
                }
            </example>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoSchema.Level">
            <summary>
                controls when the validation will be applied.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoSchema.Message">
            <summary>
                sets the message that will be used when validation fails.
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoSchemaLevel">
            <summary>
                Arango schema validation level
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoSchemaLevel.None">
            <summary>
                The rule is inactive and validation thus turned off.
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoSchemaLevel.New">
            <summary>
                Only newly inserted documents are validated.
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoSchemaLevel.Moderate">
            <summary>
                New and modified documents must pass validation, except for modified documents where the OLD value did not pass
                validation already.
                This level is useful if you have documents which do not match your target structure, but you want to stop the
                insertion of more invalid documents and prohibit that valid documents are changed to invalid documents.
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoSchemaLevel.Strict">
            <summary>
                All new and modified document must strictly pass validation. No exceptions are made (default).
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoSort">
            <summary>
                ArangoView Sort description
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoSort.Field">
            <summary>
                Attribute to sort by
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoSort.Direction">
            <summary>
                Sort direction
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoSort.ExtensionData">
            <summary>
             Overflow properties
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoTransaction">
            <summary>
                Arango JavaScript transaction
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoTransaction.AllowImplicit">
            <summary>
                Allow reading from undeclared collections.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoTransaction.Collections">
            <summary>
                Collections must be a JSON object that can have one or all sub-attributes read, write or exclusive, each being an
                array of collection names or a single collection name as string.
                Collections that will be written to in the transaction must be declared with the write or exclusive attribute or it
                will fail, whereas non-declared collections from which is solely read will be added lazily.
                The optional sub-attribute allowImplicit can be set to false to let transactions fail in case of undeclared
                collections for reading.
                Collections for reading should be fully declared if possible, to avoid deadlocks. See locking and isolation for
                more information.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoTransaction.Action">
            <summary>
                The actual transaction operations to be executed, in the form of stringified JavaScript code.
                The code will be executed on server side, with late binding.
                It is thus critical that the code specified in action properly sets up all the variables it needs.
                If the code specified in action ends with a return statement, the value returned will also be returned by the REST
                API in the result attribute if the transaction committed successfully.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoTransaction.WaitForSync">
            <summary>
                An optional boolean flag that, if set, will force the transaction to write all data to disk before returning.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoTransaction.LockTimeout">
            <summary>
                An optional numeric value that can be used to set a timeout for waiting on collection locks.
                If not specified, a default value will be used.
                Setting lockTimeout to 0 will make ArangoDB not time out waiting for a lock.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoTransaction.Params">
            <summary>
                Optional arguments passed to action.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoTransaction.MaxTransactionSize">
            <summary>
                Transaction size limit in bytes. Honored by the RocksDB storage engine only.
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoTransactionScope">
            <summary>
                Arango Transaction Scope
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoTransactionScope.Read">
            <summary>
                Collections to read from
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoTransactionScope.Write">
            <summary>
                Collections to write to
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoUpdateResult`1">
            <summary>
                Arango document update result
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoUpdateResult`1.Id">
            <summary>
                Id
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoUpdateResult`1.Key">
            <summary>
                Key
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoUpdateResult`1.Revision">
            <summary>
                Revision
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoUpdateResult`1.OldRevision">
            <summary>
                Old Revision
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoUpdateResult`1.Old">
            <summary>
                Old document
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoUpdateResult`1.New">
            <summary>
                New document
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoUser">
            <summary>
                Arango User
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoUser.Name">
            <summary>
                The name of the user as a string. This is mandatory.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoUser.Password">
            <summary>
                The user password as a string. If no password is specified, the empty string will be used.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoUser.Active">
            <summary>
                An optional flag that specifies whether the user is active. If not specified, this will default to true
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoUser.Extra">
            <summary>
                An optional JSON object with arbitrary extra data about the user.
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoVersion">
            <summary>
                Arango Server Version and License Information
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoVersion.Version">
            <summary>
                Raw version string
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoVersion.License">
            <summary>
                license string
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoVersion.SemanticVersion">
            <summary>
                Parsed (comparable) version
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoVertexCollection">
            <summary>
                Arango Vertex Collection
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoVertexCollection.Collection">
            <summary>
                Collection name
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoVertexResponse`1">
            <summary>
                Arango Graph Vertex Response
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoVertexResponse`1.Vertex">
            <summary>
                Vertex
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoVertexResponse`1.New">
            <summary>
                New version
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoVertexResponse`1.Old">
            <summary>
                Old version
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoVertexResponse`1.Removed">
            <summary>
                When Removed
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoView">
            <summary>
                ArangoSearch View
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoView.Name">
            <summary>
                The name of the View.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoView.Type">
            <summary>
                The type of the View. Must be equal to “arangosearch”. This option is immutable.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoView.Links">
            <summary>
                Expects an object with the attribute keys being names of to be linked collections, and the link properties as
                attribute values.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoView.PrimarySort">
            <summary>
                A primary sort order can be defined to enable an AQL optimization.
                If a query iterates over all documents of a View, wants to sort them by attribute values and the (left-most) fields
                to sort by as well as their sorting direction match with the primarySort definition, then the SORT operation is
                optimized away.
                This option is immutable.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoView.PrimarySortCompression">
            <summary>
                Defines how to compress the primary sort data (introduced in v3.7.1). ArangoDB v3.5 and v3.6 always compress the
                index using LZ4.
                This option is immutable.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoView.StoredValues">
            <summary>
                An array of objects to describe which document attributes to store in the View index (introduced in v3.7.1).
                It can then cover search queries, which means the data can be taken from the index directly and accessing the
                storage engine can be avoided.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoView.CleanupIntervalStep">
            <summary>
                Wait at least this many commits between removing unused files in the ArangoSearch data directory (default: 2, to
                disable use: 0).
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoView.CommitIntervalMsec">
            <summary>
                Wait at least this many milliseconds between committing View data store changes and making documents visible to
                queries (default: 1000, to disable use: 0)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoView.ConsolidationPolicy">
            <summary>
                The consolidation policy to apply for selecting which segments should be merged
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoView.ConsolidationIntervalMsec">
            <summary>
                Wait at least this many milliseconds between applying ‘consolidationPolicy’ to consolidate View data store and
                possibly release space on the filesystem (default: 10000, to disable use: 0).
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoView.WritebufferIdle">
            <summary>
                Maximum number of writers (segments) cached in the pool (default: 64, use 0 to disable, immutable)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoView.WritebufferActive">
            <summary>
                Maximum number of concurrent active writers (segments) that perform a transaction. Other writers (segments) wait
                till current active writers (segments) finish (default: 0, use 0 to disable, immutable)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoView.WritebufferSizeMax">
            <summary>
                Maximum memory byte size per writer (segment) before a writer (segment) flush is triggered.
                0 value turns off this limit for any writer (buffer) and data will be flushed periodically based on the value
                defined for the flush thread (ArangoDB server startup option).
                0 value should be used carefully due to high potential memory consumption (default: 33554432, use 0 to disable,
                immutable)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoView.ExtensionData">
            <summary>
             Overflow properties
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoViewCompressionType">
            <summary>
                Arango View Compression
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoViewCompressionType.Lz4">
            <summary>
                LZ4
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoViewCompressionType.None">
            <summary>
                None
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoSortDirection">
            <summary>
                Arango View Compression
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoSortDirection.Asc">
            <summary>
                Ascending
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoSortDirection.Desc">
            <summary>
                Descending
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoViewConsolidationPolicy">
            <summary>
                Arango View Consolidation Policy
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoViewConsolidationPolicy.Type">
            <summary>
                The segment candidates for the “consolidation” operation are selected based upon several possible configurable
                formulas as defined by their types.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoViewConsolidationPolicy.Threshold">
            <summary>
                value in the range [0.0, 1.0]
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoViewConsolidationPolicy.SegmentsBytesFloor">
            <summary>
                Defines the value (in bytes) to treat all smaller segments as equal for consolidation selection (default: 2097152)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoViewConsolidationPolicy.SegmentsBytesMax">
            <summary>
                Maximum allowed size of all consolidated segments in bytes (default: 5368709120)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoViewConsolidationPolicy.SegmentsMax">
            <summary>
                The maximum number of segments that will be evaluated as candidates for consolidation (default: 10)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoViewConsolidationPolicy.SegmentsMin">
            <summary>
                The minimum number of segments that will be evaluated as candidates for consolidation (default: 1)
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoViewConsolidationPolicy.MinScore">
            <summary>
                ?
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoViewConsolidationPolicy.ExtensionData">
            <summary>
             Overflow properties
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoViewConsolidationType">
            <summary>
                Arango View Consolidation Type
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoViewConsolidationType.Tier">
            <summary>
                (default): consolidate based on segment byte size and live document count as dictated by the customization
                attributes.
                If this type is used, then below segments* and minScore properties are available.
            </summary>
        </member>
        <member name="F:Core.Arango.Protocol.ArangoViewConsolidationType.BytesAccum">
            <summary>
                Consolidate if and only if {threshold} > (segment_bytes + sum_of_merge_candidate_segment_bytes) / all_segment_bytes
                i.e. the sum of all candidate segment byte size is less than the total segment byte size multiplied by the
                {threshold}.
                If this type is used, then below threshold property is available.
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoViewInformation">
            <summary>
              Arango View Information
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoViewInformation.Name">
            <summary>
                The name of the View.
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoViewInformation.GloballyUniqueId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoViewInformation.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoViewInformation.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoViewStoredValue">
            <summary>
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoViewStoredValue.Fields">
            <summary>
                Attribute paths to store
            </summary>
        </member>
        <member name="P:Core.Arango.Protocol.ArangoViewStoredValue.Compression">
            <summary>
                Compression
            </summary>
        </member>
        <member name="T:Core.Arango.Protocol.ArangoVoid">
            <summary>
                Something to deserialize to when no response needed
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.AdditionalFromClause">
            <summary>
                Represents a data source in a query that adds new data items in addition to those provided by the
                <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" />.
            </summary>
            <example>
                In C#, the second "from" clause in the following sample corresponds to an <see cref="T:Core.Arango.Relinq.Clauses.AdditionalFromClause" />:
                <ode>
                    var query = from s in Students
                    from f in s.Friends
                    select f;
                </ode>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.AdditionalFromClause.#ctor(System.String,System.Type,System.Linq.Expressions.Expression)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.AdditionalFromClause" /> class.
            </summary>
            <param name="itemName">A name describing the items generated by the from clause.</param>
            <param name="itemType">The type of the items generated by the from clause.</param>
            <param name="fromExpression">The <see cref="T:System.Linq.Expressions.Expression" /> generating the items of this from clause.</param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.AdditionalFromClause.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel,System.Int32)">
            <summary>
                Accepts the specified visitor by calling its <see cref="M:Core.Arango.Relinq.IQueryModelVisitor.VisitAdditionalFromClause(Core.Arango.Relinq.Clauses.AdditionalFromClause,Core.Arango.Relinq.QueryModel,System.Int32)" /> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="index">
                The index of this clause in the <paramref name="queryModel" />'s
                <see cref="P:Core.Arango.Relinq.QueryModel.BodyClauses" /> collection.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.AdditionalFromClause.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <summary>
                Clones this clause, registering its clone with the <paramref name="cloneContext" />.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Core.Arango.Relinq.Clauses.CloneContext" />.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.CloneContext">
            <summary>
                Aggregates all objects needed in the process of cloning a <see cref="T:Core.Arango.Relinq.QueryModel" /> and its clauses.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.CloneContext.QuerySourceMapping">
            <summary>
                Gets the clause mapping used during the cloning process. This is used to adjust the
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> instances
                of clauses to point to clauses in the cloned <see cref="T:Core.Arango.Relinq.QueryModel" />.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.Expressions.IPartialEvaluationExceptionExpressionVisitor">
            <summary>
                This interface should be implemented by visitors that handle the
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.PartialEvaluationExceptionExpression" /> instances.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.Expressions.IVBSpecificExpressionVisitor">
            <summary>
                This interface should be implemented by visitors that handle VB-specific expressions.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.Expressions.PartialEvaluationExceptionExpression">
            <summary>
                Wraps an exception whose partial evaluation caused an exception.
            </summary>
            <remarks>
                <para>
                    When <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.PartialEvaluatingExpressionVisitor" /> encounters an exception while evaluating an independent
                    expression subtree, it
                    will wrap the subtree within a <see cref="T:Core.Arango.Relinq.Clauses.Expressions.PartialEvaluationExceptionExpression" />. The wrapper contains both
                    the <see cref="P:Core.Arango.Relinq.Clauses.Expressions.PartialEvaluationExceptionExpression.Exception" />
                    instance and the <see cref="P:Core.Arango.Relinq.Clauses.Expressions.PartialEvaluationExceptionExpression.EvaluatedExpression" /> that caused the exception.
                </para>
                <para>
                    To explicitly support this expression type, implement
                    <see cref="T:Core.Arango.Relinq.Clauses.Expressions.IPartialEvaluationExceptionExpressionVisitor" />.
                    To ignore this wrapper and only handle the inner <see cref="P:Core.Arango.Relinq.Clauses.Expressions.PartialEvaluationExceptionExpression.EvaluatedExpression" />, call the
                    <see cref="M:Core.Arango.Relinq.Clauses.Expressions.PartialEvaluationExceptionExpression.Reduce" /> method and visit the result.
                </para>
                <para>
                    Subclasses of <see cref="T:Core.Arango.Relinq.Parsing.ThrowingExpressionVisitor" /> that do not implement
                    <see cref="T:Core.Arango.Relinq.Clauses.Expressions.IPartialEvaluationExceptionExpressionVisitor" /> will,
                    by default, automatically reduce this expression type to the <see cref="P:Core.Arango.Relinq.Clauses.Expressions.PartialEvaluationExceptionExpression.EvaluatedExpression" /> in the
                    <see cref="M:Core.Arango.Relinq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" /> method.
                </para>
                <para>
                    Subclasses of <see cref="T:Core.Arango.Relinq.Parsing.RelinqExpressionVisitor" /> that do not implement
                    <see cref="T:Core.Arango.Relinq.Clauses.Expressions.IPartialEvaluationExceptionExpressionVisitor" /> will,
                    by default, ignore this expression and visit its child expressions via the
                    <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" /> and
                    <see cref="M:Core.Arango.Relinq.Clauses.Expressions.PartialEvaluationExceptionExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" /> methods.
                </para>
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression">
            <summary>
                Represents an expression tree node that points to a query source represented by a <see cref="T:Core.Arango.Relinq.Clauses.FromClauseBase" />.
                These expressions should always
                point back, to a clause defined prior to the clause holding a <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" />.
                Otherwise, exceptions might be
                thrown at runtime.
            </summary>
            <remarks>
                This particular expression overrides <see cref="M:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression.Equals(System.Object)" />, i.e. it can be compared to another
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> based
                on the <see cref="P:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource" />.
            </remarks>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource">
            <summary>
                Gets the query source referenced by this expression.
            </summary>
            <value>The referenced query source.</value>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to the current
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> by
                comparing the <see cref="P:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource" /> properties for reference equality.
            </summary>
            <param name="obj">
                The <see cref="T:System.Object" /> to compare with the current
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" />.
            </param>
            <returns>
                <see langword="true" /> if the specified <see cref="T:System.Object" /> is a
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> that points to the
                same <see cref="P:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource" />; otherwise, false.
            </returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.Expressions.SubQueryExpression">
            <summary>
                Represents an <see cref="T:System.Linq.Expressions.Expression" /> that holds a subquery. The subquery is held by <see cref="P:Core.Arango.Relinq.Clauses.Expressions.SubQueryExpression.QueryModel" /> in
                its parsed form.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.Expressions.VBStringComparisonExpression">
            <summary>
                Represents a VB-specific comparison expression.
            </summary>
            <remarks>
                <para>
                    To explicitly support this expression type, implement <see cref="T:Core.Arango.Relinq.Clauses.Expressions.IVBSpecificExpressionVisitor" />.
                    To treat this expression as if it were an ordinary <see cref="T:System.Linq.Expressions.BinaryExpression" />, call its
                    <see cref="M:Core.Arango.Relinq.Clauses.Expressions.VBStringComparisonExpression.Reduce" /> method and visit the result.
                </para>
                <para>
                    Subclasses of <see cref="T:Core.Arango.Relinq.Parsing.ThrowingExpressionVisitor" /> that do not implement
                    <see cref="T:Core.Arango.Relinq.Clauses.Expressions.IVBSpecificExpressionVisitor" /> will, by default,
                    automatically reduce this expression type to <see cref="T:System.Linq.Expressions.BinaryExpression" /> in the
                    <see cref="M:Core.Arango.Relinq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" /> method.
                </para>
                <para>
                    Subclasses of <see cref="T:Core.Arango.Relinq.Parsing.RelinqExpressionVisitor" /> that do not implement
                    <see cref="T:Core.Arango.Relinq.Clauses.Expressions.IVBSpecificExpressionVisitor" /> will, by default,
                    ignore this expression and visit its child expressions via the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
                    and
                    <see cref="M:Core.Arango.Relinq.Clauses.Expressions.VBStringComparisonExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" /> methods.
                </para>
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ExpressionVisitors.AccessorFindingExpressionVisitor">
            <summary>
                Constructs a <see cref="T:System.Linq.Expressions.LambdaExpression" /> that is able to extract a specific simple expression from a complex
                <see cref="T:System.Linq.Expressions.NewExpression" />
                or <see cref="T:System.Linq.Expressions.MemberInitExpression" />.
            </summary>
            <example>
                <para>
                    For example, consider the task of determining the value of a specific query source [s] from an input value
                    corresponding to a complex
                    expression. This <see cref="T:Core.Arango.Relinq.Clauses.ExpressionVisitors.AccessorFindingExpressionVisitor" /> will return a <see cref="T:System.Linq.Expressions.LambdaExpression" />
                    able to perform this task.
                </para>
                <para>
                    <list type="bullet">
                        <item>If the complex expression is [s], it will simply return input => input.</item>
                        <item>If the complex expression is new { a = [s], b = "..." }, it will return input => input.a.</item>
                        <item>
                            If the complex expression is new { a = new { b = [s], c = "..." }, d = "..." }, it will return input
                            => input.a.b.
                        </item>
                    </list>
                </para>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ExpressionVisitors.AccessorFindingExpressionVisitor.FindAccessorLambda(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
                Constructs a <see cref="T:System.Linq.Expressions.LambdaExpression" /> that is able to extract a specific simple
                <paramref name="searchedExpression" /> from a
                complex <paramref name="fullExpression" />.
            </summary>
            <param name="searchedExpression">The expression an accessor to which should be created.</param>
            <param name="fullExpression">The full expression containing the <paramref name="searchedExpression" />.</param>
            <param name="inputParameter">
                The input parameter to be used by the resulting lambda. Its type must match the type of
                <paramref name="fullExpression" />.
            </param>
            <remarks>
                The <see cref="T:Core.Arango.Relinq.Clauses.ExpressionVisitors.AccessorFindingExpressionVisitor" /> compares the <paramref name="searchedExpression" /> via
                reference equality,
                which means that exactly the same expression reference must be contained by <paramref name="fullExpression" /> for
                the visitor to return the
                expected result. In addition, the visitor can only provide accessors for expressions nested in
                <see cref="T:System.Linq.Expressions.NewExpression" /> or
                <see cref="T:System.Linq.Expressions.MemberInitExpression" />.
            </remarks>
            <returns>
                A <see cref="T:System.Linq.Expressions.LambdaExpression" /> acting as an accessor for the <paramref name="searchedExpression" /> when an
                input matching
                <paramref name="fullExpression" /> is given.
            </returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ExpressionVisitors.ReferenceReplacingExpressionVisitor">
            <summary>
                Takes an expression and replaces all <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> instances, as defined by a given
                <see cref="T:Core.Arango.Relinq.Clauses.QuerySourceMapping" />.
                This is used whenever references to query sources should be replaced by a transformation.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ExpressionVisitors.ReferenceReplacingExpressionVisitor.ReplaceClauseReferences(System.Linq.Expressions.Expression,Core.Arango.Relinq.Clauses.QuerySourceMapping,System.Boolean)">
            <summary>
                Takes an expression and replaces all <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> instances, as defined by a given
                <paramref name="querySourceMapping" />.
            </summary>
            <param name="expression">The expression to be scanned for references.</param>
            <param name="querySourceMapping">
                The clause mapping to be used for replacing
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> instances.
            </param>
            <param name="throwOnUnmappedReferences">
                If <see langword="true" />, the visitor will throw an exception when
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> not mapped in the <paramref name="querySourceMapping" /> is
                encountered. If <see langword="false" />,
                the visitor will ignore such expressions.
            </param>
            <returns>
                An expression with its <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> instances replaced as defined by the
                <paramref name="querySourceMapping" />.
            </returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ExpressionVisitors.ReverseResolvingExpressionVisitor">
            <summary>
                Performs a reverse <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)" /> operation, i.e. creates a <see cref="T:System.Linq.Expressions.LambdaExpression" />
                from a given resolved expression,
                substituting all <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> objects by getting the referenced objects from the
                lambda's input parameter.
            </summary>
            <example>
                Given the following input:
                <list type="bullet">
                    <item>ItemExpression: <c>new AnonymousType ( a = [s1], b = [s2] )</c></item>
                    <item>ResolvedExpression: <c>[s1].ID + [s2].ID</c></item>
                </list>
                The visitor generates the following <see cref="T:System.Linq.Expressions.LambdaExpression" />: <c>input => input.a.ID + input.b.ID</c>
                The lambda's input parameter has the same type as the ItemExpression.
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ExpressionVisitors.ReverseResolvingExpressionVisitor.ReverseResolve(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                Performs a reverse <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)" /> operation, i.e. creates a <see cref="T:System.Linq.Expressions.LambdaExpression" />
                from a given resolved expression,
                substituting all <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> objects by getting the referenced objects from the
                lambda's input parameter.
            </summary>
            <param name="itemExpression">
                The item expression representing the items passed to the generated <see cref="T:System.Linq.Expressions.LambdaExpression" /> via its input
                parameter.
            </param>
            <param name="resolvedExpression">
                The resolved expression for which to generate a reverse resolved
                <see cref="T:System.Linq.Expressions.LambdaExpression" />.
            </param>
            <returns>
                A <see cref="T:System.Linq.Expressions.LambdaExpression" /> from the given resolved expression, substituting all
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" />
                objects by getting the referenced objects from the lambda's input parameter. The generated
                <see cref="T:System.Linq.Expressions.LambdaExpression" /> has exactly one
                parameter which is of the type defined by <paramref name="itemExpression" />.
            </returns>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ExpressionVisitors.ReverseResolvingExpressionVisitor.ReverseResolveLambda(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Int32)">
            <summary>
                Performs a reverse <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)" /> operation on a <see cref="T:System.Linq.Expressions.LambdaExpression" />, i.e.
                creates a new
                <see cref="T:System.Linq.Expressions.LambdaExpression" /> with an additional parameter from a given resolved <see cref="T:System.Linq.Expressions.LambdaExpression" />,
                substituting all <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> objects by getting the referenced objects from the
                new input parameter.
            </summary>
            <param name="itemExpression">
                The item expression representing the items passed to the generated <see cref="T:System.Linq.Expressions.LambdaExpression" /> via its new
                input parameter.
            </param>
            <param name="resolvedExpression">
                The resolved <see cref="T:System.Linq.Expressions.LambdaExpression" /> for which to generate a reverse resolved
                <see cref="T:System.Linq.Expressions.LambdaExpression" />.
            </param>
            <param name="parameterInsertionPosition">The position at which to insert the new parameter.</param>
            <returns>
                A <see cref="T:System.Linq.Expressions.LambdaExpression" /> similar to the given resolved expression, substituting all
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" />
                objects by getting the referenced objects from an additional input parameter. The new input parameter is of the
                type defined by
                <paramref name="itemExpression" />.
            </returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.FromClauseBase">
            <summary>
                Base class for <see cref="T:Core.Arango.Relinq.Clauses.AdditionalFromClause" /> and <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" />.
            </summary>
            <seealso cref="T:Core.Arango.Relinq.Clauses.IFromClause" />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.FromClauseBase.#ctor(System.String,System.Type,System.Linq.Expressions.Expression)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.FromClauseBase" /> class.
            </summary>
            <param name="itemName">A name describing the items generated by the from clause.</param>
            <param name="itemType">The type of the items generated by the from clause.</param>
            <param name="fromExpression">The <see cref="T:System.Linq.Expressions.Expression" /> generating data items for this from clause.</param>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.FromClauseBase.ItemName">
            <summary>
                Gets or sets a name describing the items generated by this from clause.
            </summary>
            <remarks>
                Item names are inferred when a query expression is parsed, and they usually correspond to the variable names
                present in that expression.
                However, note that names are not necessarily unique within a <see cref="T:Core.Arango.Relinq.QueryModel" />. Use names only for
                readability and debugging, not for
                uniquely identifying <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> objects. To match an <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> with its
                references, use the
                <see cref="P:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource" /> property rather than the
                <see cref="P:Core.Arango.Relinq.Clauses.FromClauseBase.ItemName" />.
            </remarks>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.FromClauseBase.ItemType">
            <summary>
                Gets or sets the type of the items generated by this from clause.
            </summary>
            <note type="warning">
                Changing the <see cref="P:Core.Arango.Relinq.Clauses.FromClauseBase.ItemType" /> of a <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> can make all
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> objects that
                point to that <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> invalid, so the property setter should be used with care.
            </note>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.FromClauseBase.FromExpression">
            <summary>
                The expression generating the data items for this from clause.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.FromClauseBase.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                Transforms all the expressions in this clause and its child objects via the given
                <paramref name="transformation" /> delegate.
            </summary>
            <param name="transformation">
                The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression" /> within this
                clause, and those expressions will be replaced with what the delegate returns.
            </param>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.GroupJoinClause">
            <summary>
                Represents the join part of a query, adding new data items and joining them with data items from previous clauses.
                In contrast to
                <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" />, the <see cref="T:Core.Arango.Relinq.Clauses.GroupJoinClause" /> does not provide access to the individual
                items of the joined query source.
                Instead, it provides access to all joined items for each item coming from the previous clauses, thus grouping them
                together. The semantics
                of this join is so that for all input items, a joined sequence is returned. That sequence can be empty if no joined
                items are available.
            </summary>
            <example>
                In C#, the "into" clause in the following sample corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.GroupJoinClause" />. The "join" part
                before that is encapsulated
                as a <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" /> held in <see cref="P:Core.Arango.Relinq.Clauses.GroupJoinClause.JoinClause" />. The <see cref="P:Core.Arango.Relinq.Clauses.GroupJoinClause.JoinClause" /> adds a new
                query source to the query
                ("addresses"), but the item type of that query source is <see cref="T:System.Collections.Generic.IEnumerable`1" />, not "Address". Therefore,
                it can be
                used in the <see cref="P:Core.Arango.Relinq.Clauses.FromClauseBase.FromExpression" /> of an <see cref="T:Core.Arango.Relinq.Clauses.AdditionalFromClause" /> to extract the
                single items.
                <code>
            var query = from s in Students
                        join a in Addresses on s.AdressID equals a.ID into addresses
                        from a in addresses
                        select new { s, a };
            </code>
            </example>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.GroupJoinClause.JoinClause">
            <summary>
                Gets or sets the inner join clause of this <see cref="T:Core.Arango.Relinq.Clauses.GroupJoinClause" />. The <see cref="P:Core.Arango.Relinq.Clauses.GroupJoinClause.JoinClause" /> represents
                the actual join operation
                performed by this clause; its results are then grouped by this clause before streaming them to subsequent clauses.
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> objects outside the <see cref="T:Core.Arango.Relinq.Clauses.GroupJoinClause" /> must not point to
                <see cref="P:Core.Arango.Relinq.Clauses.GroupJoinClause.JoinClause" />
                because the items generated by it are only available in grouped form from outside this clause.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.GroupJoinClause.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                Transforms all the expressions in this clause and its child objects via the given
                <paramref name="transformation" /> delegate.
            </summary>
            <param name="transformation">
                The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression" /> within this
                clause, and those expressions will be replaced with what the delegate returns.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.GroupJoinClause.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel,System.Int32)">
            <summary>
                Accepts the specified visitor by calling its <see cref="M:Core.Arango.Relinq.IQueryModelVisitor.VisitGroupJoinClause(Core.Arango.Relinq.Clauses.GroupJoinClause,Core.Arango.Relinq.QueryModel,System.Int32)" /> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="index">
                The index of this clause in the <paramref name="queryModel" />'s
                <see cref="P:Core.Arango.Relinq.QueryModel.BodyClauses" /> collection.
            </param>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.GroupJoinClause.ItemName">
            <summary>
                Gets or sets a name describing the items generated by this <see cref="T:Core.Arango.Relinq.Clauses.GroupJoinClause" />.
            </summary>
            <remarks>
                Item names are inferred when a query expression is parsed, and they usually correspond to the variable names
                present in that expression.
                However, note that names are not necessarily unique within a <see cref="T:Core.Arango.Relinq.QueryModel" />. Use names only for
                readability and debugging, not for
                uniquely identifying <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> objects. To match an <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> with its
                references, use the
                <see cref="P:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource" /> property rather than the
                <see cref="P:Core.Arango.Relinq.Clauses.GroupJoinClause.ItemName" />.
            </remarks>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.GroupJoinClause.ItemType">
            <summary>
                Gets or sets the type of the items generated by this <see cref="T:Core.Arango.Relinq.Clauses.GroupJoinClause" />. This must implement
                <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <note type="warning">
                Changing the <see cref="P:Core.Arango.Relinq.Clauses.GroupJoinClause.ItemType" /> of a <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> can make all
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> objects that
                point to that <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> invalid, so the property setter should be used with care.
            </note>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.GroupJoinClause.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <summary>
                Clones this clause, registering its clone with the <paramref name="cloneContext" />.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Core.Arango.Relinq.Clauses.CloneContext" />.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.IBodyClause">
            <summary>
                Represents a clause in a <see cref="T:Core.Arango.Relinq.QueryModel" />'s <see cref="P:Core.Arango.Relinq.QueryModel.BodyClauses" /> collection. Body clauses
                take the items generated by
                the <see cref="P:Core.Arango.Relinq.QueryModel.MainFromClause" />, filtering (<see cref="T:Core.Arango.Relinq.Clauses.WhereClause" />), ordering (
                <see cref="T:Core.Arango.Relinq.Clauses.OrderByClause" />), augmenting
                (<see cref="T:Core.Arango.Relinq.Clauses.AdditionalFromClause" />), or otherwise processing them before they are passed to the
                <see cref="P:Core.Arango.Relinq.QueryModel.SelectClause" />.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.IBodyClause.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel,System.Int32)">
            <summary>
                Accepts the specified visitor by calling one of its Visit... methods.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="index">
                The index of this clause in the <paramref name="queryModel" />'s
                <see cref="P:Core.Arango.Relinq.QueryModel.BodyClauses" /> collection.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.IBodyClause.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <summary>
                Clones this clause, registering its clone with the <paramref name="cloneContext" /> if it is a query source clause.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Core.Arango.Relinq.Clauses.CloneContext" />.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.IClause">
            <summary>
                Represents a clause within the <see cref="T:Core.Arango.Relinq.QueryModel" />. Implemented by <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" />,
                <see cref="T:Core.Arango.Relinq.Clauses.SelectClause" />,
                <see cref="T:Core.Arango.Relinq.Clauses.IBodyClause" />, and <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" />.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.IClause.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                Transforms all the expressions in this clause and its child objects via the given
                <paramref name="transformation" /> delegate.
            </summary>
            <param name="transformation">
                The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression" /> within this
                clause, and those expressions will be replaced with what the delegate returns.
            </param>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.IFromClause">
            <summary>
                Common interface for from clauses (<see cref="T:Core.Arango.Relinq.Clauses.AdditionalFromClause" /> and <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" />). From
                clauses define query sources that
                provide data items to the query which are filtered, ordered, projected, or otherwise processed by the following
                clauses.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.IFromClause.FromExpression">
            <summary>
                The expression generating the data items for this from clause.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.IFromClause.CopyFromSource(Core.Arango.Relinq.Clauses.IFromClause)">
            <summary>
                Copies the <paramref name="source" />'s attributes, i.e. the <see cref="P:Core.Arango.Relinq.Clauses.IQuerySource.ItemName" />,
                <see cref="P:Core.Arango.Relinq.Clauses.IQuerySource.ItemType" />, and
                <see cref="P:Core.Arango.Relinq.Clauses.IFromClause.FromExpression" />.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.IQuerySource">
            <summary>
                Represents a clause or result operator that generates items which are streamed to the following clauses or
                operators.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.IQuerySource.ItemName">
            <summary>
                Gets the name of the items generated by this <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" />.
            </summary>
            <remarks>
                Item names are inferred when a query expression is parsed, and they usually correspond to the variable names
                present in that expression.
                However, note that names are not necessarily unique within a <see cref="T:Core.Arango.Relinq.QueryModel" />. Use names only for
                readability and debugging, not for
                uniquely identifying <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> objects. To match an <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> with its
                references, use the
                <see cref="P:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource" /> property rather than the
                <see cref="P:Core.Arango.Relinq.Clauses.IQuerySource.ItemName" />.
            </remarks>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.IQuerySource.ItemType">
            <summary>
                Gets the type of the items generated by this <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" />.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.JoinClause">
            <summary>
                Represents the join part of a query, adding new data items and joining them with data items from previous clauses.
                This can either
                be part of <see cref="P:Core.Arango.Relinq.QueryModel.BodyClauses" /> or of <see cref="T:Core.Arango.Relinq.Clauses.GroupJoinClause" />. The semantics of the
                <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" />
                is that of an inner join, i.e. only combinations where both an input item and a joined item exist are returned.
            </summary>
            <example>
                In C#, the "join" clause in the following sample corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" />. The
                <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" /> adds a new
                query source to the query, selecting addresses (called "a") from the source "Addresses". It associates addresses
                and students by
                comparing the students' "AddressID" properties with the addresses' "ID" properties. "a" corresponds to
                <see cref="P:Core.Arango.Relinq.Clauses.JoinClause.ItemName" /> and
                <see cref="P:Core.Arango.Relinq.Clauses.JoinClause.ItemType" />, "Addresses" is <see cref="P:Core.Arango.Relinq.Clauses.JoinClause.InnerSequence" /> and the left and right side of the "equals"
                operator are held by
                <see cref="P:Core.Arango.Relinq.Clauses.JoinClause.OuterKeySelector" /> and <see cref="P:Core.Arango.Relinq.Clauses.JoinClause.InnerKeySelector" />, respectively:
                <code>
            var query = from s in Students
                        join a in Addresses on s.AdressID equals a.ID
                        select new { s, a };
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.JoinClause.#ctor(System.String,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" /> class.
            </summary>
            <param name="itemName">A name describing the items generated by this <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" />.</param>
            <param name="itemType">The type of the items generated by this <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" />.</param>
            <param name="innerSequence">
                The expression that generates the inner sequence, i.e. the items of this
                <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" />.
            </param>
            <param name="outerKeySelector">
                An expression that selects the left side of the comparison by which source items and
                inner items are joined.
            </param>
            <param name="innerKeySelector">
                An expression that selects the right side of the comparison by which source items and
                inner items are joined.
            </param>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.JoinClause.InnerSequence">
            <summary>
                Gets or sets the inner sequence, the expression that generates the inner sequence, i.e. the items of this
                <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" />.
            </summary>
            <value>The inner sequence.</value>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.JoinClause.OuterKeySelector">
            <summary>
                Gets or sets the outer key selector, an expression that selects the right side of the comparison by which source
                items and inner items are joined.
            </summary>
            <value>The outer key selector.</value>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.JoinClause.InnerKeySelector">
            <summary>
                Gets or sets the inner key selector, an expression that selects the left side of the comparison by which source
                items and inner items are joined.
            </summary>
            <value>The inner key selector.</value>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.JoinClause.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel,System.Int32)">
            <summary>
                Accepts the specified visitor by calling its
                <see
                    cref="M:Core.Arango.Relinq.IQueryModelVisitor.VisitJoinClause(Core.Arango.Relinq.Clauses.JoinClause,Core.Arango.Relinq.QueryModel,System.Int32)" />
                method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="index">
                The index of this clause in the <paramref name="queryModel" />'s
                <see cref="P:Core.Arango.Relinq.QueryModel.BodyClauses" /> collection.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.JoinClause.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                Transforms all the expressions in this clause and its child objects via the given
                <paramref name="transformation" /> delegate.
            </summary>
            <param name="transformation">
                The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression" /> within this
                clause, and those expressions will be replaced with what the delegate returns.
            </param>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.JoinClause.ItemType">
            <summary>
                Gets or sets the type of the items generated by this <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" />.
            </summary>
            <note type="warning">
                Changing the <see cref="P:Core.Arango.Relinq.Clauses.JoinClause.ItemType" /> of a <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> can make all
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> objects that
                point to that <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> invalid, so the property setter should be used with care.
            </note>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.JoinClause.ItemName">
            <summary>
                Gets or sets a name describing the items generated by this <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" />.
            </summary>
            <remarks>
                Item names are inferred when a query expression is parsed, and they usually correspond to the variable names
                present in that expression.
                However, note that names are not necessarily unique within a <see cref="T:Core.Arango.Relinq.QueryModel" />. Use names only for
                readability and debugging, not for
                uniquely identifying <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> objects. To match an <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> with its
                references, use the
                <see cref="P:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource" /> property rather than the
                <see cref="P:Core.Arango.Relinq.Clauses.JoinClause.ItemName" />.
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.JoinClause.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel,Core.Arango.Relinq.Clauses.GroupJoinClause)">
            <summary>
                Accepts the specified visitor by calling its
                <see
                    cref="M:Core.Arango.Relinq.IQueryModelVisitor.VisitJoinClause(Core.Arango.Relinq.Clauses.JoinClause,Core.Arango.Relinq.QueryModel,Core.Arango.Relinq.Clauses.GroupJoinClause)" />
                method. This overload is used when visiting a <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" /> that is held by a
                <see cref="T:Core.Arango.Relinq.Clauses.GroupJoinClause" />.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="groupJoinClause">The <see cref="T:Core.Arango.Relinq.Clauses.GroupJoinClause" /> holding this <see cref="T:Core.Arango.Relinq.Clauses.JoinClause" /> instance.</param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.JoinClause.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <summary>
                Clones this clause, registering its clone with the <paramref name="cloneContext" />.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Core.Arango.Relinq.Clauses.CloneContext" />.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.MainFromClause">
            <summary>
                Represents the main data source in a query, producing data items that are filtered, aggregated, projected, or
                otherwise processed by
                subsequent clauses.
            </summary>
            <example>
                In C#, the first "from" clause in the following sample corresponds to the <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" />:
                <ode>
                    var query = from s in Students
                    from f in s.Friends
                    select f;
                </ode>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.MainFromClause.#ctor(System.String,System.Type,System.Linq.Expressions.Expression)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" /> class.
            </summary>
            <param name="itemName">A name describing the items generated by the from clause.</param>
            <param name="itemType">The type of the items generated by the from clause.</param>
            <param name="fromExpression">The <see cref="T:System.Linq.Expressions.Expression" /> generating data items for this from clause.</param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.MainFromClause.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel)">
            <summary>
                Accepts the specified visitor by calling its <see cref="M:Core.Arango.Relinq.IQueryModelVisitor.VisitMainFromClause(Core.Arango.Relinq.Clauses.MainFromClause,Core.Arango.Relinq.QueryModel)" /> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.MainFromClause.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <summary>
                Clones this clause, registering its clone with the <paramref name="cloneContext" />.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Core.Arango.Relinq.Clauses.CloneContext" />.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.OrderByClause">
            <summary>
                Represents the orderby part of a query, ordering data items according to some <see cref="P:Core.Arango.Relinq.Clauses.OrderByClause.Orderings" />.
            </summary>
            <example>
                In C#, the whole "orderby" clause in the following sample (including two orderings) corresponds to an
                <see cref="T:Core.Arango.Relinq.Clauses.OrderByClause" />:
                <ode>
                    var query = from s in Students
                    orderby s.Last, s.First
                    select s;
                </ode>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.OrderByClause.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.OrderByClause" /> class.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.OrderByClause.Orderings">
            <summary>
                Gets the <see cref="T:Core.Arango.Relinq.Clauses.Ordering" /> instances that define how to sort the items coming from previous clauses. The
                order of the
                <see cref="P:Core.Arango.Relinq.Clauses.OrderByClause.Orderings" /> in the collection defines their priorities. For example, { LastName, FirstName } would
                sort all items by
                LastName, and only those items that have equal LastName values would be sorted by FirstName.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.OrderByClause.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel,System.Int32)">
            <summary>
                Accepts the specified visitor by calling its <see cref="M:Core.Arango.Relinq.IQueryModelVisitor.VisitOrderByClause(Core.Arango.Relinq.Clauses.OrderByClause,Core.Arango.Relinq.QueryModel,System.Int32)" /> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="index">
                The index of this clause in the <paramref name="queryModel" />'s
                <see cref="P:Core.Arango.Relinq.QueryModel.BodyClauses" /> collection.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.OrderByClause.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                Transforms all the expressions in this clause and its child objects via the given
                <paramref name="transformation" /> delegate.
            </summary>
            <param name="transformation">
                The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression" /> within this
                clause, and those expressions will be replaced with what the delegate returns.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.OrderByClause.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <summary>
                Clones this clause.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Core.Arango.Relinq.Clauses.CloneContext" />.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.Ordering">
            <summary>
                Represents a single ordering instruction in an <see cref="T:Core.Arango.Relinq.Clauses.OrderByClause" />.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.Ordering.#ctor(System.Linq.Expressions.Expression,Core.Arango.Relinq.Clauses.OrderingDirection)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.Ordering" /> class.
            </summary>
            <param name="expression">The expression used to order the data items returned by the query.</param>
            <param name="direction">The <see cref="P:Core.Arango.Relinq.Clauses.Ordering.OrderingDirection" /> to use for sorting.</param>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.Ordering.Expression">
            <summary>
                Gets or sets the expression used to order the data items returned by the query.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.Ordering.OrderingDirection">
            <summary>
                Gets or sets the direction to use for ordering data items.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.Ordering.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel,Core.Arango.Relinq.Clauses.OrderByClause,System.Int32)">
            <summary>
                Accepts the specified visitor by calling its <see cref="M:Core.Arango.Relinq.IQueryModelVisitor.VisitOrdering(Core.Arango.Relinq.Clauses.Ordering,Core.Arango.Relinq.QueryModel,Core.Arango.Relinq.Clauses.OrderByClause,System.Int32)" /> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="orderByClause">The <see cref="T:Core.Arango.Relinq.Clauses.OrderByClause" /> in whose context this item is visited.</param>
            <param name="index">
                The index of this item in the <paramref name="orderByClause" />'s
                <see cref="P:Core.Arango.Relinq.Clauses.OrderByClause.Orderings" /> collection.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.Ordering.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <summary>
                Clones this item.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Core.Arango.Relinq.Clauses.CloneContext" />.</param>
            <returns>A clone of this item.</returns>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.Ordering.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                Transforms all the expressions in this item via the given <paramref name="transformation" /> delegate.
            </summary>
            <param name="transformation">
                The transformation object. This delegate is called for each <see cref="P:Core.Arango.Relinq.Clauses.Ordering.Expression" /> within this
                item, and those expressions will be replaced with what the delegate returns.
            </param>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.OrderingDirection">
            <summary>
                Specifies the direction used to sort the result items in a query using an <see cref="T:Core.Arango.Relinq.Clauses.OrderByClause" />.
            </summary>
        </member>
        <member name="F:Core.Arango.Relinq.Clauses.OrderingDirection.Asc">
            <summary>
                Sorts the items in an ascending way, from smallest to largest.
            </summary>
        </member>
        <member name="F:Core.Arango.Relinq.Clauses.OrderingDirection.Desc">
            <summary>
                Sorts the items in an descending way, from largest to smallest.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.QuerySourceMapping">
            <summary>
                Maps <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> instances to <see cref="T:System.Linq.Expressions.Expression" /> instances. This is used by
                <see cref="M:Core.Arango.Relinq.QueryModel.Clone" />
                in order to be able to correctly update references to old clauses to point to the new clauses. Via
                <see cref="T:Core.Arango.Relinq.Clauses.ExpressionVisitors.ReferenceReplacingExpressionVisitor" />, it can also be used manually.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperatorBase">
            <summary>
                Represents an operation that is executed on the result set of the query, aggregating, filtering, or restricting the
                number of result items
                before the query result is returned.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.ExecuteInMemory(Core.Arango.Relinq.Clauses.StreamedData.IStreamedData)">
            <summary>
                Executes this result operator in memory, on a given input. Executing result operators in memory should only be
                performed if the target query system does not support the operator.
            </summary>
            <param name="input">
                The input for the result operator. This must match the type of <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedData" />
                expected by the operator.
            </param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.GetOutputDataInfo(Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo)">
            <summary>
                Gets information about the data streamed out of this <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" />. This contains the result
                type a query would have if
                it ended with this <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" />, and it optionally includes an
                <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo.ItemExpression" /> describing
                the streamed sequence's items.
            </summary>
            <param name="inputInfo">
                Information about the data produced by the preceding <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" />, or the
                <see cref="T:Core.Arango.Relinq.Clauses.SelectClause" />
                of the query if no previous <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" /> exists.
            </param>
            <returns>Gets information about the data streamed out of this <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" />.</returns>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <summary>
                Clones this item, registering its clone with the <paramref name="cloneContext" /> if it is a query source clause.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Core.Arango.Relinq.Clauses.CloneContext" />.</param>
            <returns>A clone of this item.</returns>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel,System.Int32)">
            <summary>
                Accepts the specified visitor by calling its <see cref="M:Core.Arango.Relinq.IQueryModelVisitor.VisitResultOperator(Core.Arango.Relinq.Clauses.ResultOperatorBase,Core.Arango.Relinq.QueryModel,System.Int32)" /> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="index">
                The index of this item in the <paramref name="queryModel" />'s
                <see cref="P:Core.Arango.Relinq.QueryModel.ResultOperators" /> collection.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                Transforms all the expressions in this item via the given <paramref name="transformation" /> delegate. Subclasses
                must apply the
                <paramref name="transformation" /> to any expressions they hold. If a subclass does not hold any expressions, it
                shouldn't do anything
                in the implementation of this method.
            </summary>
            <param name="transformation">
                The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression" /> within this
                item, and those expressions will be replaced with what the delegate returns.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.InvokeExecuteMethod(System.Reflection.MethodInfo,System.Object)">
            <summary>
                Invokes the given <paramref name="method" /> via reflection on the given <paramref name="input" />.
            </summary>
            <param name="input">The input to invoke the method with.</param>
            <param name="method">The method to be invoked.</param>
            <returns>The result of the invocation</returns>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.GetConstantValueFromExpression``1(System.String,System.Linq.Expressions.Expression)">
            <summary>
                Gets the constant value of the given expression, assuming it is a <see cref="T:System.Linq.Expressions.ConstantExpression" />. If it is
                not, an <see cref="T:System.InvalidOperationException" /> is thrown.
            </summary>
            <typeparam name="T">
                The expected value type. If the value is not of this type, an
                <see cref="T:System.InvalidOperationException" /> is thrown.
            </typeparam>
            <param name="expressionName">
                A string describing the value; this will be included in the exception message if an
                exception is thrown.
            </param>
            <param name="expression">The expression whose value to get.</param>
            <returns>
                The constant value of the given <paramref name="expression" />.
            </returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator">
            <summary>
                Represents aggregating the items returned by a query into a single value with an initial seeding value.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Aggregate" call in the following example corresponds to an
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator" />.
                <code>
            var result = (from s in Students
                         select s).Aggregate(0, (totalAge, s) => totalAge + s.Age);
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator" /> class.
            </summary>
            <param name="seed">The seed expression.</param>
            <param name="func">
                The aggregating function. This is a <see cref="T:System.Linq.Expressions.LambdaExpression" /> taking a parameter that represents the value
                accumulated so
                far and returns a new accumulated value. This is a resolved expression, i.e. items streaming in from prior clauses
                and result operators
                are represented as expressions containing <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> nodes.
            </param>
            <param name="optionalResultSelector">The result selector, can be <see langword="null" />.</param>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator.Func">
            <summary>
                Gets or sets the aggregating function. This is a <see cref="T:System.Linq.Expressions.LambdaExpression" /> taking a parameter that represents
                the value accumulated so
                far and returns a new accumulated value. This is a resolved expression, i.e. items streaming in from prior clauses
                and result operators
                are represented as expressions containing <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> nodes.
            </summary>
            <value>The aggregating function.</value>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator.Seed">
            <summary>
                Gets or sets the seed of the accumulation. This is an <see cref="T:System.Linq.Expressions.Expression" /> denoting the starting value of the
                aggregation.
            </summary>
            <value>The seed of the accumulation.</value>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator.OptionalResultSelector">
            <summary>
                Gets or sets the result selector. This is a <see cref="T:System.Linq.Expressions.LambdaExpression" /> applied after the aggregation to select
                the final value.
                Can be <see langword="null" />.
            </summary>
            <value>The result selector.</value>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator.GetConstantSeed``1">
            <summary>
                Gets the constant value of the <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator.Seed" /> property, assuming it is a <see cref="T:System.Linq.Expressions.ConstantExpression" />. If
                it is
                not, an <see cref="T:System.InvalidOperationException" /> is thrown.
            </summary>
            <typeparam name="T">
                The expected seed type. If the item is not of this type, an
                <see cref="T:System.InvalidOperationException" /> is thrown.
            </typeparam>
            <returns>The constant value of the <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator.Seed" /> property.</returns>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator.ExecuteInMemory``1(Core.Arango.Relinq.Clauses.StreamedData.StreamedSequence)">
            <inheritdoc cref="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.ExecuteInMemory(Core.Arango.Relinq.Clauses.StreamedData.IStreamedData)" />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator.ExecuteAggregateInMemory``3(Core.Arango.Relinq.Clauses.StreamedData.StreamedSequence)">
            <summary>
                Executes the aggregating operation in memory.
            </summary>
            <typeparam name="TInput">The type of the source items.</typeparam>
            <typeparam name="TAggregate">The type of the aggregated items.</typeparam>
            <typeparam name="TResult">The type of the result items.</typeparam>
            <param name="input">The input sequence.</param>
            <returns>A <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedValue" /> object holding the aggregated value.</returns>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator.GetOutputDataInfo(Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AggregateFromSeedResultOperator.ToString">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.AggregateResultOperator">
            <summary>
                Represents aggregating the items returned by a query into a single value. The first item is used as the seeding
                value for the aggregating
                function.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Aggregate" call in the following example corresponds to an <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.AggregateResultOperator" />.
                <code>
            var result = (from s in Students
                         select s.Name).Aggregate((allNames, name) => allNames + " " + name);
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AggregateResultOperator.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.AggregateResultOperator" /> class.
            </summary>
            <param name="func">
                The aggregating function. This is a <see cref="T:System.Linq.Expressions.LambdaExpression" /> taking a parameter that represents the value
                accumulated so
                far and returns a new accumulated value. This is a resolved expression, i.e. items streaming in from prior clauses
                and result operators
                are represented as expressions containing <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> nodes.
            </param>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.AggregateResultOperator.Func">
            <summary>
                Gets or sets the aggregating function. This is a <see cref="T:System.Linq.Expressions.LambdaExpression" /> taking a parameter that represents
                the value accumulated so
                far and returns a new accumulated value. This is a resolved expression, i.e. items streaming in from prior clauses
                and result operators
                are represented as expressions containing <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> nodes.
            </summary>
            <value>The aggregating function.</value>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AggregateResultOperator.ExecuteInMemory``1(Core.Arango.Relinq.Clauses.StreamedData.StreamedSequence)">
            <inheritdoc cref="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.ExecuteInMemory(Core.Arango.Relinq.Clauses.StreamedData.IStreamedData)" />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AggregateResultOperator.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AggregateResultOperator.GetOutputDataInfo(Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AggregateResultOperator.ToString">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.AllResultOperator">
            <summary>
                Represents a check whether all items returned by a query satisfy a predicate.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "All" call in the following example corresponds to an <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.AllResultOperator" />.
                <code>
            var result = (from s in Students
                         select s).All();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AllResultOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.AllResultOperator" /> class.
            </summary>
            <param name="predicate">
                The predicate to evaluate. This is a resolved version of the body of the <see cref="T:System.Linq.Expressions.LambdaExpression" /> that would
                be
                passed to <see cref="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />.
            </param>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.AllResultOperator.Predicate">
            <summary>
                Gets or sets the predicate to evaluate on all items in the sequence.
                This is a resolved version of the body of the <see cref="T:System.Linq.Expressions.LambdaExpression" /> that would be
                passed to <see cref="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />.
            </summary>
            <value>The predicate.</value>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AllResultOperator.ExecuteInMemory``1(Core.Arango.Relinq.Clauses.StreamedData.StreamedSequence)">
            <inheritdoc cref="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.ExecuteInMemory(Core.Arango.Relinq.Clauses.StreamedData.IStreamedData)" />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AllResultOperator.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AllResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AllResultOperator.GetOutputDataInfo(Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AllResultOperator.ToString">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.AnyResultOperator">
            <summary>
                Represents a check whether any items are returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <remarks>
                "Any" query methods taking a predicate are represented as into a combination of a <see cref="T:Core.Arango.Relinq.Clauses.WhereClause" /> and an
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.AnyResultOperator" />.
            </remarks>
            <example>
                In C#, the "Any" call in the following example corresponds to an <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.AnyResultOperator" />.
                <code>
            var result = (from s in Students
                         select s).Any();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AnyResultOperator.ExecuteInMemory``1(Core.Arango.Relinq.Clauses.StreamedData.StreamedSequence)">
            <inheritdoc cref="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.ExecuteInMemory(Core.Arango.Relinq.Clauses.StreamedData.IStreamedData)" />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AnyResultOperator.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AnyResultOperator.GetOutputDataInfo(Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AnyResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AnyResultOperator.ToString">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.AsQueryableResultOperator">
            <summary>
                Represents the transformation of a sequence to a query data source.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "AsQueryable" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.AsQueryableResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).AsQueryable();
            </code>
            </example>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.AsQueryableResultOperator.ISupportedByIQueryModelVistor">
            <summary>
                A marker interface that must be implemented by the <see cref="T:Core.Arango.Relinq.IQueryModelVisitor" /> if the visitor supports the
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.AsQueryableResultOperator" />.
            </summary>
            <remarks>
                Note that the interface will become obsolete with v3.0.0. See also RMLNQ-117.
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.AverageResultOperator">
            <summary>
                Represents a calculation of an average value from the items returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Average" call in the following example corresponds to an <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.AverageResultOperator" />.
                <code>
            var query = (from s in Students
                         select s.ID).Average();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.AverageResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.CastResultOperator">
            <summary>
                Represents a cast of the items returned by a query to a different type.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, "Cast" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.CastResultOperator" />.
                <code>
            var query = (from s in Students
                         select s.ID).Cast&lt;int&gt;();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.CastResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.ChoiceResultOperatorBase">
            <summary>
                Represents a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.ValueFromSequenceResultOperatorBase" /> that is executed on a sequence, choosing a single
                item for its result.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.ConcatResultOperator">
            <summary>
                Represents concatenating the items returned by a query with a given set of items, similar to the
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.UnionResultOperator" /> but
                retaining duplicates (and order).
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Concat" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.ConcatResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).Concat(students2);
            </code>
            </example>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.ConcatResultOperator.Source2">
            <summary>
                Gets or sets the second source of this result operator, that is, an enumerable containing the items concatenated
                with the input sequence.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.ConcatResultOperator.GetConstantSource2">
            <summary>
                Gets the value of <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.ConcatResultOperator.Source2" />, assuming <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.ConcatResultOperator.Source2" /> holds a <see cref="T:System.Linq.Expressions.ConstantExpression" />
                . If it doesn't,
                an <see cref="T:System.InvalidOperationException" /> is thrown.
            </summary>
            <returns>The constant value of <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.ConcatResultOperator.Source2" />.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.ContainsResultOperator">
            <summary>
                Represents a check whether the results returned by a query contain a specific item.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Contains" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.ContainsResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).Contains (student);
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.ContainsResultOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.ContainsResultOperator" /> class.
            </summary>
            <param name="item">The item for which to be searched.</param>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.ContainsResultOperator.Item">
            <summary>
                Gets or sets an expression yielding the item for which to be searched. This must be compatible with (ie.,
                assignable to) the source sequence
                items.
            </summary>
            <value>The item expression.</value>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.ContainsResultOperator.GetConstantItem``1">
            <summary>
                Gets the constant value of the <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.ContainsResultOperator.Item" /> property, assuming it is a <see cref="T:System.Linq.Expressions.ConstantExpression" />. If
                it is
                not, an <see cref="T:System.InvalidOperationException" /> is thrown.
            </summary>
            <typeparam name="T">
                The expected item type. If the item is not of this type, an
                <see cref="T:System.InvalidOperationException" /> is thrown.
            </typeparam>
            <returns>The constant value of the <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.ContainsResultOperator.Item" /> property.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.CountResultOperator">
            <summary>
                Represents counting the number of items returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <remarks>
                "Count" query methods taking a predicate are represented as a combination of a <see cref="T:Core.Arango.Relinq.Clauses.WhereClause" /> and a
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.CountResultOperator" />.
            </remarks>
            ///
            <example>
                In C#, the "Count" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.CountResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).Count();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.CountResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.DefaultIfEmptyResultOperator">
            <summary>
                Represents a guard clause yielding a singleton sequence with a default value if no items are returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Defaultifempty" call in the following example corresponds to a
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.DefaultIfEmptyResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).DefaultIfEmpty ("student");
            </code>
            </example>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.DefaultIfEmptyResultOperator.OptionalDefaultValue">
            <summary>
                Gets or sets the optional default value.
            </summary>
            <value>The optional default value.</value>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.DefaultIfEmptyResultOperator.GetConstantOptionalDefaultValue">
            <summary>
                Gets the constant <see cref="T:System.Object" /> value of the <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.DefaultIfEmptyResultOperator.OptionalDefaultValue" /> property, assuming it is a
                <see cref="T:System.Linq.Expressions.ConstantExpression" />. If it is
                not, an <see cref="T:System.InvalidOperationException" /> is thrown. If it is <see langword="null" />,
                <see langword="null" /> is returned.
            </summary>
            <returns>The constant <see cref="T:System.Object" /> value of the <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.DefaultIfEmptyResultOperator.OptionalDefaultValue" /> property.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.DistinctResultOperator">
            <summary>
                Represents the removal of duplicate values from the items returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Distinct" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.DistinctResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).Distinct();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.DistinctResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.ExceptResultOperator">
            <summary>
                Represents the removal of a given set of items from the result set of a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Except" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.ExceptResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).Except(students2);
            </code>
            </example>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.ExceptResultOperator.Source2">
            <summary>
                Gets or sets the second source of this result operator, that is, an enumerable containing the items removed from
                the input sequence.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.ExceptResultOperator.GetConstantSource2``1">
            <summary>
                Gets the value of <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.ExceptResultOperator.Source2" />, assuming <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.ExceptResultOperator.Source2" /> holds a <see cref="T:System.Linq.Expressions.ConstantExpression" />
                . If it doesn't,
                an <see cref="T:System.InvalidOperationException" /> is thrown.
            </summary>
            <returns>The constant value of <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.ExceptResultOperator.Source2" />.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.FirstResultOperator">
            <summary>
                Represents taking only the first of the items returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <remarks>
                "First" query methods taking a predicate are represented as a combination of a <see cref="T:Core.Arango.Relinq.Clauses.WhereClause" /> and a
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.FirstResultOperator" />.
            </remarks>
            <example>
                In C#, the "First" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.FirstResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).First();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.FirstResultOperator.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.DistinctResultOperator" />.
            </summary>
            <param name="returnDefaultWhenEmpty">The flag defines if a default expression should be regarded.</param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.FirstResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator">
            <summary>
                Represents grouping the items returned by a query according to some key retrieved by a <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator.KeySelector" />,
                applying by an
                <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator.ElementSelector" /> to the grouped items. This is a result operator, operating on the whole result set
                of the query.
            </summary>
            <example>
                In C#, the "group by" clause in the following sample corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator" />. "s" (a
                reference to the query source
                "s", see <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" />) is the <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator.ElementSelector" /> expression,
                "s.Country" is the
                <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator.KeySelector" /> expression:
                <code>
            var query = from s in Students
                        where s.First == "Hugo"
                        group s by s.Country;
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator.#ctor(System.String,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator" /> class.
            </summary>
            <param name="itemName">
                A name associated with the <see cref="T:System.Linq.IGrouping`2" /> items generated by the result
                operator.
            </param>
            <param name="keySelector">The selector retrieving the key by which to group items.</param>
            <param name="elementSelector">The selector retrieving the elements to group.</param>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator.KeySelector">
            <summary>
                Gets or sets the selector retrieving the key by which to group items.
                This is a resolved version of the body of the <see cref="T:System.Linq.Expressions.LambdaExpression" /> that would be
                passed to
                <see
                    cref="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})" />
                .
            </summary>
            <value>The key selector.</value>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator.ElementSelector">
            <summary>
                Gets or sets the selector retrieving the elements to group.
                This is a resolved version of the body of the <see cref="T:System.Linq.Expressions.LambdaExpression" /> that would be
                passed to
                <see
                    cref="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})" />
                .
            </summary>
            <value>The element selector.</value>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator.ItemName">
            <summary>
                Gets or sets the name of the items generated by this <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator" />.
            </summary>
            <remarks>
                Item names are inferred when a query expression is parsed, and they usually correspond to the variable names
                present in that expression.
                However, note that names are not necessarily unique within a <see cref="T:Core.Arango.Relinq.QueryModel" />. Use names only for
                readability and debugging, not for
                uniquely identifying <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> objects. To match an <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> with its
                references, use the
                <see cref="P:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource" /> property rather than the
                <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator.ItemName" />.
            </remarks>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator.ItemType">
            <summary>
                Gets or sets the type of the items generated by this <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator" />. The item type is an
                instantiation of
                <see cref="T:System.Linq.IGrouping`2" /> derived from the types of <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator.KeySelector" /> and
                <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator.ElementSelector" />.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <summary>
                Clones this clause, adjusting all <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> instances held by it as defined by
                <paramref name="cloneContext" />.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Core.Arango.Relinq.Clauses.CloneContext" />.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.GroupResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                Transforms all the expressions in this clause and its child objects via the given
                <paramref name="transformation" /> delegate.
            </summary>
            <param name="transformation">
                The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression" /> within this
                clause, and those expressions will be replaced with what the delegate returns.
            </param>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.IntersectResultOperator">
            <summary>
                Represents taking the mathematical intersection of a given set of items and the items returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Intersect" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.IntersectResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).Intersect(students2);
            </code>
            </example>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.IntersectResultOperator.Source2">
            <summary>
                Gets or sets the second source of this result operator, that is, an enumerable containing the items intersected
                with the input sequence.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.IntersectResultOperator.GetConstantSource2``1">
            <summary>
                Gets the value of <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.IntersectResultOperator.Source2" />, assuming <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.IntersectResultOperator.Source2" /> holds a <see cref="T:System.Linq.Expressions.ConstantExpression" />
                . If it doesn't,
                an <see cref="T:System.InvalidOperationException" /> is thrown.
            </summary>
            <returns>The constant value of <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.IntersectResultOperator.Source2" />.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.LastResultOperator">
            <summary>
                Represents taking only the last one of the items returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <remarks>
                "Last" query methods taking a predicate are represented as a combination of a <see cref="T:Core.Arango.Relinq.Clauses.WhereClause" /> and a
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.LastResultOperator" />.
            </remarks>
            <example>
                In C#, the "Last" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.LastResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).Last();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.LastResultOperator.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.LastResultOperator" />.
            </summary>
            <param name="returnDefaultWhenEmpty">The flag defines if a default expression should be regarded.</param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.LastResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.LongCountResultOperator">
            <summary>
                Represents counting the number of items returned by a query as a 64-bit number.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <remarks>
                "LongCount" query methods taking a predicate are represented as a combination of a <see cref="T:Core.Arango.Relinq.Clauses.WhereClause" /> and a
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.LongCountResultOperator" />.
            </remarks>
            <example>
                In C#, the "LongCount" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.LongCountResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).LongCount();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.LongCountResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.MaxResultOperator">
            <summary>
                Represents taking only the greatest one of the items returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <remarks>
                The semantics of "greatest" are defined by the query provider. "Max" query methods taking a selector are
                represented as a combination
                of a <see cref="T:Core.Arango.Relinq.Clauses.SelectClause" /> and a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.MaxResultOperator" />.
            </remarks>
            <example>
                In C#, the "Max" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.MaxResultOperator" />.
                <code>
            var query = (from s in Students
                         select s.ID).Max();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.MaxResultOperator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.MaxResultOperator" />.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.MaxResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.MinResultOperator">
            <summary>
                Represents taking only the smallest one of the items returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <remarks>
                The semantics of "smallest" are defined by the query provider. "Min" query methods taking a selector are
                represented as a combination
                of a <see cref="T:Core.Arango.Relinq.Clauses.SelectClause" /> and a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.MinResultOperator" />.
            </remarks>
            <example>
                In C#, the "Min" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.MinResultOperator" />.
                <code>
            var query = (from s in Students
                         select s.ID).Min();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.MinResultOperator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.MinResultOperator" />.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.MinResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.OfTypeResultOperator">
            <summary>
                Represents filtering the items returned by a query to only return those items that are of a specific type.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "OfType" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.OfTypeResultOperator" />.
                <code>
            var query = (from s in Students
                         select s.ID).OfType&lt;int&gt;();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.OfTypeResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.ReverseResultOperator">
            <summary>
                Represents reversing the sequence of items returned by of a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Reverse" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.ReverseResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).Reverse();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.ReverseResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.SequenceFromSequenceResultOperatorBase">
            <summary>
                Represents a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" /> that is executed on a sequence, returning a new sequence as its
                result.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.SequenceTypePreservingResultOperatorBase">
            <summary>
                Represents a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.SequenceFromSequenceResultOperatorBase" /> that is executed on a sequence, returning a new
                sequence with the same
                item type as its result.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.SingleResultOperator">
            <summary>
                Represents taking the single item returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Single" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.SingleResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).Single();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.SingleResultOperator.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.SingleResultOperator" />.
            </summary>
            <param name="returnDefaultWhenEmpty">The flag defines if a default expression should be regarded.</param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.SingleResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.SkipResultOperator">
            <summary>
                Represents skipping a number of the items returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Skip" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.SkipResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).Skip (3);
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.SkipResultOperator.GetConstantCount">
            <summary>
                Gets the constant <see cref="T:System.Int32" /> value of the <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.SkipResultOperator.Count" /> property, assuming it is a
                <see cref="T:System.Linq.Expressions.ConstantExpression" />. If it is
                not, an <see cref="T:System.InvalidOperationException" /> is thrown.
            </summary>
            <returns>The constant <see cref="T:System.Int32" /> value of the <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.SkipResultOperator.Count" /> property.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.SumResultOperator">
            <summary>
                Represents calculating the sum of the items returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Sum" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.SumResultOperator" />.
                <code>
            var query = (from s in Students
                         select s.ID).Sum();
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.SumResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.TakeResultOperator">
            <summary>
                Represents taking only a specific number of items returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Take" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.TakeResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).Take(3);
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.TakeResultOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.TakeResultOperator" />.
            </summary>
            <param name="count">The number of elements which should be returned.</param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.TakeResultOperator.GetConstantCount">
            <summary>
                Gets the constant <see cref="T:System.Int32" /> value of the <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.TakeResultOperator.Count" /> property, assuming it is a
                <see cref="T:System.Linq.Expressions.ConstantExpression" />. If it is
                not, an <see cref="T:System.InvalidOperationException" /> is thrown.
            </summary>
            <returns>The constant <see cref="T:System.Int32" /> value of the <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.TakeResultOperator.Count" /> property.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.UnionResultOperator">
            <summary>
                Represents forming the mathematical union of  a given set of items and the items returned by a query.
                This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
                In C#, the "Union" call in the following example corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.UnionResultOperator" />.
                <code>
            var query = (from s in Students
                         select s).Union(students2);
            </code>
            </example>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.ResultOperators.UnionResultOperator.Source2">
            <summary>
                Gets or sets the second source of this result operator, that is, an enumerable containing the items united with the
                input sequence.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.ResultOperators.UnionResultOperator.GetConstantSource2">
            <summary>
                Gets the value of <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.UnionResultOperator.Source2" />, assuming <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.UnionResultOperator.Source2" /> holds a <see cref="T:System.Linq.Expressions.ConstantExpression" />
                . If it doesn't,
                an <see cref="T:System.InvalidOperationException" /> is thrown.
            </summary>
            <returns>The constant value of <see cref="P:Core.Arango.Relinq.Clauses.ResultOperators.UnionResultOperator.Source2" />.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.ResultOperators.ValueFromSequenceResultOperatorBase">
            <summary>
                Represents a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" /> that is executed on a sequence, returning a scalar value or single
                item as its result.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.SelectClause">
            <summary>
                Represents the select part of a query, projecting data items according to some <see cref="P:Core.Arango.Relinq.Clauses.SelectClause.Selector" />.
            </summary>
            <example>
                In C#, the "select" clause in the following sample corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.SelectClause" />. "s" (a reference
                to the query source "s", see
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" />) is the <see cref="P:Core.Arango.Relinq.Clauses.SelectClause.Selector" /> expression:
                <code>
            var query = from s in Students
                        where s.First == "Hugo"
                        select s;
            </code>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.SelectClause.#ctor(System.Linq.Expressions.Expression)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.SelectClause" /> class.
            </summary>
            <param name="selector">The selector that projects the data items.</param>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.SelectClause.Selector">
            <summary>
                Gets the selector defining what parts of the data items are returned by the query.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.SelectClause.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                Transforms all the expressions in this clause and its child objects via the given
                <paramref name="transformation" /> delegate.
            </summary>
            <param name="transformation">
                The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression" /> within this
                clause, and those expressions will be replaced with what the delegate returns.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.SelectClause.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel)">
            <summary>
                Accepts the specified visitor by calling its <see cref="M:Core.Arango.Relinq.IQueryModelVisitor.VisitSelectClause(Core.Arango.Relinq.Clauses.SelectClause,Core.Arango.Relinq.QueryModel)" /> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.SelectClause.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <summary>
                Clones this clause.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Core.Arango.Relinq.Clauses.CloneContext" />.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.SelectClause.GetOutputDataInfo">
            <summary>
                Gets an <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo" /> object describing the data streaming out of this
                <see cref="T:Core.Arango.Relinq.Clauses.SelectClause" />. If a query ends with
                the <see cref="T:Core.Arango.Relinq.Clauses.SelectClause" />, this corresponds to the query's output data. If a query has
                <see cref="P:Core.Arango.Relinq.QueryModel.ResultOperators" />, the data
                is further modified by those operators. Use <see cref="M:Core.Arango.Relinq.QueryModel.GetOutputDataInfo" /> to obtain the real result
                type of
                a query model, including the <see cref="P:Core.Arango.Relinq.QueryModel.ResultOperators" />.
            </summary>
            <returns>
                Gets a <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo" /> object describing the data streaming out of this
                <see cref="T:Core.Arango.Relinq.Clauses.SelectClause" />.
            </returns>
            <remarks>
                The data streamed from a <see cref="T:Core.Arango.Relinq.Clauses.SelectClause" /> is always of type <see cref="T:System.Linq.IQueryable`1" /> instantiated
                with the type of <see cref="P:Core.Arango.Relinq.Clauses.SelectClause.Selector" /> as its generic parameter. Its
                <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo.ItemExpression" /> corresponds to the
                <see cref="P:Core.Arango.Relinq.Clauses.SelectClause.Selector" />.
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedData">
            <summary>
                Holds the data needed to represent the output or input of a part of a query in memory. This is mainly used for
                <see cref="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.ExecuteInMemory(Core.Arango.Relinq.Clauses.StreamedData.IStreamedData)" />. The data held by implementations of this interface can be either
                a value or a sequence.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.StreamedData.IStreamedData.DataInfo">
            <summary>
                Gets an object describing the data held by this <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedData" /> instance.
            </summary>
            <value>
                An <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo" /> object describing the data held by this <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedData" />
                instance.
            </value>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.StreamedData.IStreamedData.Value">
            <summary>
                Gets the value held by this <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedData" /> instance.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo">
            <summary>
                Describes the data streamed out of a <see cref="T:Core.Arango.Relinq.QueryModel" /> or <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" />.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo.DataType">
            <summary>
                Gets the type of the data described by this <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo" /> instance. For a sequence, this is a
                type implementing
                <see cref="T:System.Collections.Generic.IEnumerable`1" />, where <c>T</c> is instantiated with a concrete type. For a single value, this is the
                value type.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo.ExecuteQueryModel(Core.Arango.Relinq.QueryModel,Core.Arango.Relinq.IQueryExecutor)">
            <summary>
                Executes the specified <see cref="T:Core.Arango.Relinq.QueryModel" /> with the given <see cref="T:Core.Arango.Relinq.IQueryExecutor" />, calling either
                <see cref="M:Core.Arango.Relinq.IQueryExecutor.ExecuteScalar``1(Core.Arango.Relinq.QueryModel)" /> or <see cref="M:Core.Arango.Relinq.IQueryExecutor.ExecuteCollection``1(Core.Arango.Relinq.QueryModel)" />, depending on
                the type of data streamed
                from this interface.
            </summary>
            <param name="queryModel">The query model to be executed.</param>
            <param name="executor">The executor to use.</param>
            <returns>An <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedData" /> object holding the results of the query execution.</returns>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo.AdjustDataType(System.Type)">
            <summary>
                Returns a new <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo" /> of the same type as this instance, but with a new
                <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo.DataType" />.
            </summary>
            <param name="dataType">
                The type to use for the <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo.DataType" /> property. The type must be compatible with the data described by
                this
                <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo" />, otherwise an exception is thrown.
                The type may be a generic type definition if the <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo" /> supports generic types; in this
                case,
                the type definition is automatically closed with generic parameters to match the data described by this
                <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo" />.
            </param>
            <returns>
                A new <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo" /> of the same type as this instance, but with a new
                <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo.DataType" />.
            </returns>
            <exception cref="T:System.ArgumentException">
                The <paramref name="dataType" /> is not compatible with the data described by this
                <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo" />.
            </exception>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedScalarValueInfo">
            <summary>
                Describes a scalar value streamed out of a <see cref="T:Core.Arango.Relinq.QueryModel" /> or <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" />. A scalar
                value corresponds to a
                value calculated from the result set, as produced by <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.CountResultOperator" /> or
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.ContainsResultOperator" />, for instance.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequence">
            <summary>
                Holds the data needed to represent the output or input of a part of a query in memory. This is mainly used for
                <see cref="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.ExecuteInMemory(Core.Arango.Relinq.Clauses.StreamedData.IStreamedData)" />.  The data consists of a sequence of items.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequence.#ctor(System.Collections.IEnumerable,Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequence" /> class, setting the <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequence.Sequence" /> and
                <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequence.DataInfo" /> properties.
            </summary>
            <param name="sequence">The sequence.</param>
            <param name="streamedSequenceInfo">An instance of <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo" /> describing the sequence.</param>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequence.Sequence">
            <summary>
                Gets the current sequence for the <see cref="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.ExecuteInMemory(Core.Arango.Relinq.Clauses.StreamedData.IStreamedData)" /> operation. If
                the object is used as input, this
                holds the input sequence for the operation. If the object is used as output, this holds the result of the
                operation.
            </summary>
            <value>The current sequence.</value>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequence.GetTypedSequence``1">
            <summary>
                Gets the current sequence held by this object as well as an <see cref="T:System.Linq.Expressions.Expression" /> describing the
                sequence's items, throwing an exception if the object does not hold a sequence of items of type
                <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The expected item type of the sequence.</typeparam>
            <returns>
                The sequence and an <see cref="T:System.Linq.Expressions.Expression" /> describing its items.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                Thrown when the item type is not the expected type
                <typeparamref name="T" />.
            </exception>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo">
            <summary>
                Describes sequence data streamed out of a <see cref="T:Core.Arango.Relinq.QueryModel" /> or <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" />. Sequence
                data can be held by an object
                implementing <see cref="T:System.Collections.Generic.IEnumerable`1" />, and its items are described via a <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo.ItemExpression" />.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo.ResultItemType">
            <summary>
                Gets the type of the items returned by the sequence described by this object, as defined by <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo.DataType" />
                . Note that because
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> is covariant starting from .NET 4.0, this may be a more abstract type than what's
                returned by
                <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo.ItemExpression" />'s <see cref="P:System.Linq.Expressions.Expression.Type" /> property.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo.ItemExpression">
            <summary>
                Gets an expression that describes the structure of the items held by the sequence described by this object.
            </summary>
            <value>The expression for the sequence's items.</value>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo.DataType">
            <summary>
                Gets the type of the data described by this <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo" /> instance. This is a type
                implementing
                <see cref="T:System.Collections.Generic.IEnumerable`1" />, where <c>T</c> is instantiated with a concrete type.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo.AdjustDataType(System.Type)">
            <summary>
                Returns a new <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo" /> with an adjusted <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo.DataType" />.
            </summary>
            <param name="dataType">
                The type to use for the <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo.DataType" /> property. The type must be convertible from the previous type,
                otherwise
                an exception is thrown. The type may be a generic type definition; in this case,
                the type definition is automatically closed with the type of the <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo.ItemExpression" />.
            </param>
            <returns>
                A new <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo" /> with a new <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo.DataType" />.
            </returns>
            <exception cref="T:System.ArgumentException">
                The <paramref name="dataType" /> is not compatible with the items described by this
                <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedSequenceInfo" />.
            </exception>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedSingleValueInfo">
            <summary>
                Describes a single value streamed out of a <see cref="T:Core.Arango.Relinq.QueryModel" /> or <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" />. A single
                value corresponds to one
                item from the result set, as produced by <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.FirstResultOperator" /> or <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.SingleResultOperator" />,
                for instance.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedValue">
            <summary>
                Holds the data needed to represent the output or input of a part of a query in memory. This is mainly used for
                <see cref="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.ExecuteInMemory(Core.Arango.Relinq.Clauses.StreamedData.IStreamedData)" />.  The data is a single, non-sequence value and can only be
                consumed by result operators
                working with single values.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.StreamedData.StreamedValue.#ctor(System.Object,Core.Arango.Relinq.Clauses.StreamedData.StreamedValueInfo)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedValue" /> class, setting the <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedValue.Value" /> and
                <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedValue.DataInfo" /> properties.
            </summary>
            <param name="value">The value.</param>
            <param name="streamedValueInfo">A <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedValueInfo" /> describing the value.</param>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedValue.DataInfo">
            <summary>
                Gets an object describing the data held by this <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedValue" /> instance.
            </summary>
            <value>
                An <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedValueInfo" /> object describing the data held by this <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedValue" /> instance.
            </value>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedValue.Value">
            <summary>
                Gets the current value for the <see cref="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.ExecuteInMemory(Core.Arango.Relinq.Clauses.StreamedData.IStreamedData)" /> operation. If the
                object is used as input, this
                holds the input value for the operation. If the object is used as output, this holds the result of the operation.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.StreamedData.StreamedValue.GetTypedValue``1">
            <summary>
                Gets the value held by <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedValue.Value" />, throwing an exception if the value is not of type
                <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The expected type of the value.</typeparam>
            <returns><see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedValue.Value" />, cast to <typeparamref name="T" />.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedValue.Value" /> if not of the expected type.</exception>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedValueInfo">
            <summary>
                Describes a single or scalar value streamed out of a <see cref="T:Core.Arango.Relinq.QueryModel" /> or <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" />
                .
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedValueInfo.DataType">
            <summary>
                Gets the type of the data described by this <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo" /> instance. This is the type of the
                streamed value, or
                <see cref="T:System.Object" /> if the value is <see langword="null" />.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.StreamedData.StreamedValueInfo.ExecuteQueryModel(Core.Arango.Relinq.QueryModel,Core.Arango.Relinq.IQueryExecutor)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.StreamedData.StreamedValueInfo.AdjustDataType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.StreamedData.StreamedValueInfo.CloneWithNewDataType(System.Type)">
            <summary>
                Returns a new instance of the same <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedValueInfo" /> type with a different <see cref="P:Core.Arango.Relinq.Clauses.StreamedData.StreamedValueInfo.DataType" />.
            </summary>
            <param name="dataType">The new data type.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="dataType" /> cannot be used for the clone.</exception>
            <returns>A new instance of the same <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.StreamedValueInfo" /> type with the given <paramref name="dataType" />.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Clauses.WhereClause">
            <summary>
                Represents the where part of a query, filtering data items according to some <see cref="P:Core.Arango.Relinq.Clauses.WhereClause.Predicate" />.
            </summary>
            <example>
                In C#, the "where" clause in the following sample corresponds to a <see cref="T:Core.Arango.Relinq.Clauses.WhereClause" />:
                <ode>
                    var query = from s in Students
                    where s.First == "Hugo"
                    select s;
                </ode>
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.WhereClause.#ctor(System.Linq.Expressions.Expression)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Clauses.WhereClause" /> class.
            </summary>
            <param name="predicate">The predicate used to filter data items.</param>
        </member>
        <member name="P:Core.Arango.Relinq.Clauses.WhereClause.Predicate">
            <summary>
                Gets the predicate, the expression representing the where condition by which the data items are filtered
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.WhereClause.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel,System.Int32)">
            <summary>
                Accepts the specified visitor by calling its <see cref="M:Core.Arango.Relinq.IQueryModelVisitor.VisitWhereClause(Core.Arango.Relinq.Clauses.WhereClause,Core.Arango.Relinq.QueryModel,System.Int32)" /> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="index">
                The index of this clause in the <paramref name="queryModel" />'s
                <see cref="P:Core.Arango.Relinq.QueryModel.BodyClauses" /> collection.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.WhereClause.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                Transforms all the expressions in this clause and its child objects via the given
                <paramref name="transformation" /> delegate.
            </summary>
            <param name="transformation">
                The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression" /> within this
                clause, and those expressions will be replaced with what the delegate returns.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.Clauses.WhereClause.Clone(Core.Arango.Relinq.Clauses.CloneContext)">
            <summary>
                Clones this clause.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Core.Arango.Relinq.Clauses.CloneContext" />.</param>
            <returns></returns>
        </member>
        <member name="T:Core.Arango.Relinq.Collections.ChangeResistantObservableCollectionEnumerator`1">
            <summary>
                Provides a way to enumerate an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> while items are inserted, removed, or cleared
                in a consistent fashion.
            </summary>
            <typeparam name="T">The element type of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</typeparam>
            <remarks>
                This class subscribes to the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> event exposed by
                <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />
                and reacts on changes to the collection. If an item is inserted or removed before the current element, the
                enumerator will continue after
                the current element without regarding the new or removed item. If the current item is removed, the enumerator will
                continue with the item that
                previously followed the current item. If an item is inserted or removed after the current element, the enumerator
                will simply continue,
                including the newly inserted item and not including the removed item. If an item is moved or replaced, the
                enumeration will also continue
                with the item located at the next position in the sequence.
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Collections.IndexValuePair`1">
            <summary>
                Represents an item enumerated by
                <see cref="M:Core.Arango.Relinq.Collections.ObservableCollectionExtensions.AsChangeResistantEnumerableWithIndex``1(System.Collections.ObjectModel.ObservableCollection{``0})" />. This provides access
                to the <see cref="P:Core.Arango.Relinq.Collections.IndexValuePair`1.Index" /> as well as the <see cref="P:Core.Arango.Relinq.Collections.IndexValuePair`1.Value" /> of the enumerated item.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Collections.IndexValuePair`1.Index">
            <summary>
                Gets the index of the current enumerated item. Can only be called while enumerating, afterwards, it will throw an
                <see cref="T:System.ObjectDisposedException" />. If an item is inserted into or removed from the collection before the
                current item, this
                index will change.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Collections.IndexValuePair`1.Value">
            <summary>
                Gets the value of the current enumerated item. Can only be called while enumerating, afterwards, it will throw an
                <see cref="T:System.ObjectDisposedException" />.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Core.Arango.Relinq.Collections.MultiDictionaryExtensions">
            <summary>
                Defines extension methods that simplify working with a dictionary that has a collection-values item-type.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Collections.ObservableCollectionExtensions">
            <summary>
                Extension methods for <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Collections.ObservableCollectionExtensions.AsChangeResistantEnumerable``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
                Returns an instance of <see cref="T:System.Collections.Generic.IEnumerable`1" /> that represents this collection and can be enumerated even
                while the collection changes;
                the enumerator will adapt to the changes (see <see cref="T:Core.Arango.Relinq.Collections.ChangeResistantObservableCollectionEnumerator`1" />).
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Collections.ObservableCollectionExtensions.AsChangeResistantEnumerableWithIndex``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
                Returns an instance of <see cref="T:System.Collections.Generic.IEnumerable`1" /> that represents this collection and can be enumerated even
                while the collection changes;
                the enumerator will adapt to the changes (see <see cref="T:Core.Arango.Relinq.Collections.ChangeResistantObservableCollectionEnumerator`1" />). The
                enumerable will yield
                instances of type <see cref="T:Core.Arango.Relinq.Collections.IndexValuePair`1" />, which hold both the index and the value of the current item. If
                this collection changes
                while enumerating, <see cref="P:Core.Arango.Relinq.Collections.IndexValuePair`1.Index" /> will reflect those changes.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.DefaultQueryProvider">
            <summary>
                Represents a default implementation of <see cref="T:Core.Arango.Relinq.QueryProviderBase" /> that is automatically used by
                <see cref="T:Core.Arango.Relinq.QueryableBase`1" />
                unless a custom <see cref="T:System.Linq.IQueryProvider" /> is specified. The <see cref="T:Core.Arango.Relinq.DefaultQueryProvider" /> executes
                queries by parsing them into
                an instance of type <see cref="T:Core.Arango.Relinq.QueryModel" />, which is then passed to an implementation of
                <see cref="T:Core.Arango.Relinq.IQueryExecutor" /> to obtain the
                result set.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.DefaultQueryProvider.#ctor(System.Type,Core.Arango.Relinq.Parsing.Structure.IQueryParser,Core.Arango.Relinq.IQueryExecutor)">
            <summary>
                Initializes a new instance of <see cref="T:Core.Arango.Relinq.DefaultQueryProvider" /> using a custom <see cref="T:Core.Arango.Relinq.Parsing.Structure.IQueryParser" />.
            </summary>
            <param name="queryableType">
                A type implementing <see cref="T:System.Linq.IQueryable`1" />. This type is used to construct the chain of query operators. Must
                be a generic type
                definition.
            </param>
            <param name="queryParser">
                The <see cref="T:Core.Arango.Relinq.Parsing.Structure.IQueryParser" /> used to parse queries. Specify an instance of
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.QueryParser" /> for default behavior. See also
                <see cref="M:Core.Arango.Relinq.Parsing.Structure.QueryParser.CreateDefault" />.
            </param>
            <param name="executor">The <see cref="T:Core.Arango.Relinq.IQueryExecutor" /> used to execute queries against a specific query backend.</param>
        </member>
        <member name="P:Core.Arango.Relinq.DefaultQueryProvider.QueryableType">
            <summary>
                Gets the type of queryable created by this provider. This is the generic type definition of an implementation of
                <see cref="T:System.Linq.IQueryable`1" />
                (usually a subclass of <see cref="T:Core.Arango.Relinq.QueryableBase`1" />) with exactly one type argument.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.DefaultQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
                Creates a new <see cref="T:System.Linq.IQueryable" /> (of type <see cref="P:Core.Arango.Relinq.DefaultQueryProvider.QueryableType" /> with <typeparamref name="T" /> as its
                generic argument) that
                represents the query defined by <paramref name="expression" /> and is able to enumerate its results.
            </summary>
            <typeparam name="T">The type of the data items returned by the query.</typeparam>
            <param name="expression">
                An expression representing the query for which a <see cref="T:System.Linq.IQueryable`1" /> should be
                created.
            </param>
            <returns>An <see cref="T:System.Linq.IQueryable`1" /> that represents the query defined by <paramref name="expression" />.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.IQueryExecutor">
            <summary>
                Constitutes the bridge between re-linq and a concrete query provider implementation. Concrete providers implement
                this interface
                and <see cref="T:Core.Arango.Relinq.QueryProviderBase" /> calls the respective method of the interface implementation when a query is to
                be executed.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.IQueryExecutor.ExecuteScalar``1(Core.Arango.Relinq.QueryModel)">
            <summary>
                Executes the given <paramref name="queryModel" /> as a scalar query, i.e. as a query returning a scalar value of
                type <typeparamref name="T" />.
                The query ends with a scalar result operator, for example a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.CountResultOperator" /> or a
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.SumResultOperator" />.
            </summary>
            <typeparam name="T">The type of the scalar value returned by the query.</typeparam>
            <param name="queryModel">
                The <see cref="T:Core.Arango.Relinq.QueryModel" /> representing the query to be executed. Analyze this via an
                <see cref="T:Core.Arango.Relinq.IQueryModelVisitor" />.
            </param>
            <returns>A scalar value of type <typeparamref name="T" /> that represents the query's result.</returns>
            <remarks>
                The difference between <see cref="M:Core.Arango.Relinq.IQueryExecutor.ExecuteSingle``1(Core.Arango.Relinq.QueryModel,System.Boolean)" /> and <see cref="M:Core.Arango.Relinq.IQueryExecutor.ExecuteScalar``1(Core.Arango.Relinq.QueryModel)" /> is in the kind of object
                that is returned.
                <see cref="M:Core.Arango.Relinq.IQueryExecutor.ExecuteSingle``1(Core.Arango.Relinq.QueryModel,System.Boolean)" /> is used when a query that would otherwise return a collection result set should
                pick a single value from the
                set, for example the first, last, minimum, maximum, or only value in the set. <see cref="M:Core.Arango.Relinq.IQueryExecutor.ExecuteScalar``1(Core.Arango.Relinq.QueryModel)" /> is
                used when a value is
                calculated or aggregated from all the values in the collection result set. This applies to, for example, item
                counts, average calculations,
                checks for the existence of a specific item, and so on.
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.IQueryExecutor.ExecuteSingle``1(Core.Arango.Relinq.QueryModel,System.Boolean)">
            <summary>
                Executes the given <paramref name="queryModel" /> as a single object query, i.e. as a query returning a single
                object of type
                <typeparamref name="T" />.
                The query ends with a single result operator, for example a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.FirstResultOperator" /> or a
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.SingleResultOperator" />.
            </summary>
            <typeparam name="T">The type of the single value returned by the query.</typeparam>
            <param name="queryModel">
                The <see cref="T:Core.Arango.Relinq.QueryModel" /> representing the query to be executed. Analyze this via an
                <see cref="T:Core.Arango.Relinq.IQueryModelVisitor" />.
            </param>
            <param name="returnDefaultWhenEmpty">
                If <see langword="true" />, the executor must return a default value when its result set is empty;
                if <see langword="false" />, it should throw an <see cref="T:System.InvalidOperationException" /> when its result set is
                empty.
            </param>
            <returns>A single value of type <typeparamref name="T" /> that represents the query's result.</returns>
            <remarks>
                The difference between <see cref="M:Core.Arango.Relinq.IQueryExecutor.ExecuteSingle``1(Core.Arango.Relinq.QueryModel,System.Boolean)" /> and <see cref="M:Core.Arango.Relinq.IQueryExecutor.ExecuteScalar``1(Core.Arango.Relinq.QueryModel)" /> is in the kind of object
                that is returned.
                <see cref="M:Core.Arango.Relinq.IQueryExecutor.ExecuteSingle``1(Core.Arango.Relinq.QueryModel,System.Boolean)" /> is used when a query that would otherwise return a collection result set should
                pick a single value from the
                set, for example the first, last, minimum, maximum, or only value in the set. <see cref="M:Core.Arango.Relinq.IQueryExecutor.ExecuteScalar``1(Core.Arango.Relinq.QueryModel)" /> is
                used when a value is
                calculated or aggregated from all the values in the collection result set. This applies to, for example, item
                counts, average calculations,
                checks for the existence of a specific item, and so on.
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.IQueryExecutor.ExecuteCollection``1(Core.Arango.Relinq.QueryModel)">
            <summary>
                Executes the given <paramref name="queryModel" /> as a collection query, i.e. as a query returning objects of type
                <typeparamref name="T" />.
                The query does not end with a scalar result operator, but it can end with a single result operator, for example
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.SingleResultOperator" /> or <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.FirstResultOperator" />. In such a case, the returned enumerable
                must yield exactly
                one object (or none if the last result operator allows empty result sets).
            </summary>
            <typeparam name="T">The type of the items returned by the query.</typeparam>
            <param name="queryModel">
                The <see cref="T:Core.Arango.Relinq.QueryModel" /> representing the query to be executed. Analyze this via an
                <see cref="T:Core.Arango.Relinq.IQueryModelVisitor" />.
            </param>
            <returns>A scalar value of type <typeparamref name="T" /> that represents the query's result.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.IQueryModelVisitor">
            <summary>
                Defines an interface for visiting the clauses of a <see cref="T:Core.Arango.Relinq.QueryModel" />.
            </summary>
            <remarks>
                <para>
                    When implement this interface, implement <see cref="M:Core.Arango.Relinq.IQueryModelVisitor.VisitQueryModel(Core.Arango.Relinq.QueryModel)" />, then call <c>Accept</c> on every
                    clause that should
                    be visited. Child clauses, joins, orderings, and result operators are not visited automatically; they always
                    need to be explicitly visited
                    via <see cref="M:Core.Arango.Relinq.Clauses.IBodyClause.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel,System.Int32)" />, <see cref="M:Core.Arango.Relinq.Clauses.JoinClause.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel,System.Int32)" />,
                    <see cref="M:Core.Arango.Relinq.Clauses.Ordering.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel,Core.Arango.Relinq.Clauses.OrderByClause,System.Int32)" />,
                    <see cref="M:Core.Arango.Relinq.Clauses.ResultOperatorBase.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel,System.Int32)" />, and so on.
                </para>
                <para>
                    <see cref="T:Core.Arango.Relinq.QueryModelVisitorBase" /> provides a robust default implementation of this interface that can be
                    used as a base for other visitors.
                </para>
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.MemberBindings.FieldInfoBinding">
            <summary>
                Represents a <see cref="T:System.Reflection.FieldInfo" /> being bound to an associated <see cref="T:System.Linq.Expressions.Expression" /> instance. This
                binding's
                <see cref="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.MemberBindings.FieldInfoBinding.MatchesReadAccess(System.Reflection.MemberInfo)" /> method returns <see langword="true" /> only for the same <see cref="T:System.Reflection.FieldInfo" />
                the expression is bound to.
                <seealso cref="T:System.Linq.Expressions.MemberBinding" />
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.MemberBindings.MemberBinding">
            <summary>
                Represents a <see cref="T:System.Reflection.MemberInfo" /> being bound to an associated <see cref="T:System.Linq.Expressions.Expression" /> instance. This is
                used by the
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TransparentIdentifierRemovingExpressionVisitor" /> to represent assignments in constructor calls such as
                <c>new AnonymousType (a = 5)</c>,
                where <c>a</c> is the member of <c>AnonymousType</c> and <c>5</c> is the associated expression.
                The <see cref="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.MemberBindings.MemberBinding.MatchesReadAccess(System.Reflection.MemberInfo)" /> method can be used to check whether the member bound to an expression matches
                a given <see cref="T:System.Reflection.MemberInfo" />
                (considering read access). See the subclasses for details.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.MemberBindings.MethodInfoBinding">
            <summary>
                Represents a <see cref="T:System.Reflection.MethodInfo" /> being bound to an associated <see cref="T:System.Linq.Expressions.Expression" /> instance.
                <seealso cref="T:System.Linq.Expressions.MemberBinding" />
                This binding's
                <see cref="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.MemberBindings.MethodInfoBinding.MatchesReadAccess(System.Reflection.MemberInfo)" /> method returns <see langword="true" /> for the same <see cref="T:System.Reflection.MethodInfo" /> the
                expression is bound to or for a
                <see cref="T:System.Reflection.PropertyInfo" /> whose getter method is the <see cref="T:System.Reflection.MethodInfo" /> the expression is bound to.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.MemberBindings.PropertyInfoBinding">
            <summary>
                Represents a <see cref="T:System.Reflection.PropertyInfo" /> being bound to an associated <see cref="T:System.Linq.Expressions.Expression" /> instance.
                <seealso cref="T:System.Linq.Expressions.MemberBinding" />
                This binding's
                <see cref="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.MemberBindings.PropertyInfoBinding.MatchesReadAccess(System.Reflection.MemberInfo)" /> method returns <see langword="true" /> for the same <see cref="T:System.Reflection.PropertyInfo" />
                the expression is bound to
                or for its getter method's <see cref="T:System.Reflection.MethodInfo" />.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.MultiReplacingExpressionVisitor">
            <summary>
                Replaces <see cref="T:System.Linq.Expressions.Expression" /> nodes according to a given mapping specification. Expressions are also replaced
                within subqueries; the
                <see cref="T:Core.Arango.Relinq.QueryModel" /> is changed by the replacement operations, it is not copied. The replacement node is not
                recursively searched for
                occurrences of <see cref="T:System.Linq.Expressions.Expression" /> nodes to be replaced.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.PartialEvaluatingExpressionVisitor">
            <summary>
                Takes an expression tree and first analyzes it for evaluatable subtrees (using
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.EvaluatableTreeFindingExpressionVisitor" />), i.e.
                subtrees that can be pre-evaluated before actually generating the query. Examples for evaluatable subtrees are
                operations on constant
                values (constant folding), access to closure variables (variables used by the LINQ query that are defined in an
                outer scope), or method
                calls on known objects or their members. In a second step, it replaces all of the evaluatable subtrees (top-down
                and non-recursive) by
                their evaluated counterparts.
            </summary>
            <remarks>
                This visitor visits each tree node at most twice: once via the
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.EvaluatableTreeFindingExpressionVisitor" /> for analysis and once
                again to replace nodes if possible (unless the parent node has already been replaced).
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.PartialEvaluatingExpressionVisitor.EvaluateIndependentSubtrees(System.Linq.Expressions.Expression,Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter)">
            <summary>
                Takes an expression tree and finds and evaluates all its evaluatable subtrees.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.PartialEvaluatingExpressionVisitor.EvaluateSubtree(System.Linq.Expressions.Expression)">
            <summary>
                Evaluates an evaluatable <see cref="T:System.Linq.Expressions.Expression" /> subtree, i.e. an independent expression tree that is compilable
                and executable
                without any data being passed in. The result of the evaluation is returned as a <see cref="T:System.Linq.Expressions.ConstantExpression" />;
                if the subtree
                is already a <see cref="T:System.Linq.Expressions.ConstantExpression" />, no evaluation is performed.
            </summary>
            <param name="subtree">The subtree to be evaluated.</param>
            <returns>A <see cref="T:System.Linq.Expressions.ConstantExpression" /> holding the result of the evaluation.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.ReplacingExpressionVisitor">
            <summary>
                Replaces all nodes that equal a given <see cref="T:System.Linq.Expressions.Expression" /> with a replacement node. Expressions are also
                replaced within subqueries; the
                <see cref="T:Core.Arango.Relinq.QueryModel" /> is changed by the replacement operations, it is not copied. The replacement node is not
                recursively searched for
                occurrences of the <see cref="T:System.Linq.Expressions.Expression" /> to be replaced.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.SubQueryFindingExpressionVisitor">
            <summary>
                Preprocesses an expression tree for parsing. The preprocessing involves detection of sub-queries and VB-specific
                expressions.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformation">
            <summary>
                Transforms a given <see cref="T:System.Linq.Expressions.Expression" />. If the <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformation" /> can handle the
                <see cref="T:System.Linq.Expressions.Expression" />,
                it should return a new, transformed <see cref="T:System.Linq.Expressions.Expression" /> instance. Otherwise, it should return the input
                <paramref name="expression" />
                instance.
            </summary>
            <param name="expression">The expression to be transformed.</param>
            <returns>The result of the transformation, or <paramref name="expression" /> if no transformation was applied.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformerRegistry">
            <summary>
                Manages registration and lookup of <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" /> objects, and converts them to
                weakly typed <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformation" /> instances. Use this class together with
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TransformingExpressionVisitor" />
                in order to apply the registered transformers to an <see cref="T:System.Linq.Expressions.Expression" /> tree.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformerRegistry.CreateDefault">
            <summary>
                Creates an <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformerRegistry" /> with the default transformations provided by this library
                already registered.
                New transformers can be registered by calling <see cref="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformerRegistry.Register``1(Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer{``0})" />.
            </summary>
            <returns> A default <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformerRegistry" />.</returns>
            <remarks>
                Currently, the default registry contains:
                <list type="bullet">
                    <item>
                        <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.VBCompareStringExpressionTransformer" />
                    </item>
                    <item>
                        <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.VBInformationIsNothingExpressionTransformer" />
                    </item>
                    <item>
                        <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.InvocationOfLambdaExpressionTransformer" />
                    </item>
                    <item>
                        <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.NullableValueTransformer" />
                    </item>
                    <item>
                        <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.KeyValuePairNewExpressionTransformer" />
                    </item>
                    <item>
                        <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.DictionaryEntryNewExpressionTransformer" />
                    </item>
                    <item>
                        <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.TupleNewExpressionTransformer" />
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformerRegistry.Register``1(Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer{``0})">
            <summary>
                Registers the specified <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" /> for the transformer's
                <see cref="P:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1.SupportedExpressionTypes" />. If
                <see cref="P:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1.SupportedExpressionTypes" />
                returns <see langword="null" />, the <paramref name="transformer" /> is registered as a generic transformer which
                will be applied to all
                <see cref="T:System.Linq.Expressions.Expression" /> nodes.
            </summary>
            <typeparam name="T">
                The type of expressions handled by the <paramref name="transformer" />. This should be a type implemented by all
                expressions identified by <see cref="P:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1.SupportedExpressionTypes" />. For generic
                transformers, <typeparamref name="T" />
                must be <see cref="T:System.Linq.Expressions.Expression" />.
            </typeparam>
            <param name="transformer">The transformer to register.</param>
            <remarks>
                <para>
                    The order in which transformers are registered is the same order on which they will later be applied by
                    <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TransformingExpressionVisitor" />. When more than one transformer is registered for a certain
                    <see cref="T:System.Linq.Expressions.ExpressionType" />,
                    each of them will get a chance to transform a given <see cref="T:System.Linq.Expressions.Expression" />, until the first one returns a
                    new <see cref="T:System.Linq.Expressions.Expression" />.
                    At that point, the transformation will start again with the new <see cref="T:System.Linq.Expressions.Expression" /> (and, if the
                    expression's type has changed, potentially
                    different transformers).
                </para>
                <para>
                    When generic transformers are registered, they act as if they had been registered for all
                    <see cref="T:System.Linq.Expressions.ExpressionType" /> values (including
                    custom ones). They will be applied in the order registered, but only after all respective specific transformers
                    have run (without modifying
                    the expression, which would restart the transformation process with the new expression as explained above).
                </para>
                <para>
                    When an <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" /> is registered for an incompatible
                    <see cref="T:System.Linq.Expressions.ExpressionType" />, this is not detected until
                    the transformer is actually applied to an <see cref="T:System.Linq.Expressions.Expression" /> of that <see cref="T:System.Linq.Expressions.ExpressionType" />.
                </para>
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTranformationProvider">
            <summary>
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTranformationProvider" /> defines an API for classes returning
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformation" /> instances for specific
                <see cref="T:System.Linq.Expressions.Expression" /> objects. Usually, the <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformerRegistry" /> will be used when an
                implementation of this
                interface is needed.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTranformationProvider.GetTransformations(System.Linq.Expressions.Expression)">
            <summary>
                Gets the transformers for the given <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression" /> to be transformed.</param>
            <returns>
                A sequence containing <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformation" /> objects that should be applied to the
                <paramref name="expression" />. Must not
                be <see langword="null" />.
            </returns>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1">
            <summary>
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" /> is implemented by classes that transform <see cref="T:System.Linq.Expressions.Expression" />
                instances. The
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformerRegistry" /> manages registration of <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" />
                instances, and the
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TransformingExpressionVisitor" /> applies the transformations.
            </summary>
            <typeparam name="T">The type of expressions handled by this <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" /> implementation.</typeparam>
            <remarks>
                <para>
                    <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" /> is a convenience interface that provides strong typing, whereas
                    <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformation" /> only operates on <see cref="T:System.Linq.Expressions.Expression" /> instances.
                </para>
                <para>
                    <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" /> can be used together with the
                    <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TransformingExpressionVisitor" /> class by using the
                    <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformerRegistry" /> class as the transformation provider.
                    <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformerRegistry" /> converts
                    strongly typed <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" /> instances to weakly typed
                    <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformation" /> delegate instances.
                </para>
            </remarks>
        </member>
        <member name="P:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1.SupportedExpressionTypes">
            <summary>
                Gets the expression types supported by this <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" />.
            </summary>
            <value>
                The supported expression types. Return <see langword="null" /> to support all expression types. (This is only
                sensible when
                <typeparamref name="T" /> is <see cref="T:System.Linq.Expressions.Expression" />.)
            </value>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1.Transform(`0)">
            <summary>
                Transforms a given <see cref="T:System.Linq.Expressions.Expression" />. If the implementation can handle the <see cref="T:System.Linq.Expressions.Expression" />,
                it should return a new, transformed <see cref="T:System.Linq.Expressions.Expression" /> instance. Otherwise, it should return the input
                <paramref name="expression" /> instance.
            </summary>
            <param name="expression">The expression to be transformed.</param>
            <returns>The result of the transformation, or <paramref name="expression" /> if no transformation was applied.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.AttributeEvaluatingExpressionTransformer">
            <summary>
                Dynamically discovers attributes implementing the <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.AttributeEvaluatingExpressionTransformer.IMethodCallExpressionTransformerAttribute" />
                interface on methods and get accessors
                invoked by <see cref="T:System.Linq.Expressions.MethodCallExpression" /> or <see cref="T:System.Linq.Expressions.MemberExpression" /> instances and applies the
                respective
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" />.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.AttributeEvaluatingExpressionTransformer.IMethodCallExpressionTransformerAttribute">
            <summary>
                Defines an interface for attributes providing an <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" /> for a given
                <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
            <remarks>
                <para>
                    <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.AttributeEvaluatingExpressionTransformer" /> detects attributes implementing this interface while
                    expressions are parsed
                    and uses the <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" /> returned by <see cref="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.AttributeEvaluatingExpressionTransformer.IMethodCallExpressionTransformerAttribute.GetExpressionTransformer(System.Linq.Expressions.MethodCallExpression)" /> to
                    modify the expressions.
                </para>
                <para>
                    Only one attribute instance implementing <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.AttributeEvaluatingExpressionTransformer.IMethodCallExpressionTransformerAttribute" /> must be
                    applied to a single method or property
                    get accessor.
                </para>
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.DictionaryEntryNewExpressionTransformer">
            <summary>
                Detects <see cref="T:System.Linq.Expressions.NewExpression" /> nodes for <see cref="T:System.Collections.DictionaryEntry" /> and adds <see cref="T:System.Reflection.MemberInfo" />
                metadata to those nodes.
                This allows LINQ providers to match member access and constructor arguments more easily.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.InvocationOfLambdaExpressionTransformer">
            <summary>
                Detects expressions invoking a <see cref="T:System.Linq.Expressions.LambdaExpression" /> and replaces them with the body of that
                <see cref="T:System.Linq.Expressions.LambdaExpression" /> (with the parameter references replaced with the invocation arguments).
                Providers use this transformation to be able to handle queries with <see cref="T:System.Linq.Expressions.InvocationExpression" /> instances.
            </summary>
            <remarks>
                When the <see cref="T:System.Linq.Expressions.InvocationExpression" /> is applied to a delegate instance (rather than a
                <see cref="T:System.Linq.Expressions.LambdaExpression" />), the <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.InvocationOfLambdaExpressionTransformer" /> ignores it.
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.KeyValuePairNewExpressionTransformer">
            <summary>
                Detects <see cref="T:System.Linq.Expressions.NewExpression" /> nodes for <see cref="T:System.Collections.Generic.KeyValuePair`2" /> and adds
                <see cref="T:System.Reflection.MemberInfo" /> metadata to those nodes.
                This allows LINQ providers to match member access and constructor arguments more easily.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.MemberAddingNewExpressionTransformerBase">
            <summary>
                Provides a base class for transformers detecting <see cref="T:System.Linq.Expressions.NewExpression" /> nodes for tuple types and adding
                <see cref="T:System.Reflection.MemberInfo" /> metadata
                to those nodes. This allows LINQ providers to match member access and constructor arguments more easily.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.MethodCallExpressionTransformerAttribute">
            <summary>
                Chooses a given <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" /> for a specific method (or property get accessor).
            </summary>
            <remarks>
                The <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" /> must have a default constructor. To choose a transformer that does not
                have a default constructor,
                create your own custom attribute class implementing
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.AttributeEvaluatingExpressionTransformer.IMethodCallExpressionTransformerAttribute" />.
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.NullableValueTransformer">
            <summary>
                Replaces calls to <see cref="P:System.Nullable`1.Value" /> and <see cref="P:System.Nullable`1.HasValue" /> with casts and null
                checks. This allows LINQ providers
                to treat nullables like reference types.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.TupleNewExpressionTransformer">
            <summary>
                Detects <see cref="T:System.Linq.Expressions.NewExpression" /> nodes for the .NET tuple types and adds <see cref="T:System.Reflection.MemberInfo" /> metadata to
                those nodes.
                This allows LINQ providers to match member access and constructor arguments more easily.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.VBCompareStringExpressionTransformer">
            <summary>
                Detects expressions calling the CompareString method used by Visual Basic .NET, and replaces them with
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.VBStringComparisonExpression" /> instances. Providers use this transformation to be able to handle VB
                string comparisons
                more easily. See <see cref="T:Core.Arango.Relinq.Clauses.Expressions.VBStringComparisonExpression" /> for details.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.PredefinedTransformations.VBInformationIsNothingExpressionTransformer">
            <summary>
                Detects expressions calling the Information.IsNothing (...) method used by Visual Basic .NET, and replaces them
                with
                <see cref="T:System.Linq.Expressions.BinaryExpression" /> instances comparing with <see langword="null" />. Providers use this transformation
                to be able to
                handle queries using IsNothing (...) more easily.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TransformingExpressionVisitor">
            <summary>
                Applies <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformation" /> delegates obtained from an
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTranformationProvider" /> to an expression tree.
                The transformations occur in post-order (transforming child <see cref="T:System.Linq.Expressions.Expression" /> nodes before parent nodes).
                When a transformation changes
                the current <see cref="T:System.Linq.Expressions.Expression" />, its child nodes and itself will be revisited (and may be transformed again).
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TransparentIdentifierRemovingExpressionVisitor">
            <summary>
                Replaces expression patterns of the form <c>new T { x = 1, y = 2 }.x</c> (<see cref="T:System.Linq.Expressions.MemberInitExpression" />) or
                <c>new T ( x = 1, y = 2 ).x</c> (<see cref="T:System.Linq.Expressions.NewExpression" />) to <c>1</c> (or <c>2</c> if <c>y</c> is accessed
                instead of <c>x</c>).
                Expressions are also replaced within subqueries; the <see cref="T:Core.Arango.Relinq.QueryModel" /> is changed by the replacement
                operations, it is not copied.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.EvaluatableExpressionFilterBase">
            <summary>
                Base class for typical implementations of the <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter" />.
            </summary>
            <seealso cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter" />
            <threadsafety static="true" instance="true" />
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.EvaluatableTreeFindingExpressionVisitor">
            <summary>
                Analyzes an expression tree by visiting each of its nodes, finding those subtrees that can be evaluated without
                modifying the meaning of
                the tree.
            </summary>
            <remarks>
                An expression node/subtree is evaluatable if:
                <list type="bullet">
                    <item>it is not a <see cref="T:System.Linq.Expressions.ParameterExpression" /> or any non-standard expression, </item>
                    <item>it is not a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that involves an <see cref="T:System.Linq.IQueryable" />, and</item>
                    <item>it does not have any of those non-evaluatable expressions as its children.</item>
                </list>
                <para>
                    <see cref="T:System.Linq.Expressions.ParameterExpression" /> nodes are not evaluatable because they usually identify the flow of
                    some information from one query node to the next.
                </para>
                <para>
                    <see cref="T:System.Linq.Expressions.MethodCallExpression" /> nodes that involve <see cref="T:System.Linq.IQueryable" /> parameters or object instances
                    are not evaluatable because they
                    should usually be translated into the target query syntax.
                </para>
                <para>
                    In .NET 3.5, non-standard expressions are not evaluatable because they cannot be compiled and evaluated by
                    LINQ.
                    In .NET 4.0, non-standard expressions can be evaluated if they can be reduced to an evaluatable expression.
                </para>
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.EvaluatableTreeFindingExpressionVisitor.IsCurrentExpressionEvaluatable(System.Linq.Expressions.Expression)">
            <summary>
                Determines whether the given <see cref="T:System.Linq.Expressions.Expression" /> is one of the expressions defined by
                <see cref="T:System.Linq.Expressions.ExpressionType" /> for which
                <see cref="T:System.Linq.Expressions.ExpressionVisitor" /> has a dedicated Visit method. <see cref="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)" />
                handles those by calling the respective Visit method.
            </summary>
            <param name="expression">The expression to check. Must not be <see langword="null" />.</param>
            <returns>
                <see langword="true" /> if <paramref name="expression" /> is one of the expressions defined by
                <see cref="T:System.Linq.Expressions.ExpressionType" /> and
                <see cref="T:System.Linq.Expressions.ExpressionVisitor" /> has a dedicated Visit method for it; otherwise, <see langword="false" />.
                Note that <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />-type expressions are considered 'not supported' and will also
                return <see langword="false" />.
            </returns>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter">
            <summary>
                The <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter" /> interface defines an extension point for disabling partial
                evaluation on specific <see cref="T:System.Linq.Expressions.Expression" /> nodes.
            </summary>
            <remarks>
                <para>
                    Implement the individual evaluation methods and return <see langword="false" /> to mark a specfic
                    <see cref="T:System.Linq.Expressions.Expression" /> node as not partially
                    evaluatable. Note that the partial evaluation infrastructure will take care of visiting an
                    <see cref="T:System.Linq.Expressions.Expression" /> node's children,
                    so the determination can usually be constrained to the attributes of the <see cref="T:System.Linq.Expressions.Expression" /> node itself.
                </para>
                <para>
                    Use the <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.EvaluatableExpressionFilterBase" /> type as a base class for filter implementations that
                    only require testing a few
                    <see cref="T:System.Linq.Expressions.Expression" /> node types, e.g. to disable partial evaluation for individual method calls.
                </para>
            </remarks>
            <seealso cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.EvaluatableExpressionFilterBase" />
            <threadsafety static="true" instance="true" />
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.NullEvaluatableExpressionFilter">
            <summary>
                Implementation of the null-object pattern for <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter" />.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.RelinqExpressionVisitor">
            <summary>
                Provides a base class for expression visitors used with re-linq, adding support for
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.SubQueryExpression" /> and <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" />.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Collections.Generic.IList{System.Reflection.MemberInfo})">
            <summary>
                Adjusts the arguments for a <see cref="T:System.Linq.Expressions.NewExpression" /> so that they match the given members.
            </summary>
            <param name="arguments">The arguments to adjust.</param>
            <param name="members">The members defining the required argument types.</param>
            <returns>
                A sequence of expressions that are equivalent to <paramref name="arguments" />, but converted to the associated
                member's
                result type if needed.
            </returns>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser">
            <summary>
                Parses an expression tree into a chain of <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> objects after executing a sequence of
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IExpressionTreeProcessor" /> objects.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.#ctor(Core.Arango.Relinq.Parsing.Structure.INodeTypeProvider,Core.Arango.Relinq.Parsing.Structure.IExpressionTreeProcessor)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> class with a custom
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.INodeTypeProvider" /> and
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IExpressionTreeProcessor" /> implementation.
            </summary>
            <param name="nodeTypeProvider">
                The <see cref="T:Core.Arango.Relinq.Parsing.Structure.INodeTypeProvider" /> to use when parsing <see cref="T:System.Linq.Expressions.Expression" /> trees. Use
                <see cref="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.CreateDefaultNodeTypeProvider" /> to create an instance of <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider" /> that
                already includes all
                default node types. (The <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider" /> can be customized as needed by adding or removing
                <see cref="P:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider.InnerProviders" />).
            </param>
            <param name="processor">
                The <see cref="T:Core.Arango.Relinq.Parsing.Structure.IExpressionTreeProcessor" /> to apply to <see cref="T:System.Linq.Expressions.Expression" /> trees before parsing their nodes.
                Use
                <see cref="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.CreateDefaultProcessor(Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTranformationProvider,Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter)" /> to create an instance of <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor" /> that
                already includes
                the default steps. (The <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor" /> can be customized as needed by adding or
                removing
                <see cref="P:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor.InnerProcessors" />).
            </param>
        </member>
        <member name="P:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.NodeTypeProvider">
            <summary>
                Gets the node type provider used to parse <see cref="T:System.Linq.Expressions.MethodCallExpression" /> instances in <see cref="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.ParseTree(System.Linq.Expressions.Expression)" />
                .
            </summary>
            <value>The node type provider.</value>
        </member>
        <member name="P:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.Processor">
            <summary>
                Gets the processing steps used by <see cref="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.ParseTree(System.Linq.Expressions.Expression)" /> to process the <see cref="T:System.Linq.Expressions.Expression" /> tree before
                analyzing its structure.
            </summary>
            <value>The processing steps.</value>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.CreateDefaultNodeTypeProvider">
            <summary>
                Creates a default <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider" /> that already has all expression node parser defined by
                the re-linq assembly
                registered. Users can add inner providers to register their own expression node parsers.
            </summary>
            <returns>
                A default <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider" /> that already has all expression node parser defined by the
                re-linq assembly
                registered.
            </returns>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.CreateDefaultProcessor(Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTranformationProvider,Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter)">
            <summary>
                Creates a default <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor" /> that already has the expression tree processing
                steps defined by the re-linq assembly
                registered. Users can insert additional processing steps.
            </summary>
            <param name="tranformationProvider">
                The tranformation provider to be used by the <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor" /> included
                in the result set. Use <see cref="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformerRegistry.CreateDefault" /> to create a default provider.
            </param>
            <param name="evaluatableExpressionFilter">
                The expression filter used by the <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.PartialEvaluatingExpressionTreeProcessor" /> included in the result
                set.
                Use <see langword="null" /> to indicate that no custom filtering should be applied.
            </param>
            <returns>
                A default <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor" /> that already has all expression tree processing steps
                defined by the re-linq assembly
                registered.
            </returns>
            <remarks>
                The following steps are included:
                <list type="bullet">
                    <item>
                        <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.PartialEvaluatingExpressionTreeProcessor" />
                    </item>
                    <item>
                        <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor" /> (parameterized with
                        <paramref name="tranformationProvider" />)
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.ParseTree(System.Linq.Expressions.Expression)">
            <summary>
                Parses the given <paramref name="expressionTree" /> into a chain of <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> instances, using
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry" /> to convert expressions to nodes.
            </summary>
            <param name="expressionTree">The expression tree to parse.</param>
            <returns>A chain of <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> instances representing the <paramref name="expressionTree" />.</returns>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.GetQueryOperatorExpression(System.Linq.Expressions.Expression)">
            <summary>
                Gets the query operator <see cref="T:System.Linq.Expressions.MethodCallExpression" /> represented by <paramref name="expression" />. If
                <paramref name="expression" />
                is already a <see cref="T:System.Linq.Expressions.MethodCallExpression" />, that is the assumed query operator. If
                <paramref name="expression" /> is a
                <see cref="T:System.Linq.Expressions.MemberExpression" /> and the member's getter is registered with <see cref="P:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.NodeTypeProvider" />, a
                corresponding
                <see cref="T:System.Linq.Expressions.MethodCallExpression" /> is constructed and returned. Otherwise, <see langword="null" /> is returned.
            </summary>
            <param name="expression">The expression to get a query operator expression for.</param>
            <returns>
                A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> to be parsed as a query operator, or <see langword="null" /> if the
                expression does not represent
                a query operator.
            </returns>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.InferAssociatedIdentifierForSource(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                Infers the associated identifier for the source expression node contained in methodCallExpression.Arguments[0]. For
                example, for the
                call chain "<c>source.Where (i => i > 5)</c>" (which actually reads "<c>Where (source, i => i > 5</c>"), the
                identifier "i" is associated
                with the node generated for "source". If no identifier can be inferred, <see langword="null" /> is returned.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor">
            <summary>
                Implements <see cref="T:Core.Arango.Relinq.Parsing.Structure.IExpressionTreeProcessor" /> by storing a list of inner
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IExpressionTreeProcessor" /> instances.
                The <see cref="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor.Process(System.Linq.Expressions.Expression)" /> method calls each inner instance in the order defined by the
                <see cref="P:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor.InnerProcessors" /> property. This is an
                implementation of the Composite Pattern.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.NullExpressionTreeProcessor">
            <summary>
                Implements the <see cref="T:Core.Arango.Relinq.Parsing.Structure.IExpressionTreeProcessor" /> interface by doing nothing in the <see cref="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.NullExpressionTreeProcessor.Process(System.Linq.Expressions.Expression)" />
                method. This is an
                implementation of the Null Object Pattern.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.PartialEvaluatingExpressionTreeProcessor">
            <summary>
                Analyzes an <see cref="T:System.Linq.Expressions.Expression" /> tree for sub-trees that are evaluatable in-memory, and evaluates those
                sub-trees.
            </summary>
            <remarks>
                The <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.PartialEvaluatingExpressionTreeProcessor" /> uses the
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.PartialEvaluatingExpressionVisitor" /> for partial evaluation.
                It performs two visiting runs over the <see cref="T:System.Linq.Expressions.Expression" /> tree.
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor">
            <summary>
                Applies a given set of transformations to an <see cref="T:System.Linq.Expressions.Expression" /> tree. The transformations are provided by an
                instance of
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTranformationProvider" /> (eg., <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformerRegistry" />).
            </summary>
            <remarks>
                The <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor" /> uses the <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.TransformingExpressionVisitor" /> to
                apply the transformations.
                It performs a single visiting run over the <see cref="T:System.Linq.Expressions.Expression" /> tree.
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor.#ctor(Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTranformationProvider)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor" /> class.
            </summary>
            <param name="provider">
                A class providing the transformations to apply to the tree, eg., an instance of
                <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformerRegistry" />.
            </param>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IExpressionTreeProcessor">
            <summary>
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IExpressionTreeProcessor" /> is implemented by classes that represent steps in the process of parsing
                the structure
                of an <see cref="T:System.Linq.Expressions.Expression" /> tree. <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> applies a series of these steps to the
                <see cref="T:System.Linq.Expressions.Expression" />
                tree before analyzing the query operators and creating a <see cref="T:Core.Arango.Relinq.QueryModel" />.
            </summary>
            <remarks>
                <para>
                    There are predefined implementations of <see cref="T:Core.Arango.Relinq.Parsing.Structure.IExpressionTreeProcessor" /> that should only be left out
                    when parsing an
                    <see cref="T:System.Linq.Expressions.Expression" /> tree when there are very good reasons to do so.
                </para>
                <para>
                    <see cref="T:Core.Arango.Relinq.Parsing.Structure.IExpressionTreeProcessor" /> can be implemented to provide custom, complex transformations on an
                    <see cref="T:System.Linq.Expressions.Expression" />
                    tree. For performance reasons, avoid adding too many steps each of which visits the whole tree. For
                    simple transformations, consider using <see cref="T:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTransformer`1" /> and
                    <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor" /> - which can
                    batch several transformations into a single expression tree visiting run - rather than implementing a dedicated
                    <see cref="T:Core.Arango.Relinq.Parsing.Structure.IExpressionTreeProcessor" />.
                </para>
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.INodeTypeProvider">
            <summary>
                Provides a common interface for classes mapping a <see cref="T:System.Reflection.MethodInfo" /> to the respective
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" />
                type. Implementations are used by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> is
                encountered to
                instantiate the right <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> for the given method.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.INodeTypeProvider.IsRegistered(System.Reflection.MethodInfo)">
            <summary>
                Determines whether a node type for the given <see cref="T:System.Reflection.MethodInfo" /> can be returned by this
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.INodeTypeProvider" />.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.INodeTypeProvider.GetNodeType(System.Reflection.MethodInfo)">
            <summary>
                Gets the type of <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> that matches the given <paramref name="method" />, returning
                <see langword="null" />
                if none can be found.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.AggregateExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for the
                <see cref="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})" /> and <see cref="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" /> methods.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.AggregateFromSeedExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for the
                <see cref="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})" />,
                <see cref="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})" />,
                <see cref="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />, and
                <see cref="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                methods.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.AllExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for the
                <see
                    cref="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
                and
                <see cref="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
                methods.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.AnyExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for the
                <see cref="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})" />,
                <see
                    cref="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
                ,
                <see cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" />, and
                <see cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
                methods.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.AsQueryableExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for <see cref="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" /> or
                <see cref="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" />.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it will not modify the <see cref="T:Core.Arango.Relinq.QueryModel" />, i.e. the call to
                <see cref="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" />
                will be removed given how it is transparent to the process of executing the query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.AverageExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for the different overloads of
                <see cref="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})" />.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.CastExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see cref="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)" />.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext">
            <summary>
                Encapsulates contextual information used while generating clauses from <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> instances.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ConcatExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see
                    cref="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it usually follows (or replaces) a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectExpressionNode" /> of an
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ContainsExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see cref="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)" /> and
                <see cref="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" />.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.CountExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see cref="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})" />,
                <see
                    cref="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
                ,
                for the Count properties of <see cref="T:System.Collections.Generic.List`1" />, <see cref="T:System.Collections.ArrayList" />,
                <see cref="T:System.Collections.Generic.ICollection`1" />,
                and <see cref="T:System.Collections.ICollection" />, and for the <see cref="P:System.Array.Length" /> property of arrays.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.DefaultIfEmptyExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see cref="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})" /> and
                <see cref="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)" /> and
                <see cref="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" /> and
                <see cref="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" />
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it usually follows (or replaces) a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectExpressionNode" /> of an
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.DistinctExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see cref="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})" />.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it usually follows (or replaces) a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectExpressionNode" /> of an
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ExceptExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see
                    cref="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it usually follows (or replaces) a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectExpressionNode" /> of an
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ExpressionNodeInstantiationException">
            <summary>
                Thrown whan an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> parser cannot be instantiated for a query. Note that this
                <see cref="T:System.Exception" /> is not serializable
                and intended to be caught in the call-site where it will then replaced by a different (serializable) exception.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ExpressionResolver">
            <summary>
                Resolves an expression using <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)" />, removing transparent identifiers and detecting
                subqueries
                in the process. This is used by methods such as <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectExpressionNode.GetResolvedSelector(Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)" />, which are
                used when a clause is created from an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" />.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.FirstExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see cref="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})" />,
                <see
                    cref="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
                ,
                <see cref="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})" /> or
                <see
                    cref="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.GroupByExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for the different
                <see cref="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
                overloads that do not take a result selector. The overloads with a result selector are represented by
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.GroupByWithResultSelectorExpressionNode" />.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.GroupByWithResultSelectorExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for the different
                <see cref="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
                overloads that do take a result selector. The overloads without a result selector are represented by
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.GroupByExpressionNode" />.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
            </summary>
            <remarks>
                The GroupBy overloads with result selector are parsed as if they were a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectExpressionNode" />
                following a
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.GroupByExpressionNode" />:
                <code>
            x.GroupBy (k => key, e => element, (k, g) => result)
            </code>
                is therefore equivalent to:
                <code>
            c.GroupBy (k => key, e => element).Select (grouping => resultSub)
            </code>
                where resultSub is the same as result with k and g substituted with grouping.Key and grouping, respectively.
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.GroupJoinExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see
                    cref="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})" />
                or
                <see
                    cref="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode">
            <summary>
                Interface for classes representing structural parts of an <see cref="T:System.Linq.Expressions.Expression" /> tree.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode.Source">
            <summary>
                Gets the source <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> that streams data into this node.
            </summary>
            <value>The source <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" />, or <see langword="null" /> if this node is the end of the chain.</value>
        </member>
        <member name="P:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode.AssociatedIdentifier">
            <summary>
                Gets the identifier associated with this <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" />. <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> tries
                to find the identifier
                that was originally associated with this node in the query written by the user by analyzing the parameter names of
                the next expression in the
                method call chain.
            </summary>
            <value>The associated identifier.</value>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                Resolves the specified <paramref name="expressionToBeResolved" /> by replacing any occurrence of
                <paramref name="inputParameter" />
                by the result of the projection of this <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" />. The result is an <see cref="T:System.Linq.Expressions.Expression" />
                that goes all the
                way to an <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" />.
            </summary>
            <param name="inputParameter">
                The parameter representing the input data streaming into an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" />. This is replaced
                by the projection data coming out of this <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" />.
            </param>
            <param name="expressionToBeResolved">
                The expression to be resolved. Any occurrence of <paramref name="inputParameter" /> in this expression
                is replaced.
            </param>
            <param name="clauseGenerationContext">
                Context information used during the current parsing process. This structure maps
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode" />s  to the clauses created from them. Implementers that also implement
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode" /> (such as  <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode" /> or
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectManyExpressionNode" />) must add
                their clauses to the mapping in <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode.Apply(Core.Arango.Relinq.QueryModel,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)" /> if they want to be able to implement <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)" />
                correctly.
            </param>
            <returns>
                An equivalent of <paramref name="expressionToBeResolved" /> with each occurrence of
                <paramref name="inputParameter" /> replaced by
                the projection data streaming out of this <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                This node does not support this operation because it does not stream any data to subsequent nodes.
            </exception>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode.Apply(Core.Arango.Relinq.QueryModel,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                Applies this <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> to the specified query model. Nodes can add or replace clauses, add or
                replace expressions,
                add or replace <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" /> objects, or even create a completely new <see cref="T:Core.Arango.Relinq.QueryModel" />
                , depending on their semantics.
            </summary>
            <param name="queryModel">The query model this node should be applied to.</param>
            <param name="clauseGenerationContext">
                Context information used during the current parsing process. This structure maps
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode" />s to the clauses created from them. Implementers that
                also implement <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode" /> (such as
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode" /> or <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectManyExpressionNode" />) must add their clauses to the
                mapping in
                <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode.Apply(Core.Arango.Relinq.QueryModel,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)" /> in order to be able to implement <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)" /> correctly.
            </param>
            <returns>
                The modified <paramref name="queryModel" /> or a new <see cref="T:Core.Arango.Relinq.QueryModel" /> that reflects the changes made
                by this node.
            </returns>
            <remarks>
                For <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode" /> objects, which mark the end of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain,
                this method must not be called.
                Instead, use <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode.CreateMainFromClause(Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)" /> to generate a
                <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" /> and instantiate a new
                <see cref="T:Core.Arango.Relinq.QueryModel" /> with that clause.
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IntersectExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see
                    cref="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it usually follows (or replaces) a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectExpressionNode" /> of an
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode">
            <summary>
                Interface for classes representing query source parts of an <see cref="T:System.Linq.Expressions.Expression" /> tree.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.JoinExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see
                    cref="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})" />
                or
                <see
                    cref="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.LastExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see cref="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})" />,
                <see
                    cref="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
                ,
                <see cref="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})" /> or
                <see
                    cref="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.LongCountExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see cref="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})" />,
                <see
                    cref="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
                ,
                and for the <see cref="P:System.Array.Length" /> property of arrays.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode">
            <summary>
                Represents the first expression in a LINQ query, which acts as the main query source.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="P:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode.ParsedExpression" /> tree is parsed.
                This node usually marks the end (i.e. the first node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that represents a
                query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MaxExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for <see cref="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})" /> or
                <see cref="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase">
            <summary>
                Base class for <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> implementations that represent instantiations of
                <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase.WrapQueryModelAfterEndOfQuery(Core.Arango.Relinq.QueryModel,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                Wraps the <paramref name="queryModel" /> into a subquery after a node that indicates the end of the query (
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ResultOperatorExpressionNodeBase" /> or <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.GroupByExpressionNode" />). Override this method
                when implementing a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> that does not need a subquery to be created if it occurs after
                the query end.
            </summary>
            <remarks>
                <para>
                    When an ordinary node follows a result operator or group node, it cannot simply append its clauses to the
                    <paramref name="queryModel" />
                    because semantically, the result operator (or grouping) must be executed _before_ the clause. Therefore, in
                    such scenarios, we wrap
                    the current query model into a <see cref="T:Core.Arango.Relinq.Clauses.Expressions.SubQueryExpression" /> that we put into the
                    <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" /> of a new
                    <see cref="T:Core.Arango.Relinq.QueryModel" />.
                </para>
                <para>
                    This method also changes the <see cref="P:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase.Source" /> of this node because logically, all <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)" />
                    operations must be handled
                    by the new <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" /> holding the <see cref="T:Core.Arango.Relinq.Clauses.Expressions.SubQueryExpression" />. For example, consider
                    the following call chain:
                    <code>
            MainSource (...)
              .Select (x => x)
              .Distinct ()
              .Select (x => x)
            </code>
                    Naively, the last Select node would resolve (via Distinct and Select) to the <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" />
                    created by the initial MainSource.
                    After this method is executed, however, that <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" /> is part of the sub query, and a new
                    <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" />
                    has been created to hold it. Therefore, we replace the chain as follows:
                    <code>
            MainSource (MainSource (...).Select (x => x).Distinct ())
              .Select (x => x)
            </code>
                    Now, the last Select node resolves to the new <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" />.
                </para>
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase.SetResultTypeOverride(Core.Arango.Relinq.QueryModel)">
            <summary>
                Sets the result type override of the given <see cref="T:Core.Arango.Relinq.QueryModel" />.
            </summary>
            <param name="queryModel">The query model to set the <see cref="P:Core.Arango.Relinq.QueryModel.ResultTypeOverride" /> of.</param>
            <remarks>
                By default, the result type override is set to <see cref="P:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase.NodeResultType" /> in the <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase.Apply(Core.Arango.Relinq.QueryModel,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)" /> method.
                This ensures that the query
                model represents the type of the query correctly. Specific node parsers can override this method to set the
                <see cref="P:Core.Arango.Relinq.QueryModel.ResultTypeOverride" /> to another value, or to clear it (set it to <see langword="null" />).
                Do not leave the
                <see cref="P:Core.Arango.Relinq.QueryModel.ResultTypeOverride" /> unchanged when overriding this method, as a source node might have set
                it to a value that doesn't
                fit this node.
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeFactory">
            <summary>
                Creates instances of classes implementing the <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> interface via Reflection.
            </summary>
            <remarks>
                The classes implementing <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> instantiated by this factory must implement a single
                constructor. The source and
                constructor parameters handed to the <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeFactory.CreateExpressionNode(System.Type,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo,System.Object[])" /> method are passed on to the constructor;
                for each argument where no
                parameter is passed, <see langword="null" /> is passed to the constructor.
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeFactory.CreateExpressionNode(System.Type,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo,System.Object[])">
            <summary>
                Creates an instace of type <paramref name="nodeType" />.
            </summary>
            <exception cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ExpressionNodeInstantiationException">
                Thrown if the <paramref name="parseInfo" /> or the <paramref name="additionalConstructorParameters" />
                do not match expected constructor parameters of the <paramref name="nodeType" />.
            </exception>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo">
            <summary>
                Contains metadata about a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that is parsed into a
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase" />.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo.AssociatedIdentifier">
            <summary>
                Gets the associated identifier, i.e. the name the user gave the data streaming out of this expression. For example,
                the
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectManyExpressionNode" /> corresponding to a <c>from c in C</c> clause should get the identifier "c".
                If there is no user-defined identifier (or the identifier is impossible to infer from the expression tree), a
                generated identifier
                is given instead.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo.Source">
            <summary>
                Gets the source expression node, i.e. the node streaming data into the parsed node.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo.ParsedExpression">
            <summary>
                Gets the <see cref="T:System.Linq.Expressions.MethodCallExpression" /> being parsed.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MinExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for <see cref="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})" /> or
                <see cref="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.OfTypeExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see cref="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)" /> and <see cref="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.OrderByDescendingExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see
                    cref="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.OrderByExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see
                    cref="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.QuerySourceExpressionNodeUtility">
            <summary>
                Provides common functionality used by implementors of <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode" />.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.QuerySourceExpressionNodeUtility.ReplaceParameterWithReference(Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                Replaces the given parameter with a back-reference to the <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> corresponding to
                <paramref name="referencedNode" />.
            </summary>
            <param name="referencedNode">The referenced node.</param>
            <param name="parameterToReplace">The parameter to replace with a <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" />.</param>
            <param name="expression">The expression in which to replace the parameter.</param>
            <param name="context">The clause generation context.</param>
            <returns>
                <paramref name="expression" />, with <paramref name="parameterToReplace" /> replaced with a
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" />
                pointing to the clause corresponding to <paramref name="referencedNode" />.
            </returns>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.QuerySourceExpressionNodeUtility.GetQuerySourceForNode(Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                Gets the <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> corresponding to the given <paramref name="node" />, throwing an
                <see cref="T:System.InvalidOperationException" />
                if no such clause has been registered in the given <paramref name="context" />.
            </summary>
            <param name="node">The node for which the <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> should be returned.</param>
            <param name="context">The clause generation context.</param>
            <returns>The <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" /> corresponding to <paramref name="node" />.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.QuerySourceSetOperationExpressionNodeBase">
            <summary>
                Acts as a base class for <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.UnionExpressionNode" /> and <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ConcatExpressionNode" />, i.e., for node
                parsers for set operations
                acting as an <see cref="T:Core.Arango.Relinq.Clauses.IQuerySource" />.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ResolvedExpressionCache`1">
            <summary>
                Caches a resolved expression in the <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> classes.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ResultOperatorExpressionNodeBase">
            <summary>
                Acts as a base class for <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" />s standing for <see cref="T:System.Linq.Expressions.MethodCallExpression" />s that
                operate on the result of the query
                rather than representing actual clauses, such as <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.CountExpressionNode" /> or
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.DistinctExpressionNode" />.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ReverseExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for <see cref="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})" />.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it usually follows (or replaces) a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectExpressionNode" /> of an
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see
                    cref="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectManyExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see
                    cref="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                This node represents an additional query source introduced to the query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SingleExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see cref="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})" />,
                <see
                    cref="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
                ,
                <see cref="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})" /> or
                <see
                    cref="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SkipExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for <see cref="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)" />
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it usually follows (or replaces) a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectExpressionNode" /> of an
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SumExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for the different overloads of
                <see cref="O:System.Linq.Queryable.Sum" />.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.TakeExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for <see cref="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)" />.
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it usually follows (or replaces) a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectExpressionNode" /> of an
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ThenByDescendingExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see
                    cref="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it follows an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.OrderByExpressionNode" />, an
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.OrderByDescendingExpressionNode" />,
                a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ThenByExpressionNode" />, or a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ThenByDescendingExpressionNode" />.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ThenByExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see
                    cref="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it follows an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.OrderByExpressionNode" />, an
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.OrderByDescendingExpressionNode" />,
                a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ThenByExpressionNode" />, or a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ThenByDescendingExpressionNode" />.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.UnionExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see
                    cref="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
                When this node is used, it usually follows (or replaces) a <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.SelectExpressionNode" /> of an
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain that
                represents a query.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.WhereExpressionNode">
            <summary>
                Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> for
                <see
                    cref="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
                .
                It is generated by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when an <see cref="T:System.Linq.Expressions.Expression" /> tree is parsed.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.IQueryParser">
            <summary>
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IQueryParser" /> is implemented by classes taking an <see cref="T:System.Linq.Expressions.Expression" /> tree and parsing it into
                a <see cref="T:Core.Arango.Relinq.QueryModel" />.
            </summary>
            <remarks>
                The default implementation of this interface is <see cref="T:Core.Arango.Relinq.Parsing.Structure.QueryParser" />. LINQ providers can, however, implement
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IQueryParser" />
                themselves, eg. in order to decorate or replace the functionality of <see cref="T:Core.Arango.Relinq.Parsing.Structure.QueryParser" />.
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.IQueryParser.GetParsedQuery(System.Linq.Expressions.Expression)">
            <summary>
                Gets the <see cref="T:Core.Arango.Relinq.QueryModel" /> of the given <paramref name="expressionTreeRoot" />.
            </summary>
            <param name="expressionTreeRoot">The expression tree to parse.</param>
            <returns>A <see cref="T:Core.Arango.Relinq.QueryModel" /> that represents the query defined in <paramref name="expressionTreeRoot" />.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.MethodCallExpressionParser">
            <summary>
                Parses a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> and creates an <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> from it. This is used by
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> for parsing whole expression trees.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider">
            <summary>
                Implements <see cref="T:Core.Arango.Relinq.Parsing.Structure.INodeTypeProvider" /> by storing a list of inner <see cref="T:Core.Arango.Relinq.Parsing.Structure.INodeTypeProvider" /> instances.
                The <see cref="M:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider.IsRegistered(System.Reflection.MethodInfo)" /> and <see cref="M:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider.GetNodeType(System.Reflection.MethodInfo)" /> methods delegate to these inner instances. This is
                an
                implementation of the Composite Pattern.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry">
            <summary>
                Maps the <see cref="T:System.Reflection.MethodInfo" /> objects used in <see cref="T:System.Linq.Expressions.MethodCallExpression" /> objects to the respective
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" />
                types. This is used by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> is
                encountered to instantiate the
                right <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> for the given method.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.RegisteredMethodInfoCount">
            <summary>
                Returns the count of the registered <see cref="T:System.Reflection.MethodInfo" />s.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.IsRegistered(System.Reflection.MethodInfo)">
            <summary>
                Determines whether the specified method was registered with this <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry" />.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.GetNodeType(System.Reflection.MethodInfo)">
            <summary>
                Gets the type of <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> registered with this <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry" />
                instance that
                matches the given <paramref name="method" />, returning <see langword="null" /> if none can be found.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.CreateFromRelinqAssembly">
            <summary>
                Creates a <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry" /> and registers all relevant <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" />
                implementations in the <b>Remotion.Linq</b> assembly.
            </summary>
            <returns>
                A <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry" /> with all <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> types in the
                <b>Remotion.Linq</b> assembly registered.
            </returns>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.GetRegisterableMethodDefinition(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
                Gets the registerable method definition from a given <see cref="T:System.Reflection.MethodInfo" />. A registerable method is a
                <see cref="T:System.Reflection.MethodInfo" /> object
                that can be registered via a call to <see cref="M:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.Register(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Type)" />. When the given <paramref name="method" /> is passed
                to
                <see cref="M:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.GetNodeType(System.Reflection.MethodInfo)" /> and its corresponding registerable method was registered, the correct node type is
                returned.
            </summary>
            <param name="method">
                The method for which the registerable method should be retrieved. Must not be
                <see langword="null" />.
            </param>
            <param name="throwOnAmbiguousMatch">
                <see langword="true" /> to throw a <see cref="T:System.NotSupportedException" /> if the method cannot be matched to a
                distinct generic method definition,
                <see langword="false" /> to return <see langword="null" /> if an unambiguous match is not possible.
            </param>
            <returns>
                <para>
                    <paramref name="method" /> itself, unless it is a closed generic method or declared in a closed generic type.
                    In the latter cases,
                    the corresponding generic method definition respectively the method declared in a generic type definition is
                    returned.
                </para>
                <para>
                    If no generic method definition could be matched and <paramref name="throwOnAmbiguousMatch" /> was set to
                    <see langword="false" />,
                    <see langword="null" /> is returned.
                </para>
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if <paramref name="throwOnAmbiguousMatch" /> is set to <see langword="true" /> and no distinct generic
                method definition could be resolved.
            </exception>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.Register(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Type)">
            <summary>
                Registers the specific <paramref name="methods" /> with the given <paramref name="nodeType" />. The given methods
                must either be non-generic
                or open generic method definitions. If a method has already been registered before, the later registration
                overwrites the earlier one.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry">
            <summary>
                Maps the <see cref="T:System.Reflection.MethodInfo" /> objects used in <see cref="T:System.Linq.Expressions.MethodCallExpression" /> objects to the respective
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" />
                types based on the method names and a filter (as defined by <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.NameBasedRegistrationInfo" />).
                This is used by <see cref="T:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser" /> when a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> is encountered to
                instantiate the right
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> for the given method.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry.RegisteredNamesCount">
            <summary>
                Returns the count of the registered method names.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry.IsRegistered(System.Reflection.MethodInfo)">
            <summary>
                Determines whether the specified method was registered with this <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry" />.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry.GetNodeType(System.Reflection.MethodInfo)">
            <summary>
                Gets the type of <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> registered with this <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry" />
                instance that
                matches the given <paramref name="method" />, returning <see langword="null" /> if none can be found.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry.CreateFromRelinqAssembly">
            <summary>
                Creates a <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry" /> and registers all relevant <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" />
                implementations in the <b>Remotion.Linq</b> assembly.
            </summary>
            <returns>
                A <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry" /> with all <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> types in the
                <b>Remotion.Linq</b> assembly registered.
            </returns>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry.Register(System.Collections.Generic.IEnumerable{Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.NameBasedRegistrationInfo},System.Type)">
            <summary>
                Registers the given <paramref name="nodeType" /> for the query operator methods defined by the given
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.NameBasedRegistrationInfo" />
                objects.
            </summary>
            <param name="registrationInfo">A sequence of objects defining the methods to register the node type for.</param>
            <param name="nodeType">The type of the <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> to register.</param>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.NameBasedRegistrationInfo">
            <summary>
                Defines a name and a filter predicate used when determining the matching expression node type by
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry" />.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.Structure.QueryParser">
            <summary>
                Takes an <see cref="T:System.Linq.Expressions.Expression" /> tree and parses it into a <see cref="T:Core.Arango.Relinq.QueryModel" /> by use of an
                <see cref="P:Core.Arango.Relinq.Parsing.Structure.QueryParser.ExpressionTreeParser" />.
                It first transforms the <see cref="T:System.Linq.Expressions.Expression" /> tree into a chain of <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> instances,
                and then calls
                <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode.CreateMainFromClause(Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)" /> and <see cref="M:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode.Apply(Core.Arango.Relinq.QueryModel,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)" /> in order to
                instantiate all the
                <see cref="T:Core.Arango.Relinq.Clauses.IClause" />s. With those, a <see cref="T:Core.Arango.Relinq.QueryModel" /> is created and returned.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.QueryParser.#ctor(Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Parsing.Structure.QueryParser" /> class, using the given
                <paramref name="expressionTreeParser" /> to
                convert <see cref="T:System.Linq.Expressions.Expression" /> instances into <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" />s. Use this constructor if you wish
                to customize the
                parser. To use a default parser (with the possibility to register custom node types), use the
                <see cref="M:Core.Arango.Relinq.Parsing.Structure.QueryParser.CreateDefault" /> method.
            </summary>
            <param name="expressionTreeParser">The expression tree parser.</param>
        </member>
        <member name="P:Core.Arango.Relinq.Parsing.Structure.QueryParser.NodeTypeProvider">
            <summary>
                Gets the <see cref="T:Core.Arango.Relinq.Parsing.Structure.INodeTypeProvider" /> used by <see cref="M:Core.Arango.Relinq.Parsing.Structure.QueryParser.GetParsedQuery(System.Linq.Expressions.Expression)" /> to parse
                <see cref="T:System.Linq.Expressions.MethodCallExpression" /> instances.
            </summary>
            <value>The node type registry.</value>
        </member>
        <member name="P:Core.Arango.Relinq.Parsing.Structure.QueryParser.Processor">
            <summary>
                Gets the <see cref="T:Core.Arango.Relinq.Parsing.Structure.IExpressionTreeProcessor" /> used by <see cref="M:Core.Arango.Relinq.Parsing.Structure.QueryParser.GetParsedQuery(System.Linq.Expressions.Expression)" /> to process the
                <see cref="T:System.Linq.Expressions.Expression" /> tree
                before analyzing its structure.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.QueryParser.GetParsedQuery(System.Linq.Expressions.Expression)">
            <summary>
                Gets the <see cref="T:Core.Arango.Relinq.QueryModel" /> of the given <paramref name="expressionTreeRoot" />.
            </summary>
            <param name="expressionTreeRoot">The expression tree to parse.</param>
            <returns>A <see cref="T:Core.Arango.Relinq.QueryModel" /> that represents the query defined in <paramref name="expressionTreeRoot" />.</returns>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.QueryParser.CreateDefault">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.Parsing.Structure.QueryParser" /> class, using default parameters for parsing.
                The <see cref="P:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.NodeTypeProvider" /> used has all relevant methods of the
                <see cref="T:System.Linq.Queryable" /> class
                automatically registered, and the <see cref="P:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.Processor" /> comprises partial
                evaluation, and default
                expression transformations. See <see cref="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.CreateDefaultNodeTypeProvider" />,
                <see cref="M:Core.Arango.Relinq.Parsing.Structure.ExpressionTreeParser.CreateDefaultProcessor(Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.IExpressionTranformationProvider,Core.Arango.Relinq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter)" />, and
                <see cref="M:Core.Arango.Relinq.Parsing.ExpressionVisitors.Transformation.ExpressionTransformerRegistry.CreateDefault" />
                for details.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.Structure.QueryParser.ApplyAllNodes(Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode,Core.Arango.Relinq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                Applies all nodes to a <see cref="T:Core.Arango.Relinq.QueryModel" />, which is created by the trailing
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode" /> in the
                <paramref name="node" /> chain.
            </summary>
            <param name="node">The entry point to the <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain.</param>
            <param name="clauseGenerationContext">
                The clause generation context collecting context information during the parsing
                process.
            </param>
            <returns>
                A <see cref="T:Core.Arango.Relinq.QueryModel" /> created by the training <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode" /> and transformed by each
                node in the
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.IntermediateModel.IExpressionNode" /> chain.
            </returns>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.ThrowingExpressionVisitor">
            <summary>
                Implements an <see cref="T:Core.Arango.Relinq.Parsing.RelinqExpressionVisitor" /> that throws an exception for every expression type that is not
                explicitly supported.
                Inherit from this class to ensure that an exception is thrown when an expression is passed
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})">
            <summary>
                Called when an unhandled item is visited. This method provides the item the visitor cannot handle (
                <paramref name="unhandledItem" />),
                the <paramref name="visitMethod" /> that is not implemented in the visitor, and a delegate that can be used to
                invoke the
                <paramref name="baseBehavior" /> of the <see cref="T:Core.Arango.Relinq.Parsing.RelinqExpressionVisitor" /> class. The default behavior of this
                method is to call the
                <see cref="M:Core.Arango.Relinq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)" /> method, but it can be overridden to do something else.
            </summary>
            <typeparam name="TItem">
                The type of the item that could not be handled. Either an <see cref="T:System.Linq.Expressions.Expression" /> type, a
                <see cref="T:System.Linq.Expressions.MemberBinding" />
                type, or <see cref="T:System.Linq.Expressions.ElementInit" />.
            </typeparam>
            <typeparam name="TResult">The result type expected for the visited <paramref name="unhandledItem" />.</typeparam>
            <param name="unhandledItem">The unhandled item.</param>
            <param name="visitMethod">The visit method that is not implemented.</param>
            <param name="baseBehavior">The behavior exposed by <see cref="T:Core.Arango.Relinq.Parsing.RelinqExpressionVisitor" /> for this item type.</param>
            <returns>
                An object to replace <paramref name="unhandledItem" /> in the expression tree. Alternatively, the method can
                throw any exception.
            </returns>
        </member>
        <member name="T:Core.Arango.Relinq.Parsing.TupleExpressionBuilder">
            <summary>
                <see cref="T:Core.Arango.Relinq.Parsing.TupleExpressionBuilder" /> can be used to build tuples incorporating a sequence of
                <see cref="T:System.Linq.Expressions.Expression" />s.
                For example, given three expressions, exp1, exp2, and exp3, it will build nested <see cref="T:System.Linq.Expressions.NewExpression" />s that
                are equivalent to the
                following: new KeyValuePair(exp1, new KeyValuePair(exp2, exp3)).
                Given an <see cref="T:System.Linq.Expressions.Expression" /> whose type matches that of a tuple built by
                <see cref="T:Core.Arango.Relinq.Parsing.TupleExpressionBuilder" />, the builder can also return
                an enumeration of accessor expressions that can be used to access the tuple elements in the same order as they were
                put into the nested tuple
                expression. In above example, this would yield tupleExpression.Key, tupleExpression.Value.Key, and
                tupleExpression.Value.Value.
                This class can be handy whenever a set of <see cref="T:System.Linq.Expressions.Expression" /> needs to be put into a single
                <see cref="T:System.Linq.Expressions.Expression" />
                (eg., a select projection), especially if each sub-expression needs to be explicitly accessed at a later point of
                time (eg., to retrieve the
                items from a statement surrounding a sub-statement yielding the tuple in its select projection).
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.QueryableBase`1">
            <summary>
                Acts as a common base class for <see cref="T:System.Linq.IQueryable`1" /> implementations based on re-linq. In a specific LINQ
                provider, a custom queryable
                class should be derived from <see cref="T:Core.Arango.Relinq.QueryableBase`1" /> which supplies an implementation of
                <see cref="T:Core.Arango.Relinq.IQueryExecutor" /> that is used to
                execute the query. This is then used as an entry point (the main data source) of a LINQ query.
            </summary>
            <typeparam name="T">The type of the result items yielded by this query.</typeparam>
        </member>
        <member name="M:Core.Arango.Relinq.QueryableBase`1.#ctor(Core.Arango.Relinq.Parsing.Structure.IQueryParser,Core.Arango.Relinq.IQueryExecutor)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.QueryableBase`1" /> class with a
                <see cref="T:Core.Arango.Relinq.DefaultQueryProvider" /> and the given
                <paramref name="executor" />. This constructor should be used by subclasses to begin a new query. The
                <see cref="P:Core.Arango.Relinq.QueryableBase`1.Expression" /> generated by
                this constructor is a <see cref="T:System.Linq.Expressions.ConstantExpression" /> pointing back to this <see cref="T:Core.Arango.Relinq.QueryableBase`1" />.
            </summary>
            <param name="queryParser">
                The <see cref="T:Core.Arango.Relinq.Parsing.Structure.IQueryParser" /> used to parse queries. Specify an instance of
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.QueryParser" /> for default behavior. See also <see cref="M:Core.Arango.Relinq.Parsing.Structure.QueryParser.CreateDefault" />.
            </param>
            <param name="executor">
                The <see cref="T:Core.Arango.Relinq.IQueryExecutor" /> used to execute the query represented by this
                <see cref="T:Core.Arango.Relinq.QueryableBase`1" />.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.QueryableBase`1.#ctor(System.Linq.IQueryProvider)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.QueryableBase`1" /> class with a specific
                <see cref="T:System.Linq.IQueryProvider" />. This constructor
                should only be used to begin a query when <see cref="T:Core.Arango.Relinq.DefaultQueryProvider" /> does not fit the requirements.
            </summary>
            <param name="provider">
                The provider used to execute the query represented by this <see cref="T:Core.Arango.Relinq.QueryableBase`1" /> and to construct
                queries around this <see cref="T:Core.Arango.Relinq.QueryableBase`1" />.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.QueryableBase`1.#ctor(System.Linq.IQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Relinq.QueryableBase`1" /> class with a given
                <paramref name="provider" /> and
                <paramref name="expression" />. This is an infrastructure constructor that must be exposed on subclasses because it
                is used by
                <see cref="T:Core.Arango.Relinq.DefaultQueryProvider" /> to construct queries around this <see cref="T:Core.Arango.Relinq.QueryableBase`1" /> when a query
                method (e.g. of the
                <see cref="T:System.Linq.Queryable" /> class) is called.
            </summary>
            <param name="provider">
                The provider used to execute the query represented by this <see cref="T:Core.Arango.Relinq.QueryableBase`1" /> and to construct
                queries around this <see cref="T:Core.Arango.Relinq.QueryableBase`1" />.
            </param>
            <param name="expression">The expression representing the query.</param>
        </member>
        <member name="P:Core.Arango.Relinq.QueryableBase`1.Expression">
            <summary>
                Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable" />. This
                expression describes the
                query represented by this <see cref="T:Core.Arango.Relinq.QueryableBase`1" />.
            </summary>
            <value></value>
            <returns>
                The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of
                <see cref="T:System.Linq.IQueryable" />.
            </returns>
        </member>
        <member name="P:Core.Arango.Relinq.QueryableBase`1.Provider">
            <summary>
                Gets the query provider that is associated with this data source. The provider is used to execute the query. By
                default, a
                <see cref="T:Core.Arango.Relinq.DefaultQueryProvider" /> is used that parses the query and passes it on to an implementation of
                <see cref="T:Core.Arango.Relinq.IQueryExecutor" />.
            </summary>
            <value></value>
            <returns>
                The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.
            </returns>
        </member>
        <member name="P:Core.Arango.Relinq.QueryableBase`1.ElementType">
            <summary>
                Gets the type of the element(s) that are returned when the expression tree associated with this instance of
                <see cref="T:System.Linq.IQueryable" /> is executed.
            </summary>
            <value></value>
            <returns>
                A <see cref="T:System.Type" /> that represents the type of the element(s) that are returned when the expression
                tree associated with this object is executed.
            </returns>
        </member>
        <member name="M:Core.Arango.Relinq.QueryableBase`1.GetEnumerator">
            <summary>
                Executes the query via the <see cref="P:Core.Arango.Relinq.QueryableBase`1.Provider" /> and returns an enumerator that iterates through the items
                returned by the query.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the query result.
            </returns>
        </member>
        <member name="T:Core.Arango.Relinq.QueryModel">
            <summary>
                Provides an abstraction of an expression tree created for a LINQ query. <see cref="T:Core.Arango.Relinq.QueryModel" /> instances are
                passed to LINQ providers based
                on re-linq via <see cref="T:Core.Arango.Relinq.IQueryExecutor" />, but you can also use <see cref="T:Core.Arango.Relinq.Parsing.Structure.QueryParser" /> to parse an
                expression tree by hand or construct
                a <see cref="T:Core.Arango.Relinq.QueryModel" /> manually via its constructor.
            </summary>
            <remarks>
                The different parts of the query are mapped to clauses, see <see cref="P:Core.Arango.Relinq.QueryModel.MainFromClause" />,
                <see cref="P:Core.Arango.Relinq.QueryModel.BodyClauses" />, and
                <see cref="P:Core.Arango.Relinq.QueryModel.SelectClause" />. The simplest way to process all the clauses belonging to a <see cref="T:Core.Arango.Relinq.QueryModel" />
                is by implementing
                <see cref="T:Core.Arango.Relinq.IQueryModelVisitor" /> (or deriving from <see cref="T:Core.Arango.Relinq.QueryModelVisitorBase" />) and calling
                <see cref="M:Core.Arango.Relinq.QueryModel.Accept(Core.Arango.Relinq.IQueryModelVisitor)" />.
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.QueryModel.#ctor(Core.Arango.Relinq.Clauses.MainFromClause,Core.Arango.Relinq.Clauses.SelectClause)">
            <summary>
                Initializes a new instance of <see cref="T:Core.Arango.Relinq.QueryModel" />
            </summary>
            <param name="mainFromClause">
                The <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" /> of the query. This is the starting point of the query, generating items
                that are filtered and projected by the query.
            </param>
            <param name="selectClause">
                The <see cref="P:Core.Arango.Relinq.QueryModel.SelectClause" /> of the query. This is the end point of
                the query, it defines what is actually returned for each of the items coming from the <see cref="P:Core.Arango.Relinq.QueryModel.MainFromClause" />
                and passing the
                <see cref="P:Core.Arango.Relinq.QueryModel.BodyClauses" />. After it, only the <see cref="P:Core.Arango.Relinq.QueryModel.ResultOperators" /> modify the result of the query.
            </param>
        </member>
        <member name="P:Core.Arango.Relinq.QueryModel.MainFromClause">
            <summary>
                Gets or sets the query's <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" />. This is the starting point of the query, generating
                items that are processed by
                the <see cref="P:Core.Arango.Relinq.QueryModel.BodyClauses" /> and projected or grouped by the <see cref="P:Core.Arango.Relinq.QueryModel.SelectClause" />.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.QueryModel.SelectClause">
            <summary>
                Gets or sets the query's select clause. This is the end point of the query, it defines what is actually returned
                for each of the
                items coming from the <see cref="P:Core.Arango.Relinq.QueryModel.MainFromClause" /> and passing the <see cref="P:Core.Arango.Relinq.QueryModel.BodyClauses" />. After it, only the
                <see cref="P:Core.Arango.Relinq.QueryModel.ResultOperators" />
                modify the result of the query.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.QueryModel.BodyClauses">
            <summary>
                Gets a collection representing the query's body clauses. Body clauses take the items generated by the
                <see cref="P:Core.Arango.Relinq.QueryModel.MainFromClause" />,
                filtering (<see cref="T:Core.Arango.Relinq.Clauses.WhereClause" />), ordering (<see cref="T:Core.Arango.Relinq.Clauses.OrderByClause" />), augmenting (
                <see cref="T:Core.Arango.Relinq.Clauses.AdditionalFromClause" />), or otherwise
                processing them before they are passed to the <see cref="P:Core.Arango.Relinq.QueryModel.SelectClause" />.
            </summary>
        </member>
        <member name="P:Core.Arango.Relinq.QueryModel.ResultOperators">
            <summary>
                Gets the result operators attached to this <see cref="P:Core.Arango.Relinq.QueryModel.SelectClause" />. Result operators modify the query's result
                set, aggregating,
                filtering, or otherwise processing the result before it is returned.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.QueryModel.GetOutputDataInfo">
            <summary>
                Gets an <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo" /> object describing the data streaming out of this <see cref="T:Core.Arango.Relinq.QueryModel" />
                . If a query ends with
                the <see cref="P:Core.Arango.Relinq.QueryModel.SelectClause" />, this corresponds to <see cref="M:Core.Arango.Relinq.Clauses.SelectClause.GetOutputDataInfo" />. If a
                query has
                <see cref="P:Core.Arango.Relinq.QueryModel.ResultOperators" />, the data is further modified by those operators.
            </summary>
            <returns>
                Gets a <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo" /> object describing the data streaming out of this
                <see cref="T:Core.Arango.Relinq.QueryModel" />.
            </returns>
            <remarks>
                The data streamed from a <see cref="T:Core.Arango.Relinq.QueryModel" /> is often of type <see cref="T:System.Linq.IQueryable`1" /> instantiated
                with a specific item type, unless the
                query ends with a <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" />. For example, if the query ends with a
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.CountResultOperator" />, the
                result type will be <see cref="T:System.Int32" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="P:Core.Arango.Relinq.QueryModel.ResultTypeOverride" /> is not compatible with the calculated <see cref="T:Core.Arango.Relinq.Clauses.StreamedData.IStreamedDataInfo" />
                calculated from the <see cref="P:Core.Arango.Relinq.QueryModel.ResultOperators" />.
            </exception>
        </member>
        <member name="M:Core.Arango.Relinq.QueryModel.GetUniqueIdentfierGenerator">
            <summary>
                Gets the <see cref="T:Core.Arango.Relinq.UniqueIdentifierGenerator" /> which is used by the <see cref="T:Core.Arango.Relinq.QueryModel" />.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Arango.Relinq.QueryModel.Accept(Core.Arango.Relinq.IQueryModelVisitor)">
            <summary>
                Accepts an implementation of <see cref="T:Core.Arango.Relinq.IQueryModelVisitor" /> or <see cref="T:Core.Arango.Relinq.QueryModelVisitorBase" />, as defined
                by the Visitor pattern.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.QueryModel.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> representation of this <see cref="T:Core.Arango.Relinq.QueryModel" />.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.QueryModel.Clone">
            <summary>
                Clones this <see cref="T:Core.Arango.Relinq.QueryModel" />, returning a new <see cref="T:Core.Arango.Relinq.QueryModel" /> equivalent to this instance, but
                with its clauses being
                clones of this instance's clauses. Any <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> in the cloned clauses that
                points back to another clause
                in this <see cref="T:Core.Arango.Relinq.QueryModel" /> (including its subqueries) is adjusted to point to the respective clones in the
                cloned
                <see cref="T:Core.Arango.Relinq.QueryModel" />. Any subquery nested in the <see cref="T:Core.Arango.Relinq.QueryModel" /> is also cloned.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.QueryModel.Clone(Core.Arango.Relinq.Clauses.QuerySourceMapping)">
            <summary>
                Clones this <see cref="T:Core.Arango.Relinq.QueryModel" />, returning a new <see cref="T:Core.Arango.Relinq.QueryModel" /> equivalent to this instance, but
                with its clauses being
                clones of this instance's clauses. Any <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> in the cloned clauses that
                points back to another clause
                in  this <see cref="T:Core.Arango.Relinq.QueryModel" /> (including its subqueries) is adjusted to point to the respective clones in the
                cloned
                <see cref="T:Core.Arango.Relinq.QueryModel" />. Any subquery nested in the <see cref="T:Core.Arango.Relinq.QueryModel" /> is also cloned.
            </summary>
            <param name="querySourceMapping">
                The <see cref="T:Core.Arango.Relinq.Clauses.QuerySourceMapping" /> defining how to adjust instances of
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" /> in the cloned <see cref="T:Core.Arango.Relinq.QueryModel" />. If there is a
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.QuerySourceReferenceExpression" />
                that points out of the <see cref="T:Core.Arango.Relinq.QueryModel" /> being cloned, specify its replacement via this parameter. At the
                end of the cloning process,
                this object maps all the clauses in this original <see cref="T:Core.Arango.Relinq.QueryModel" /> to the clones created in the process.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.QueryModel.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                Transforms all the expressions in this <see cref="T:Core.Arango.Relinq.QueryModel" />'s clauses via the given
                <paramref name="transformation" /> delegate.
            </summary>
            <param name="transformation">
                The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression" /> within this
                <see cref="T:Core.Arango.Relinq.QueryModel" />, and those expressions will be replaced with what the delegate returns.
            </param>
        </member>
        <member name="M:Core.Arango.Relinq.QueryModel.GetNewName(System.String)">
            <summary>
                Returns a new name with the given prefix. The name is different from that of any <see cref="T:Core.Arango.Relinq.Clauses.FromClauseBase" />
                added
                in the <see cref="T:Core.Arango.Relinq.QueryModel" />. Note that clause names that are changed after the clause is added as well as
                names of other clauses
                than from clauses are not considered when determining "unique" names. Use names only for readability and debugging,
                not
                for uniquely identifying clauses.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.QueryModel.Execute(Core.Arango.Relinq.IQueryExecutor)">
            <summary>
                Executes this <see cref="T:Core.Arango.Relinq.QueryModel" /> via the given <see cref="T:Core.Arango.Relinq.IQueryExecutor" />. By default, this indirectly
                calls
                <see cref="M:Core.Arango.Relinq.IQueryExecutor.ExecuteCollection``1(Core.Arango.Relinq.QueryModel)" />, but this can be modified by the <see cref="P:Core.Arango.Relinq.QueryModel.ResultOperators" />.
            </summary>
            <param name="executor">The <see cref="T:Core.Arango.Relinq.IQueryExecutor" /> to use for executing this query.</param>
        </member>
        <member name="M:Core.Arango.Relinq.QueryModel.IsIdentityQuery">
            <summary>
                Determines whether this <see cref="T:Core.Arango.Relinq.QueryModel" /> represents an identity query. An identity query is a query
                without any body clauses
                whose <see cref="P:Core.Arango.Relinq.QueryModel.SelectClause" /> selects exactly the items produced by its <see cref="P:Core.Arango.Relinq.QueryModel.MainFromClause" />. An
                identity query can have
                <see cref="P:Core.Arango.Relinq.QueryModel.ResultOperators" />.
            </summary>
            <returns>
                <see langword="true" /> if this <see cref="T:Core.Arango.Relinq.QueryModel" /> represents an identity query; otherwise,
                <see langword="false" />.
            </returns>
            <example>
                An example for an identity query is the subquery in that is produced for the
                <see cref="P:Core.Arango.Relinq.Clauses.SelectClause.Selector" /> in the following
                query:
                <code>
            from order in ...
            select order.OrderItems.Count()
            </code>
                In this query, the <see cref="P:Core.Arango.Relinq.Clauses.SelectClause.Selector" /> will become a <see cref="T:Core.Arango.Relinq.Clauses.Expressions.SubQueryExpression" />
                because
                <see cref="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" /> is treated as a query
                operator. The
                <see cref="T:Core.Arango.Relinq.QueryModel" /> in that <see cref="T:Core.Arango.Relinq.Clauses.Expressions.SubQueryExpression" /> has no <see cref="P:Core.Arango.Relinq.QueryModel.BodyClauses" /> and a trivial
                <see cref="P:Core.Arango.Relinq.QueryModel.SelectClause" />,
                so its <see cref="M:Core.Arango.Relinq.QueryModel.IsIdentityQuery" /> method returns <see langword="true" />. The outer <see cref="T:Core.Arango.Relinq.QueryModel" />,
                on the other hand, does not
                have a trivial <see cref="P:Core.Arango.Relinq.QueryModel.SelectClause" />, so its <see cref="M:Core.Arango.Relinq.QueryModel.IsIdentityQuery" /> method returns
                <see langword="false" />.
            </example>
        </member>
        <member name="M:Core.Arango.Relinq.QueryModel.ConvertToSubQuery(System.String)">
            <summary>
                Creates a new <see cref="T:Core.Arango.Relinq.QueryModel" /> that has this <see cref="T:Core.Arango.Relinq.QueryModel" /> as a sub-query in its
                <see cref="P:Core.Arango.Relinq.QueryModel.MainFromClause" />.
            </summary>
            <param name="itemName">The name of the new <see cref="T:Core.Arango.Relinq.QueryModel" />'s <see cref="P:Core.Arango.Relinq.Clauses.FromClauseBase.ItemName" />.</param>
            <returns>
                A new <see cref="T:Core.Arango.Relinq.QueryModel" /> whose <see cref="P:Core.Arango.Relinq.QueryModel.MainFromClause" />'s <see cref="P:Core.Arango.Relinq.Clauses.FromClauseBase.FromExpression" />
                is a
                <see cref="T:Core.Arango.Relinq.Clauses.Expressions.SubQueryExpression" /> that holds this <see cref="T:Core.Arango.Relinq.QueryModel" /> instance.
            </returns>
        </member>
        <member name="T:Core.Arango.Relinq.QueryModelBuilder">
            <summary>
                Collects clauses and creates a <see cref="T:Core.Arango.Relinq.QueryModel" /> from them. This provides a simple way to first add all the
                clauses and then
                create the <see cref="T:Core.Arango.Relinq.QueryModel" /> rather than the two-step approach (first <see cref="P:Core.Arango.Relinq.QueryModelBuilder.SelectClause" /> and
                <see cref="P:Core.Arango.Relinq.QueryModelBuilder.MainFromClause" />,
                then the <see cref="T:Core.Arango.Relinq.Clauses.IBodyClause" />s) required by <see cref="T:Core.Arango.Relinq.QueryModel" />'s constructor.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.QueryModelVisitorBase">
            <summary>
                Provides a default implementation of <see cref="T:Core.Arango.Relinq.IQueryModelVisitor" /> which automatically visits child items. That
                is, the default
                implementation of <see cref="M:Core.Arango.Relinq.QueryModelVisitorBase.VisitQueryModel(Core.Arango.Relinq.QueryModel)" /> automatically calls <c>Accept</c> on all clauses in the
                <see cref="T:Core.Arango.Relinq.QueryModel" />
                and the default implementation of <see cref="M:Core.Arango.Relinq.QueryModelVisitorBase.VisitOrderByClause(Core.Arango.Relinq.Clauses.OrderByClause,Core.Arango.Relinq.QueryModel,System.Int32)" /> automatically calls
                <see cref="M:Core.Arango.Relinq.Clauses.Ordering.Accept(Core.Arango.Relinq.IQueryModelVisitor,Core.Arango.Relinq.QueryModel,Core.Arango.Relinq.Clauses.OrderByClause,System.Int32)" /> on the
                <see cref="T:Core.Arango.Relinq.Clauses.Ordering" /> instances in its <see cref="P:Core.Arango.Relinq.Clauses.OrderByClause.Orderings" /> collection, and so on.
            </summary>
            <remarks>
                This visitor is hardened against modifications performed on the visited <see cref="T:Core.Arango.Relinq.QueryModel" /> while the model
                is currently being visited.
                That is, if a the <see cref="P:Core.Arango.Relinq.QueryModel.BodyClauses" /> collection changes while a body clause (or a child item of
                a body clause) is currently
                being processed, the visitor will handle that gracefully. The same applies to
                <see cref="P:Core.Arango.Relinq.QueryModel.ResultOperators" /> and
                <see cref="P:Core.Arango.Relinq.Clauses.OrderByClause.Orderings" />.
            </remarks>
        </member>
        <member name="T:Core.Arango.Relinq.QueryProviderBase">
            <summary>
                Provides a default implementation of <see cref="T:System.Linq.IQueryProvider" /> that executes queries (subclasses of
                <see cref="T:Core.Arango.Relinq.QueryableBase`1" />) by
                first parsing them into a <see cref="T:Core.Arango.Relinq.QueryModel" /> and then passing that to a given implementation of
                <see cref="T:Core.Arango.Relinq.IQueryExecutor" />.
                Usually, <see cref="T:Core.Arango.Relinq.DefaultQueryProvider" /> should be used unless <see cref="M:Core.Arango.Relinq.QueryProviderBase.CreateQuery``1(System.Linq.Expressions.Expression)" /> must be manually
                implemented.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.QueryProviderBase.#ctor(Core.Arango.Relinq.Parsing.Structure.IQueryParser,Core.Arango.Relinq.IQueryExecutor)">
            <summary>
                Initializes a new instance of <see cref="T:Core.Arango.Relinq.QueryProviderBase" /> using a custom <see cref="T:Core.Arango.Relinq.Parsing.Structure.IQueryParser" />. Use this
                constructor to customize how queries are parsed.
            </summary>
            <param name="queryParser">
                The <see cref="T:Core.Arango.Relinq.Parsing.Structure.IQueryParser" /> used to parse queries. Specify an instance of
                <see cref="T:Core.Arango.Relinq.Parsing.Structure.QueryParser" />
                for default behavior.
            </param>
            <param name="executor">The <see cref="T:Core.Arango.Relinq.IQueryExecutor" /> used to execute queries against a specific query backend.</param>
        </member>
        <member name="P:Core.Arango.Relinq.QueryProviderBase.QueryParser">
            <summary>
                Gets the <see cref="P:Core.Arango.Relinq.QueryProviderBase.QueryParser" /> used by this <see cref="T:Core.Arango.Relinq.QueryProviderBase" /> to parse LINQ queries.
            </summary>
            <value>The query parser.</value>
        </member>
        <member name="P:Core.Arango.Relinq.QueryProviderBase.Executor">
            <summary>
                Gets or sets the implementation of <see cref="T:Core.Arango.Relinq.IQueryExecutor" /> used to execute queries created via
                <see cref="M:Core.Arango.Relinq.QueryProviderBase.CreateQuery``1(System.Linq.Expressions.Expression)" />.
            </summary>
            <value>The executor used to execute queries.</value>
        </member>
        <member name="M:Core.Arango.Relinq.QueryProviderBase.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
                Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression
                tree. This
                method delegates to <see cref="M:Core.Arango.Relinq.QueryProviderBase.CreateQuery``1(System.Linq.Expressions.Expression)" />.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
                An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.
            </returns>
        </member>
        <member name="M:Core.Arango.Relinq.QueryProviderBase.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
                Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression
                tree. This method is
                called by the standard query operators defined by the <see cref="T:System.Linq.Queryable" /> class.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
                An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.
            </returns>
        </member>
        <member name="M:Core.Arango.Relinq.QueryProviderBase.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
                Executes the query defined by the specified expression by parsing it with a
                <see cref="P:Core.Arango.Relinq.QueryProviderBase.QueryParser" /> and then running it through the <see cref="P:Core.Arango.Relinq.QueryProviderBase.Executor" />.
                The result is cast to <typeparamref name="TResult" />.
            </summary>
            <typeparam name="TResult">The type of the query result.</typeparam>
            <param name="expression">The query expression to be executed.</param>
            <returns>The result of the query cast to <typeparamref name="TResult" />.</returns>
            <remarks>
                This method is called by the standard query operators that return a single value, such as
                <see cref="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})" /> or
                <see cref="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})" />.
                In addition, it is called by <see cref="T:Core.Arango.Relinq.QueryableBase`1" /> to execute queries that return sequences.
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.QueryProviderBase.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
                Executes the query defined by the specified expression by parsing it with a
                <see cref="P:Core.Arango.Relinq.QueryProviderBase.QueryParser" /> and then running it through the <see cref="P:Core.Arango.Relinq.QueryProviderBase.Executor" />.
            </summary>
            <param name="expression">The query expression to be executed.</param>
            <returns>The result of the query.</returns>
            <remarks>
                This method is similar to the <see cref="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)" /> method, but without the cast to a
                defined return type.
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.QueryProviderBase.Execute(System.Linq.Expressions.Expression)">
            <summary>
                Executes the query defined by the specified expression by parsing it with a
                <see cref="P:Core.Arango.Relinq.QueryProviderBase.QueryParser" /> and then running it through the <see cref="P:Core.Arango.Relinq.QueryProviderBase.Executor" />.
                This method is invoked through the <see cref="T:System.Linq.IQueryProvider" /> interface methods, for example by
                <see cref="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})" /> and
                <see cref="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})" />, and it's also used by
                <see cref="T:Core.Arango.Relinq.QueryableBase`1" />
                when the <see cref="T:System.Linq.IQueryable`1" /> is enumerated.
            </summary>
            <remarks>
                Override this method to replace the query execution mechanism by a custom implementation.
            </remarks>
        </member>
        <member name="M:Core.Arango.Relinq.QueryProviderBase.GenerateQueryModel(System.Linq.Expressions.Expression)">
            <summary>
                The method generates a <see cref="T:Core.Arango.Relinq.QueryModel" />.
            </summary>
            <param name="expression">The query as expression chain.</param>
            <returns>a <see cref="T:Core.Arango.Relinq.QueryModel" /></returns>
        </member>
        <member name="T:Core.Arango.Relinq.Transformations.SubQueryFromClauseFlattener">
            <summary>
                Takes a <see cref="T:Core.Arango.Relinq.QueryModel" /> and transforms it by replacing its <see cref="T:Core.Arango.Relinq.Clauses.FromClauseBase" /> instances (
                <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" /> and
                <see cref="T:Core.Arango.Relinq.Clauses.AdditionalFromClause" />) that contain subqueries with equivalent flattened clauses. Subqueries that
                contain a
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperatorBase" /> (such as <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.DistinctResultOperator" /> or
                <see cref="T:Core.Arango.Relinq.Clauses.ResultOperators.TakeResultOperator" />) cannot be
                flattened.
            </summary>
            <example>
                As an example, take the following query:
                <code>
            from c in Customers
            from o in (from oi in OrderInfos where oi.Customer == c orderby oi.OrderDate select oi.Order)
            orderby o.Product.Name
            select new { c, o }
            </code>
                This will be transformed into:
                <code>
            from c in Customers
            from oi in OrderInfos
            where oi.Customer == c
            orderby oi.OrderDate
            orderby oi.Order.Product.Name
            select new { c, oi.Order }
            </code>
                As another example, take the following query:
                <code>
            from c in (from o in Orders select o.Customer)
            where c.Name.StartsWith ("Miller")
            select c
            </code>
                (This query is never produced by the <see cref="T:Core.Arango.Relinq.Parsing.Structure.QueryParser" />, the only way to construct it is via manually
                building a
                <see cref="T:Core.Arango.Relinq.Clauses.MainFromClause" />.)
                This will be transforemd into:
                <code>
            from o in Orders
            where o.Customer.Name.StartsWith ("Miller")
            select o
            </code>
            </example>
        </member>
        <member name="T:Core.Arango.Relinq.UniqueIdentifierGenerator">
            <summary>
                Generates unique identifiers based on a set of known identifiers.
                An identifier is generated by appending a number to a given prefix. The identifier is considered unique when no
                known identifier
                exists which equals the prefix/number combination.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.UniqueIdentifierGenerator.AddKnownIdentifier(System.String)">
            <summary>
                Adds the given <paramref name="identifier" /> to the set of known identifiers.
            </summary>
            <param name="identifier">The identifier to add.</param>
        </member>
        <member name="M:Core.Arango.Relinq.UniqueIdentifierGenerator.GetUniqueIdentifier(System.String)">
            <summary>
                Gets a unique identifier starting with the given <paramref name="prefix" />. The identifier is generating by
                appending a number to the
                prefix so that the resulting string does not match a known identifier.
            </summary>
            <param name="prefix">The prefix to use for the identifier.</param>
            <returns>A unique identifier starting with <paramref name="prefix" />.</returns>
        </member>
        <member name="T:Core.Arango.Relinq.Utilities.ExpressionExtensions">
            <summary>
                Provides extensions for working with <see cref="T:System.Linq.Expressions.Expression" /> trees.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Utilities.ExpressionExtensions.BuildString(System.Linq.Expressions.Expression)">
            <summary>
                Builds a string from the <paramref name="expression" /> tree, including .NET 3.5.
            </summary>
        </member>
        <member name="T:Core.Arango.Relinq.Utilities.ItemTypeReflectionUtility">
            <summary>
                Provider a utility API for dealing with the item type of generic collections.
            </summary>
        </member>
        <member name="M:Core.Arango.Relinq.Utilities.ItemTypeReflectionUtility.TryGetItemTypeOfClosedGenericIEnumerable(System.Type,System.Type@)">
            <summary>
                Tries to extract the item type from the input <see cref="T:System.Type" />.
            </summary>
            <param name="possibleEnumerableType">
                The <see cref="T:System.Type" /> that might be an implementation of the <see cref="T:System.Collections.Generic.IEnumerable`1" /> interface. Must not be
                <see langword="null" />.
            </param>
            <param name="itemType">
                An output parameter containing the extracted item <see cref="T:System.Type" /> or <see langword="null" />
                .
            </param>
            <returns>
                <see langword="true" /> if an <paramref name="itemType" /> could be extracted, otherwise
                <see langword="false" />.
            </returns>
        </member>
        <member name="T:Core.Arango.Serialization.IArangoFormattable">
            <summary>
                Special interface for custom formattable query parts
            </summary>
        </member>
        <member name="T:Core.Arango.Serialization.IArangoSerializer">
            <summary>
                Arango Serializer Interface
            </summary>
        </member>
        <member name="M:Core.Arango.Serialization.IArangoSerializer.Serialize(System.Object)">
            <summary>
                Convert object to string
            </summary>
        </member>
        <member name="M:Core.Arango.Serialization.IArangoSerializer.Deserialize``1(System.String)">
            <summary>
                Convert string to object
            </summary>
        </member>
        <member name="M:Core.Arango.Serialization.IArangoSerializer.Deserialize(System.String,System.Type)">
            <summary>
                Convert string to object
            </summary>
        </member>
        <member name="T:Core.Arango.Serialization.Json.ArangoJsonCamelCasePolicy">
            <summary>
                System.Json.Text PascalCase Naming Policy for Arango
            </summary>
        </member>
        <member name="M:Core.Arango.Serialization.Json.ArangoJsonCamelCasePolicy.ConvertName(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Serialization.Json.ArangoJsonDefaultPolicy">
            <summary>
                System.Json.Text PascalCase Naming Policy for Arango
            </summary>
        </member>
        <member name="M:Core.Arango.Serialization.Json.ArangoJsonDefaultPolicy.ConvertName(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Serialization.Json.ArangoJsonSerializer">
            <summary>
                Arango Json Serializer with System.Json.Text
            </summary>
        </member>
        <member name="M:Core.Arango.Serialization.Json.ArangoJsonSerializer.#ctor(System.Text.Json.JsonNamingPolicy)">
            <summary>
            </summary>
            <param name="policy">PascalCase or camelCase policy</param>
        </member>
        <member name="M:Core.Arango.Serialization.Json.ArangoJsonSerializer.Serialize(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Serialization.Json.ArangoJsonSerializer.Deserialize``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Serialization.Json.ArangoJsonSerializer.Deserialize(System.String,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Serialization.Json.JsonStringEnumMemberConverter">
            <summary>
                System.Text.Json EnumMember support
            </summary>
        </member>
        <member name="M:Core.Arango.Serialization.Json.JsonStringEnumMemberConverter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Serialization.Json.JsonStringEnumMemberConverter" /> class.
            </summary>
        </member>
        <member name="M:Core.Arango.Serialization.Json.JsonStringEnumMemberConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Core.Arango.Serialization.Json.JsonStringEnumMemberConverter" /> class.
            </summary>
            <param name="namingPolicy">
                Optional naming policy for writing enum values.
            </param>
            <param name="allowIntegerValues">
                True to allow undefined enum values. When true, if an enum value isn't
                defined it will output as a number rather than a string.
            </param>
        </member>
        <member name="M:Core.Arango.Serialization.Json.JsonStringEnumMemberConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Serialization.Json.JsonStringEnumMemberConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Serialization.Json.JsonStringEnumMemberConverterHelper`1.GenerateJsonException(System.Type)">
            <summary>
                Generate a <see cref="T:System.Text.Json.JsonException" /> using the internal
                <c>JsonException.AppendPathInformation</c> property that will
                eventually include the JSON path, line number, and byte position in
                line.
                <para>
                    The final message of the exception looks like: The JSON value could
                    not be converted to {0}. Path: $.{JSONPath} | LineNumber:
                    {LineNumber} | BytePositionInLine: {BytePositionInLine}.
                </para>
            </summary>
            <param name="propertyType">Property type.</param>
            <returns><see cref="T:System.Text.Json.JsonException" />.</returns>
        </member>
        <member name="M:Core.Arango.Serialization.Json.JsonStringEnumMemberConverterHelper`1.GenerateJsonException(System.Type,System.String,System.Exception)">
            <summary>
                Generate a <see cref="T:System.Text.Json.JsonException" /> using the internal
                <c>JsonException.AppendPathInformation</c> property that will
                eventually include the JSON path, line number, and byte position in
                line.
                <para>
                    The final message of the exception looks like: The JSON value '{1}'
                    could not be converted to {0}. Path: $.{JSONPath} | LineNumber:
                    {LineNumber} | BytePositionInLine: {BytePositionInLine}.
                </para>
            </summary>
            <param name="propertyType">Property type.</param>
            <param name="propertyValue">
                Value that could not be parsed into
                property type.
            </param>
            <param name="innerException">Optional inner <see cref="T:System.Exception" />.</param>
            <returns><see cref="T:System.Text.Json.JsonException" />.</returns>
        </member>
        <member name="T:Core.Arango.Serialization.Newtonsoft.ArangoNewtonsoftCamelCaseContractResolver">
            <summary>
                Newtonsoft camelCase Naming Policy for Arango
            </summary>
        </member>
        <member name="M:Core.Arango.Serialization.Newtonsoft.ArangoNewtonsoftCamelCaseContractResolver.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Serialization.Newtonsoft.ArangoNewtonsoftCamelCaseContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Serialization.Newtonsoft.ArangoNewtonsoftDefaultContractResolver">
            <summary>
                System.Json.Text PascalCase Naming Policy for Arango
            </summary>
        </member>
        <member name="M:Core.Arango.Serialization.Newtonsoft.ArangoNewtonsoftDefaultContractResolver.#ctor">
            <summary>
                System.Json.Text PascalCase Naming Policy for Arango
            </summary>
        </member>
        <member name="M:Core.Arango.Serialization.Newtonsoft.ArangoNewtonsoftDefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Serialization.Newtonsoft.ArangoNewtonsoftSerializer">
            <summary>
                Arango Json Serializer with Newtonsoft
            </summary>
        </member>
        <member name="M:Core.Arango.Serialization.Newtonsoft.ArangoNewtonsoftSerializer.#ctor(Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
                Arango Json Serializer with Newtonsoft
            </summary>
            <param name="resolver">PascalCase or camelCaseResolver</param>
        </member>
        <member name="M:Core.Arango.Serialization.Newtonsoft.ArangoNewtonsoftSerializer.Serialize(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Serialization.Newtonsoft.ArangoNewtonsoftSerializer.Deserialize``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Serialization.Newtonsoft.ArangoNewtonsoftSerializer.Deserialize(System.String,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Transport.ArangoHttpTransport">
            <summary>
                Arango HTTP 1.1/2.0 Transport Implementation
            </summary>
        </member>
        <member name="M:Core.Arango.Transport.ArangoHttpTransport.#ctor(Core.Arango.IArangoConfiguration)">
            <summary>
                Arango HTTP 1.1/2.0 Transport Implementation
            </summary>
        </member>
        <member name="M:Core.Arango.Transport.ArangoHttpTransport.SendAsync``1(System.Net.Http.HttpMethod,System.String,System.Object,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Transport.ArangoHttpTransport.SendContentAsync(System.Net.Http.HttpMethod,System.String,System.Net.Http.HttpContent,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Core.Arango.Transport.ArangoHttpTransport.SendAsync(System.Type,System.Net.Http.HttpMethod,System.String,System.Object,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Core.Arango.Transport.IArangoTransport">
            <summary>
                Arango Transport Interface
            </summary>
        </member>
        <member name="M:Core.Arango.Transport.IArangoTransport.SendAsync(System.Type,System.Net.Http.HttpMethod,System.String,System.Object,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
                Send request to ArangoDB
            </summary>
        </member>
        <member name="M:Core.Arango.Transport.IArangoTransport.SendAsync``1(System.Net.Http.HttpMethod,System.String,System.Object,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
                Send request to ArangoDB
            </summary>
        </member>
        <member name="M:Core.Arango.Transport.IArangoTransport.SendContentAsync(System.Net.Http.HttpMethod,System.String,System.Net.Http.HttpContent,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
                Send raw HTTP content request to ArangoDB
            </summary>
        </member>
        <member name="T:Remotion.Utilities.ArgumentUtility">
            <summary>
                This utility class provides methods for checking arguments.
            </summary>
            <remarks>
                Some methods of this class return the value of the parameter. In some cases, this is useful because the value will
                be converted to another
                type:
                <code><![CDATA[
            void foo (object o) 
            {
              int i = ArgumentUtility.CheckNotNullAndType<int> ("o", o);
            }
            ]]></code>
                In some other cases, the input value is returned unmodified. This makes it easier to use the argument checks in
                calls to base class constructors
                or property setters:
                <code><![CDATA[
            class MyType : MyBaseType
            {
              public MyType (string name) : base (ArgumentUtility.CheckNotNullOrEmpty ("name", name))
              {
              }
            
              public override Name
              {
                set { base.Name = ArgumentUtility.CheckNotNullOrEmpty ("value", value); }
              }
            }
            ]]></code>
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckNotNullAndType``1(System.String,System.Object)">
            <summary>Returns the value itself if it is not <see langword="null" /> and of the specified value type.</summary>
            <typeparam name="TExpected"> The type that <paramref name="actualValue" /> must have. </typeparam>
            <exception cref="T:System.ArgumentNullException">The <paramref name="actualValue" /> is a <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="actualValue" /> is an instance of another type.</exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.DebugCheckNotNullAndType(System.String,System.Object,System.Type)">
            <summary>Checks of the <paramref name="actualValue" /> is of the <paramref name="expectedType" />.</summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="actualValue" /> is a <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="actualValue" /> is an instance of another type.</exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckType``1(System.String,System.Object)">
            <summary>Returns the value itself if it is of the specified type.</summary>
            <typeparam name="TExpected"> The type that <paramref name="actualValue" /> must have. </typeparam>
            <exception cref="T:System.ArgumentException">
                <paramref name="actualValue" /> is an instance of another type (which is not a subtype of
                <typeparamref name="TExpected" />).
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="actualValue" /> is null and <typeparamref name="TExpected" /> cannot be null.
            </exception>
            <remarks>
                For non-nullable value types, you should use either <see cref="M:Remotion.Utilities.ArgumentUtility.CheckNotNullAndType``1(System.String,System.Object)" /> or pass the type
                <see cref="T:System.Nullable`1" /> instead.
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckNotNullAndTypeIsAssignableFrom(System.String,System.Type,System.Type)">
            <summary>
                Checks whether <paramref name="actualType" /> is not <see langword="null" /> and can be assigned to
                <paramref name="expectedType" />.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="actualType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
                The <paramref name="actualType" /> cannot be assigned to
                <paramref name="expectedType" />.
            </exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckTypeIsAssignableFrom(System.String,System.Type,System.Type)">
            <summary>Checks whether <paramref name="actualType" /> can be assigned to <paramref name="expectedType" />.</summary>
            <exception cref="T:System.ArgumentException">
                The <paramref name="actualType" /> cannot be assigned to
                <paramref name="expectedType" />.
            </exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.DebugCheckTypeIsAssignableFrom(System.String,System.Type,System.Type)">
            <summary>Checks whether <paramref name="actualType" /> can be assigned to <paramref name="expectedType" />.</summary>
            <exception cref="T:System.ArgumentException">
                The <paramref name="actualType" /> cannot be assigned to
                <paramref name="expectedType" />.
            </exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckItemsType``1(System.String,``0,System.Type)">
            <summary>
                Checks whether all items in <paramref name="collection" /> are of type <paramref name="itemType" /> or a null
                reference.
            </summary>
            <exception cref="T:System.ArgumentException"> If at least one element is not of the specified type or a derived type. </exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckItemsNotNullAndType``1(System.String,``0,System.Type)">
            <summary>
                Checks whether all items in <paramref name="collection" /> are of type <paramref name="itemType" /> and not
                null references.
            </summary>
            <exception cref="T:System.ArgumentException"> If at least one element is not of the specified type or a derived type. </exception>
            <exception cref="T:System.ArgumentNullException"> If at least one element is a null reference. </exception>
        </member>
        <member name="T:Remotion.Utilities.Assertion">
            <summary>
                Provides methods that throw an <see cref="T:System.InvalidOperationException" /> if an assertion fails.
            </summary>
            <remarks>
                <para>
                    This class contains methods that are conditional to the DEBUG and TRACE attributes (
                    <see cref="M:Remotion.Utilities.Assertion.DebugAssert(System.Boolean)" /> and <see cref="M:Remotion.Utilities.Assertion.TraceAssert(System.Boolean)" />).
                </para>
                <para>
                    Note that assertion expressions passed to these methods are not evaluated (read: executed) if the respective
                    symbol are not defined during
                    compilation, nor are the methods called. This increases performance for production builds, but make sure that
                    your assertion expressions do
                    not cause any side effects! See <see cref="T:System.Diagnostics.ConditionalAttribute" /> or <see cref="T:System.Diagnostics.Debug" /> and
                    <see cref="T:System.Diagnostics.Trace" /> the for more information
                    about conditional compilation.
                </para>
                <para>
                    Assertions are no replacement for checking input parameters of public methods (see
                    <see cref="T:Remotion.Utilities.ArgumentUtility" />).
                </para>
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.NullableTypeUtility.IsNullableType(System.Type)">
            <summary>
                Determines whether a type is nullable, ie. whether variables of it can be assigned <see langword="null" />.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
                true if <paramref name="type" /> is nullable; otherwise, false.
            </returns>
            <remarks>
                A type is nullable if it is a reference type or a nullable value type. This method returns false only for
                non-nullable value types.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
                Indicates the condition parameter of the assertion method.
                The method itself should be marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute" /> attribute.
                The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionType" />
        </member>
        <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
            <summary>
                Initializes new instance of AssertionConditionAttribute
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
                Gets condition type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
                Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues.
                Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
                Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
                Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>
                Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
                Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
                Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is
                satisfied.
                To set the condition, mark one of the parameters with <see cref="T:JetBrains.Annotations.AssertionConditionAttribute" /> attribute
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionAttribute" />
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
                When applied to target attribute, specifies a requirement for any type which is marked with
                target attribute to implement or inherit specific type or types
            </summary>
            <example>
                <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
                Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
                Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
                Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is
                necessary before its usage
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
                Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
                There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
                Describes dependency between method input and output
            </summary>
            <syntax>
                <p>Function definition table syntax:</p>
                <list>
                    <item>FDT      ::= FDTRow [;FDTRow]*</item>
                    <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                    <item>Input    ::= ParameterName: Value [, Input]*</item>
                    <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                    <item>Value    ::= true | false | null | notnull | canbenull</item>
                </list>
                If method has single input parameter, it's name could be omitted. <br />
                Using "halt" (or "void"/"nothing", which is the same) for method output means that methos doesn't return normally.
                <br />
                "canbenull" annotation is only applicable for output parameters. <br />
                You can use multiple [ContractAnnotation] for each FDT row, or use single attribute with rows separated by
                semicolon. <br />
            </syntax>
            <examples>
                <list>
                    <item>[ContractAnnotation("=> halt")] public void TerminationMethod()</item>
                    <item>
                        [ContractAnnotation("halt &lt;= condition: false")] public void Assert(bool condition, string text) //
                        Regular Assertion method
                    </item>
                    <item>[ContractAnnotation("s:null => true")] public bool IsNullOrEmpty(string s) // String.IsNullOrEmpty</item>
                    <item>
                        [ContractAnnotation("null => null; notnull => notnull")] public object Transform(object data) // Method
                        which returns null if parameter is null, and not null if parameter is not null
                    </item>
                    <item>
                        [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")] public bool
                        TryParse(string s, out Person result)
                    </item>
                </list>
            </examples>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
                Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
                Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type with fixed constructor signature.
                That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
                Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> or
                <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
                Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
                Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
                Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
                If the parameter is delegate, indicates that delegate is executed while the method is executed.
                If the parameter is enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
                Indicates that the function argument should be string literal and match one of the parameters of the caller
                function.
                For example, <see cref="T:System.ArgumentNullException" /> has such parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
                Indicates that method is *pure* linq method, with postponed enumeration. C# iterator methods (yield ...) are always
                LinqTunnel.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
                Indicates that marked element should be localized or not.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute" /> class with
                <see cref="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required" /> set to <see langword="true" />.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute" /> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
                Gets a value indicating whether a element should be localized.
                <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
                Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute" />.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
                <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute" />.</returns>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
                Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as
                well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
                Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
                Indicates that IEnumarable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
                Indicates that the function is used to notify class type property value is changed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
                Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
                This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
                Indicates that method doesn't contain observable side effects.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
                Indicates that marked method builds string by format pattern and (optional) arguments.
                Parameter, which contains format string, should be given in constructor.
                The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> -like form
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
                Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
                Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
                Indicates that the marked method unconditionally terminates control flow execution.
                For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
                Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
                so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
                Gets value indicating what is meant to be used
            </summary>
        </member>
    </members>
</doc>
